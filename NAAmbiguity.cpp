#include "stdafx.h"
#include "NAAmbiguity.h"
//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////
CNAAmbiguity::CNAAmbiguity()
{
	m_pConvert = new CConvert;
	IninitMemberChar();
}

CNAAmbiguity::~CNAAmbiguity()
{
	if (m_pConvert != NULL)
	{
		delete m_pConvert;
		m_pConvert = NULL;
	}
	if (m_pOneChar != NULL)
	{
		delete[]m_pOneChar;
		m_pOneChar = NULL;
	}
	if (m_pStartCountChar != NULL)
	{
		delete[]m_pStartCountChar;
		m_pStartCountChar = NULL;
	}
	if (m_pJongChar != NULL)
	{
		delete[]m_pJongChar;
		m_pJongChar = NULL;
	}
	if (m_pChoJungChar != NULL)
	{
		delete[]m_pChoJungChar;
		m_pChoJungChar = NULL;
	}

	if (m_pMinusTwoString != NULL)
	{
		delete[]m_pMinusTwoString;
		m_pMinusTwoString = NULL;
	}
	if (m_pEndBuffer != NULL)
	{
		delete[]m_pEndBuffer;
		m_pEndBuffer = NULL;
	}
	if (m_pAddTwoString != NULL)
	{
		delete[]m_pAddTwoString;
		m_pAddTwoString = NULL;
	}
}

void CNAAmbiguity::GetOneChar(char *pStr, int nPos, int nCount)
{
	char OneChar[3];
	char* pOriginalStr = NULL;
	char* pIsHangulCode = NULL;
	int nPosition;
	//가을
	pOriginalStr = pStr;
	pIsHangulCode = pStr;
	nPosition = nPos;
	while (nPosition > 1)
	{
		pIsHangulCode++;
		nPosition -= 1;
	}
	memset(OneChar, 0x00, sizeof(OneChar));
	OneChar[0] = *pIsHangulCode;
	if (OneChar[0] & 0x80)
	{
		nPos -= 1;
		nPosition = nPos;
	}
	else
	{
		nPosition = nPos;
	}
	while (nPosition > 1)
	{
		pOriginalStr++;
		nPosition -= 1;
	}
	memset(OneChar, 0x00, sizeof(OneChar));
	OneChar[0] = *pOriginalStr;
	//#define FIRST_VAR 1
	//#define SECOND_VAR 2
	if (OneChar[0] & 0x80) //It's mean not ASCII Code
	{
		if (m_pOneChar != NULL)
		{
			delete[]m_pOneChar;
			m_pOneChar = NULL;
		}
		m_pOneChar = new char[3];
		memset(m_pOneChar, 0x00, 3);

		m_pOneChar[0] = *pOriginalStr;
		pOriginalStr++;
		m_pOneChar[1] = *pOriginalStr;
	}
	else // It's Mean ASCII Code
	{
		if (m_pOneChar != NULL)
		{
			delete[]m_pOneChar;
			m_pOneChar = NULL;
		}
		m_pOneChar = new char[2];
		memset(m_pOneChar, 0x00, 2);
		m_pOneChar[0] = *pOriginalStr;
	}
}

void CNAAmbiguity::GetChojungJongsungChar(char *pOneChar, int nKind)
{
	char* pOriginalChar = NULL;
	int nTotalCount = 0;
	int nCount = 0;
	int nLen = 0;
	char OneChar[3];
	char chChoJung[3];//Chojung Char
	char chJong[3];//Jong Char
	memset(chChoJung, 0x00, 3);
	memset(chJong, 0x00, 3);
	memset(OneChar, 0x00, 3);
	pOriginalChar = pOneChar;
	nTotalCount = strlen(pOriginalChar);
	while (nTotalCount)
	{
		OneChar[nCount] = *pOriginalChar;
		nTotalCount -= 1;
		nCount += 1;
		pOriginalChar++;
	}
	if (OneChar[0] & 0x80)
	{
		if (m_pConvert != NULL)
			m_pConvert->EvalueLastChar(OneChar, chChoJung, chJong);
		if (nKind == CHAR_CHOJUNGSUNG)
		{
			if (chChoJung != NULL && strlen(chChoJung) > 0)
			{
				nLen = strlen(chChoJung);
				nCount = 0;
				if (m_pChoJungChar != NULL)
				{
					delete[]m_pChoJungChar;
					m_pChoJungChar = NULL;
				}
				m_pChoJungChar = new char[nLen + 1];
				memset(m_pChoJungChar, 0x00, nLen + 1);
				while (nLen)
				{
					m_pChoJungChar[nCount] = chChoJung[nCount];
					nLen -= 1;
					nCount += 1;
				}
			}
		}

		if (nKind == CHAR_JONGSUNG)
		{
			nLen = strlen(chJong);
			nCount = 0;
			if (m_pJongChar != NULL)
			{
				delete[]m_pJongChar;
				m_pJongChar = NULL;
			}
			m_pJongChar = new char[nLen + 1];
			memset(m_pJongChar, 0x00, nLen + 1);
			while (nLen)
			{
				m_pJongChar[nCount] = chJong[nCount];
				nLen -= 1;
				nCount += 1;
			}
		}
	}
	else
	{
		if (nKind == CHAR_CHOJUNGSUNG)
		{
			m_pChoJungChar = new char[2];
			memset(m_pChoJungChar, 0x00, 2);
			strcpy(m_pChoJungChar, "");
			//m_pChoJungChar = "";
		}
		if (nKind == CHAR_JONGSUNG)
		{
			if (m_pJongChar != NULL)
			{
				delete[]m_pJongChar;
				m_pJongChar = NULL;
			}
			m_pJongChar = new char[2];
			memset(m_pJongChar, 0x00, 2);
			strcpy(m_pJongChar, "");
		}
	}
}

void CNAAmbiguity::GetStartCountChar(char *pStr, int nMoveCount)
{
	char* pOriginalStr = NULL;
	int nCount = 0;
	if (m_pStartCountChar != NULL)
	{
		delete[]m_pStartCountChar;
		m_pStartCountChar = NULL;
	}
	m_pStartCountChar = new char[nMoveCount + 1];
	memset(m_pStartCountChar, 0x00, nMoveCount + 1);
	pOriginalStr = pStr;
	while (nMoveCount)
	{
		m_pStartCountChar[nCount] = *pOriginalStr;
		nCount += 1;
		pOriginalStr++;
		nMoveCount -= 1;
	}
}

void CNAAmbiguity::MinusTwoStr(char *pOneString, char *pTwoString, int nPos)
{
	//가을 -> 가으 + ㄹ 
	char* pRturnStirng = NULL;
	char* pChoJungChar = NULL;
	char* pJongChar = NULL;
	int nOneStringCount = 0;
	int nChoJungCount = 0;
	int nJongCount = 0;
	int nCount = 0;
	int nMove = 0;
	nOneStringCount = strlen(pOneString);
	if (pOneString[0] & 0x80)
	{
		if (strcmp(pOneString, pTwoString) != 0)
		{
			if (CalculateWordCount(pOneString, nPos, 1, CALCULATE_MINUS))
			{
				if (IsThisWordHangulAscii(pOneString, nPos))
					nOneStringCount -= 2;//It's mean Hnagul
				else
					nOneStringCount -= 1;
			}
			else
			{
				if (IsThisWordHangulAscii(pOneString, nPos))
					nOneStringCount -= 2;
				else
					nOneStringCount -= 1;//It's mean ASCII
			}
			if (nOneStringCount > 0)
			{
				pChoJungChar = new char[3];
				memset(pChoJungChar, 0x00, 3);
				pJongChar = new char[3];
				memset(pJongChar, 0x00, 3);

				if (m_pConvert != NULL)
					m_pConvert->EvalueLastChar(pTwoString, pChoJungChar, pJongChar);

				nChoJungCount = strlen(pChoJungChar);
				nJongCount = strlen(pJongChar);

				if (m_pMinusTwoString != NULL)
				{
					delete[]m_pMinusTwoString;
					m_pMinusTwoString = NULL;
				}
				m_pMinusTwoString = new char[nOneStringCount + nChoJungCount + nJongCount + 1];
				memset(m_pMinusTwoString, 0x00, nOneStringCount + nChoJungCount + nJongCount + 1);

				while (nOneStringCount)
				{
					m_pMinusTwoString[nCount] = pOneString[nCount];
					nCount += 1;
					nOneStringCount -= 1;
				}
				while (nChoJungCount)
				{
					m_pMinusTwoString[nCount] = pChoJungChar[nMove];
					nChoJungCount -= 1;
					nCount += 1;
					nMove += 1;
				}
			}
			else
			{
				if (m_pMinusTwoString != NULL)
				{
					delete[]m_pMinusTwoString;
					m_pMinusTwoString = NULL;
				}
				m_pMinusTwoString = new char[2];
				memset(m_pMinusTwoString, 0x00, 2);
				strcpy(m_pMinusTwoString, "");
			}
		}
		else//if pOneString and pTwoString is Same ....
		{
			pChoJungChar = new char[3];
			memset(pChoJungChar, 0x00, 3);
			pJongChar = new char[3];
			memset(pJongChar, 0x00, 3);
			if (m_pConvert != NULL)
				m_pConvert->EvalueLastChar(pOneString, pChoJungChar, pJongChar);
			nChoJungCount = strlen(pChoJungChar);
			nCount = 0;
			if (m_pMinusTwoString != NULL)
			{
				delete[]m_pMinusTwoString;
				m_pMinusTwoString = NULL;
			}
			m_pMinusTwoString = new char[nChoJungCount + 1];
			memset(m_pMinusTwoString, 0x00, nChoJungCount + 1);
			while (nChoJungCount)
			{
				m_pMinusTwoString[nCount] = pChoJungChar[nCount];
				nChoJungCount -= 1;
				nCount += 1;
			}
		}
	}
	else
	{
		if (m_pMinusTwoString != NULL)
		{
			delete[]m_pMinusTwoString;
			m_pMinusTwoString = NULL;
		}
		m_pMinusTwoString = new char[2];
		memset(m_pMinusTwoString, 0x00, 2);
		strcpy(m_pMinusTwoString, "");
	}

	if (pChoJungChar != NULL)
	{
		delete[]pChoJungChar;
		pChoJungChar = NULL;
	}
	if (pJongChar != NULL)
	{
		delete[]pJongChar;
		pJongChar = NULL;
	}
}

bool CNAAmbiguity::IsThisWordHangulAscii(char *pThisChar, int nPos)
{
	char OneChar[3];
	char* pOriginalStr = NULL;
	char* pIsHangulCode = NULL;
	bool bIsWordState = false;
	int nPosition = 0;
	//가을
	pOriginalStr = pThisChar;
	pIsHangulCode = pThisChar;
	nPosition = nPos;
	while (nPosition > 1)
	{
		pIsHangulCode++;
		nPosition -= 1;
	}
	memset(OneChar, 0x00, sizeof(OneChar));
	OneChar[0] = *pIsHangulCode;
	if (OneChar[0] & 0x80)
	{
		nPos -= 1;
		nPosition = nPos;
	}
	else
	{
		nPosition = nPos;
	}

	while (nPosition > 1)
	{
		pOriginalStr++;
		nPosition -= 1;
	}

	memset(OneChar, 0x00, sizeof(OneChar));
	OneChar[0] = *pOriginalStr;

	if (OneChar[0] & 0x80) //It's mean not ASCII Code
		bIsWordState = true;
	else // It's Mean ASCII Code
		bIsWordState = false;

	return bIsWordState;
}

bool CNAAmbiguity::CalculateWordCount(char *pString, int nCount, int nMove, int nCase)
{
	bool isOneCharCheck = false;
	bool isTwoCharCheck = false;
	bool isHangul = false;
	char* pMovingString = NULL;
	char OneChar[3];
	int nMovePos = 0;
	pMovingString = pString;
	while (nMove)
	{
		switch (nCase)
		{
		case CALCULATE_MINUS:
			nMovePos = nCount;
			while (nMovePos > 1)
			{
				nMovePos -= 1;
				pMovingString++;
			}
			memset(OneChar, 0x00, sizeof(OneChar));
			OneChar[0] = *pMovingString;
			if (OneChar[0] & 0x80)//현재 nCount의 값이 한글인지 아닌지를 계산한다.
				isOneCharCheck = true;
			else
				isOneCharCheck = false;
			if (isOneCharCheck == false)//ASCII인 경우 다음 문자 하나만 검색면 됨
			{
				nMovePos = nCount - 1;
				pMovingString = pString;
				while (nMovePos > 1)
				{
					nMovePos -= 1;
					pMovingString++;
				}
				memset(OneChar, 0x00, sizeof(OneChar));
				OneChar[0] = *pMovingString;
				if (OneChar[0] & 0x80)
					isTwoCharCheck = true;
				else
					isTwoCharCheck = false;

				if (isTwoCharCheck)
					isHangul = true;
				else
					isHangul = false;
			}
			else//ASCII가 아닌 경우 두번의 탐색이 있어야 한다.
			{
				nMovePos = nCount - 2;
				pMovingString = pString;
				while (nMovePos > 1)
				{
					nMovePos -= 1;
					pMovingString++;
				}
				memset(OneChar, 0x00, sizeof(OneChar));
				OneChar[0] = *pMovingString;
				if (OneChar[0] & 0x80)
					isTwoCharCheck = true;
				else
					isTwoCharCheck = false;

				if (isTwoCharCheck)
					isHangul = true;
				else
					isHangul = false;
			}
			break;
		case CALCULATE_PLUS:
			nMovePos = nCount + 1;
			while (nMovePos > 1)
			{
				pMovingString++;
				nMovePos -= 1;
			}
			memset(OneChar, 0x00, sizeof(OneChar));
			OneChar[0] = *pMovingString;
			if (OneChar[0] & 0x80)
				isHangul = true;
			else
				isHangul = false;
			break;
		}
		nMove -= 1;
	}
	return isHangul;
}

void CNAAmbiguity::MoveLeftWordCount(char *pString, int &nCount)
{
	char OneChar[3];
	int nLeftMovePos = 0;
	nLeftMovePos = nCount;
	while (nLeftMovePos > 1)
	{
		pString++;
		nLeftMovePos -= 1;
	}
	memset(OneChar, 0x00, sizeof(OneChar));
	OneChar[0] = *pString;
	if (OneChar[0] & 0x80)
		nCount -= 2;
	else
		nCount -= 1;
}

void CNAAmbiguity::IninitMemberChar()
{
	m_pOneChar = NULL;
	m_pStartCountChar = NULL;
	m_pJongChar = NULL;
	m_pChoJungChar = NULL;
	m_pMinusTwoString = NULL;
	m_pEndBuffer = NULL;
	m_pAddTwoString = NULL;
}

void CNAAmbiguity::InitBuffer()
{
	if (m_pOneChar != NULL)
	{
		delete[]m_pOneChar;
		m_pOneChar = NULL;
	}
	if (m_pStartCountChar != NULL)
	{
		delete[]m_pStartCountChar;
		m_pStartCountChar = NULL;
	}
	if (m_pJongChar != NULL)
	{
		delete[]m_pJongChar;
		m_pJongChar = NULL;
	}
	if (m_pChoJungChar != NULL)
	{
		delete[]m_pChoJungChar;
		m_pChoJungChar = NULL;
	}
	if (m_pMinusTwoString != NULL)
	{
		delete[]m_pMinusTwoString;
		m_pMinusTwoString = NULL;
	}
	if (m_pAddTwoString != NULL)
	{
		delete[]m_pAddTwoString;
		m_pAddTwoString = NULL;
	}
}

//[INT_CON])
//[INT_VOW])
//I(len)!=:ㅇ:)
//"(I(len)==:ㄷ:)&&(C(len)==:ㅏ:))
bool CNAAmbiguity::INT_CON(char *pString, int nStart)
{
	InitBuffer();
	char chCho[3];
	char chJung[3];
	char chJong[3];
	bool bReturn = false;
	GetOneChar(pString, nStart, nStart);
	memset(chCho, 0x00, 3);
	memset(chJong, 0x00, 3);
	memset(chJung, 0x00, 3);
	if (m_pOneChar[0] & 0x80)
	{
		if (m_pConvert != NULL)
			m_pConvert->EvaluateDevChar(m_pOneChar, chCho, chJung, chJong);

		if (strcmp(chCho, "") > 0)
			bReturn = true;
		else
			bReturn = false;
	}
	else
		bReturn = false;

	if (m_pOneChar != NULL)
	{
		delete[]m_pOneChar;
		m_pOneChar = NULL;
	}
	return bReturn;
}

bool CNAAmbiguity::INT_VOW(char *pString, int nStart)
{
	InitBuffer();
	char chCho[3];
	char chJung[3];
	char chJong[3];
	bool bReturn = false;
	GetOneChar(pString, nStart, nStart);
	memset(chCho, 0x00, 3);
	memset(chJong, 0x00, 3);
	memset(chJung, 0x00, 3);
	if (m_pOneChar[0] & 0x80)
	{
		if (m_pConvert != NULL)
			m_pConvert->EvaluateDevChar(m_pOneChar, chCho, chJung, chJong);

		if (strcmp(chJung, "") > 0)
			bReturn = true;
		else
			bReturn = false;
	}
	else
		bReturn = false;

	if (m_pOneChar != NULL)
	{
		delete[]m_pOneChar;
		m_pOneChar = NULL;
	}
	return bReturn;
}

bool CNAAmbiguity::IsChosungIFunction(char *pString, int nStart, char* strCmp)
{
	bool bReturn = false;
	InitBuffer();
	char chCho[3];
	char chJung[3];
	char chJong[3];
	GetOneChar(pString, nStart, nStart);
	memset(chCho, 0x00, 3);
	memset(chJong, 0x00, 3);
	memset(chJung, 0x00, 3);
	if (m_pConvert != NULL)
		m_pConvert->EvaluateDevChar(m_pOneChar, chCho, chJung, chJong);
	if (strcmp(chCho, strCmp) == 0)
		bReturn = true;
	else
		bReturn = false;

	return bReturn;
}

bool CNAAmbiguity::IsJungsungVFunction(char *pString, int nStart, char* strCmp)
{
	bool bReturn = false;
	InitBuffer();
	char chCho[3];
	char chJung[3];
	char chJong[3];
	GetOneChar(pString, nStart, nStart);
	memset(chCho, 0x00, 3);
	memset(chJong, 0x00, 3);
	memset(chJung, 0x00, 3);
	if (m_pConvert != NULL)
		m_pConvert->EvaluateDevChar(m_pOneChar, chCho, chJung, chJong);
	if (strcmp(chJung, strCmp) == 0)
		bReturn = true;
	else
		bReturn = false;

	return bReturn;
}

bool CNAAmbiguity::IsJongsungCFunction(char *pString, int nStart, char* strCmp)
{
	bool bReturn = false;
	InitBuffer();
	char chCho[3];
	char chJung[3];
	char chJong[3];
	GetOneChar(pString, nStart, nStart);
	memset(chCho, 0x00, 3);
	memset(chJong, 0x00, 3);
	memset(chJung, 0x00, 3);
	if (m_pConvert != NULL)
		m_pConvert->EvaluateDevChar(m_pOneChar, chCho, chJung, chJong);
	if (strcmp(chJong, strCmp) == 0)
		bReturn = true;
	else
		bReturn = false;
	return bReturn;
}

void CNAAmbiguity::SaveEndBuffer(char* pSave)
{
	int nLen = 0;
	int nCount = 0;
	if (pSave != NULL)
	{
		if (m_pEndBuffer != NULL)
		{
			delete[]m_pEndBuffer;
			m_pEndBuffer = NULL;
		}
		nLen = strlen(pSave);
		if (nLen > 0)
		{
			m_pEndBuffer = new char[nLen + 1];
			memset(m_pEndBuffer, 0x00, nLen + 1);
			nCount = 0;
			while (nLen)
			{
				m_pEndBuffer[nCount] = pSave[nCount];
				nLen -= 1;
				nCount += 1;
			}
		}
	}
}

void CNAAmbiguity::AddTwoStr(char *pOneString, char *pTwoString)
{
	int nTotalLen;
	int nCount = 0;
	int nOneCount = 0;
	int nTwoCount = 0;
	int nMove = 0;
	if (pOneString != NULL && pTwoString != NULL)
	{
		nTotalLen = strlen(pOneString);
		nTotalLen += strlen(pTwoString);
	}
	else if (pOneString != NULL && pTwoString == NULL)
	{
		nTotalLen = strlen(pOneString);
	}
	else if (pOneString == NULL && pTwoString != NULL)
	{
		nTotalLen = strlen(pTwoString);
	}
	else
	{
		nTotalLen = 0;
	}

	if (pOneString != NULL)
		nOneCount = strlen(pOneString);
	if (pTwoString != NULL)
		nTwoCount = strlen(pTwoString);

	if (m_pAddTwoString != NULL)
	{
		delete[]m_pAddTwoString;
		m_pAddTwoString = NULL;
	}
	m_pAddTwoString = new char[nTotalLen + 1];
	memset(m_pAddTwoString, 0x00, nTotalLen + 1);

	while (nOneCount > 0)
	{
		m_pAddTwoString[nCount] = pOneString[nCount];
		nOneCount -= 1;
		nCount += 1;
	}

	nMove = 0;
	if (pTwoString != NULL)
	{
		while (nTwoCount > 0)
		{
			m_pAddTwoString[nCount] = pTwoString[nMove];
			nTwoCount -= 1;
			nCount += 1;
			nMove += 1;
		}
	}
}
//////////////////////////////////////////////////////////////////////////////////////
void CNAAmbiguity::GoAmbiguityFunction(/*CNAHangulAnaly*/ CMorphoLogicalAnalysis *m_pHan, H_NODE *pNode, int nKindScript)
{
	IninitMemberChar();
	//스크립트를 호출한다. - 스템 및 엔딩의 자질 체크한다.
	int nStemStart = 0;
	int nEndStart = 0;
	bool bFindStem = false;
	bool bFindEnd = false;
	bool bSubNode = false;
	char* pOriginalString = NULL;
	int nTotalLen;
	char* StemFunc = NULL;
	char* EndFunc = NULL;
	char*  pStemString = NULL;
	char* pEndString = NULL;
	int nLen = 0;
	int nCount = 0;
	char strFeature[235];
	SaveHangulAddress(m_pHan, pNode);
	switch (nKindScript)
	{
	case 3:
		pStemString = pNode->pHToken->subStem->strResult;
		nLen = strlen(pNode->pHToken->subEnding->strResult);
		pEndString = new char[nLen + 1];
		memset(pEndString, 0x00, nLen + 1);
		nCount = 0;
		while (nLen)
		{
			pEndString[nCount] = pNode->pHToken->subEnding->strResult[nCount];
			nLen -= 1;
			nCount += 1;
		}
		//복합명사 일때 처리
		if (pNode->pHToken->bSubCompCreate == true)
		{
			if (pNode->pHToken->pSubTailNode->pPrev->pCSubToken != NULL)
			{
				if (strcmp(pStemString, pNode->pHToken->pSubTailNode->pPrev->pCSubToken->strResult) == 0)
				{
					bSubNode = true;
				}
			}
		}
		for (nStemStart = 0; nStemStart< STEM_AMB_COLUM; nStemStart++)
		{
			if (strcmp(pStemString, Stem_Amb_Table[nStemStart][0]) == 0)
			{
				StemFunc = Stem_Amb_Table[nStemStart][1];
				bFindStem = true;
				break;
			}
		}
		if (bFindStem == true)
		{
			CallStemScriptFunction(pNode, StemFunc);
			memset(strFeature, 0x00, 235);
			m_pHangulAnaly->IsExistStemDic(pNode->pHToken->subStem->strResult, strFeature);
			if (strFeature[S_T145] == '1')
				pNode->pHToken->subStem->strFeature[S_T145] = '1';
			pNode->pHToken->subStem->strFeature[1] = '0';
			pNode->pHToken->subStem->strFeature[72] = '0';
		}
		for (nEndStart = 0; nEndStart < END_AMB_COLUM; nEndStart++)
		{
			if (strcmp(pEndString, End_Amb_Table[nEndStart][0]) == 0)
			{
				EndFunc = End_Amb_Table[nEndStart][1];
				bFindEnd = true;
				break;
			}
		}
		if (!bFindEnd)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subEnding->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);

			if (strcmp(m_pOneChar, "은") == 0 ||
				strcmp(m_pOneChar, "는") == 0 ||
				strcmp(m_pOneChar, "을") == 0 ||
				strcmp(m_pOneChar, "란") == 0 ||
				strcmp(m_pOneChar, "든") == 0)
			{
				for (nEndStart = 0; nEndStart < END_AMB_COLUM; nEndStart++)
				{
					if (strcmp(m_pOneChar, End_Amb_Table[nEndStart][0]) == 0)
					{
						EndFunc = End_Amb_Table[nEndStart][1];
						bFindEnd = true;
						break;
					}
				}
			}

			for (nEndStart = 0; !bFindEnd && nEndStart < END_AMB_COLUM; nEndStart++)
			{
				if (strcmp(m_pJongChar, End_Amb_Table[nEndStart][0]) == 0)
				{
					EndFunc = End_Amb_Table[nEndStart][1];
					bFindEnd = true;
					break;
				}
			}
			if (!bFindEnd)
			{
				for (nEndStart = 0; nEndStart < END_AMB_COLUM; nEndStart++)
				{
					if (strcmp(m_pOneChar, End_Amb_Table[nEndStart][0]) == 0)
					{
						EndFunc = End_Amb_Table[nEndStart][1];
						bFindEnd = true;
						break;
					}
				}
			}

		}
		if (bFindEnd == true)
		{
			CallEndScriptFunction(pNode, EndFunc);
			pNode->pHToken->subEnding->strFeature[0] = '0';

			AddTwoStr(m_pEndBuffer, pEndString);
			//IninitMemberChar();
			if (pNode->pHToken->subEnding->strResult != NULL)
			{
				delete[]pNode->pHToken->subEnding->strResult;
				pNode->pHToken->subEnding->strResult = NULL;
			}
			nLen = strlen(m_pAddTwoString);
			nCount = 0;
			pNode->pHToken->subEnding->strResult = new char[nLen + 1];
			memset(pNode->pHToken->subEnding->strResult, 0x00, nLen + 1);
			while (nLen)
			{
				pNode->pHToken->subEnding->strResult[nCount] = m_pAddTwoString[nCount];
				nLen -= 1;
				nCount += 1;
			}
			//복합명사 동시 처리
			if (bSubNode == true)
			{
				if (pNode->pHToken->pSubTailNode->pPrev->pCSubToken->strResult != NULL)
					delete[] pNode->pHToken->pSubTailNode->pPrev->pCSubToken->strResult;
				if (pNode->pHToken->pSubTailNode->pPrev->pCSubToken->strFeature != NULL)
					delete[] pNode->pHToken->pSubTailNode->pPrev->pCSubToken->strFeature;
				nLen = strlen(pNode->pHToken->subStem->strResult);
				pNode->pHToken->pSubTailNode->pPrev->pCSubToken->strResult = new char[nLen + 1];
				strcpy(pNode->pHToken->pSubTailNode->pPrev->pCSubToken->strResult, pNode->pHToken->subStem->strResult);

				nLen = strlen(pNode->pHToken->subStem->strFeature);
				pNode->pHToken->pSubTailNode->pPrev->pCSubToken->strFeature = new char[nLen + 1];
				strcpy(pNode->pHToken->pSubTailNode->pPrev->pCSubToken->strFeature, pNode->pHToken->subStem->strFeature);
			}
			memset(strFeature, 0x00, 235);
			InitBuffer();
		}
		else
		{
			pNode->pHToken->subEnding->strFeature[0] = '0';
			//중의성을 가지고 있는 문자열을 탐색한다.
			GoHaveEndAmbStr(pNode);
		}
		//여기에서 두개의 값을 합친다 
		if (pEndString != NULL)
		{
			delete[]pEndString;
			pEndString = NULL;
		}
		if (m_pAddTwoString != NULL)
		{
			delete[]m_pAddTwoString;
			m_pAddTwoString = NULL;
		}

		break;
	case 2:
		pStemString = pNode->pHToken->subStem->strResult;

		//복합명사 일때 처리
		if (pNode->pHToken->bSubCompCreate == true)
		{
			if (pNode->pHToken->pSubTailNode->pPrev->pCSubToken != NULL)
			{
				if (strcmp(pStemString, pNode->pHToken->pSubTailNode->pPrev->pCSubToken->strResult) == 0)
				{
					bSubNode = true;
				}
			}
		}

		for (nStemStart = 0; nStemStart< STEM_AMB_COLUM; nStemStart++)
		{
			if (strcmp(pStemString, Stem_Amb_Table[nStemStart][0]) == 0)
			{
				StemFunc = Stem_Amb_Table[nStemStart][1];
				bFindStem = true;
				break;
			}
		}
		if (bFindStem == true)
		{
			CallStemScriptFunction(pNode, StemFunc);
			memset(strFeature, 0x00, 235);
			m_pHangulAnaly->IsExistStemDic(pNode->pHToken->subStem->strResult, strFeature);
			if (strFeature[S_T145] == '1')
				pNode->pHToken->subStem->strFeature[S_T145] = '1';
			pNode->pHToken->subStem->strFeature[1] = '0';
			pNode->pHToken->subStem->strFeature[72] = '0';

			//복합명사 동시 처리
			if (bSubNode == true)
			{
				if (pNode->pHToken->pSubTailNode->pPrev->pCSubToken->strResult != NULL)
					delete[] pNode->pHToken->pSubTailNode->pPrev->pCSubToken->strResult;
				if (pNode->pHToken->pSubTailNode->pPrev->pCSubToken->strFeature != NULL)
					delete[] pNode->pHToken->pSubTailNode->pPrev->pCSubToken->strFeature;
				nLen = strlen(pNode->pHToken->subStem->strResult);
				pNode->pHToken->pSubTailNode->pPrev->pCSubToken->strResult = new char[nLen + 1];
				strcpy(pNode->pHToken->pSubTailNode->pPrev->pCSubToken->strResult, pNode->pHToken->subStem->strResult);

				nLen = strlen(pNode->pHToken->subStem->strFeature);
				pNode->pHToken->pSubTailNode->pPrev->pCSubToken->strFeature = new char[nLen + 1];
				strcpy(pNode->pHToken->pSubTailNode->pPrev->pCSubToken->strFeature, pNode->pHToken->subStem->strFeature);
			}
		}
		break;
	case 1:
		pEndString = pNode->pHToken->subEnding->strResult;
		for (nEndStart = 0; nEndStart < END_AMB_COLUM; nEndStart++)
		{
			if (strcmp(pEndString, End_Amb_Table[nEndStart][0]) == 0)
			{
				EndFunc = End_Amb_Table[nEndStart][1];
				bFindEnd = true;
				break;
			}
		}
		if (!bFindEnd)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subEnding->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);

			if (strcmp(m_pOneChar, "은") == 0 ||
				strcmp(m_pOneChar, "는") == 0 ||
				strcmp(m_pOneChar, "을") == 0 ||
				strcmp(m_pOneChar, "란") == 0 ||
				strcmp(m_pOneChar, "든") == 0)
			{
				for (nEndStart = 0; nEndStart < END_AMB_COLUM; nEndStart++)
				{
					if (strcmp(m_pOneChar, End_Amb_Table[nEndStart][0]) == 0)
					{
						EndFunc = End_Amb_Table[nEndStart][1];
						bFindEnd = true;
						break;
					}
				}
			}

			for (nEndStart = 0; !bFindEnd && nEndStart < END_AMB_COLUM; nEndStart++)
			{
				if (strcmp(m_pJongChar, End_Amb_Table[nEndStart][0]) == 0)
				{
					EndFunc = End_Amb_Table[nEndStart][1];
					bFindEnd = true;
					break;
				}
			}
			if (!bFindEnd)
			{
				for (nEndStart = 0; nEndStart < END_AMB_COLUM; nEndStart++)
				{
					if (strcmp(m_pOneChar, End_Amb_Table[nEndStart][0]) == 0)
					{
						EndFunc = End_Amb_Table[nEndStart][1];
						bFindEnd = true;
						break;
					}
				}
			}

		}
		if (bFindEnd == true)
		{
			CallEndScriptFunction(pNode, EndFunc);
			pNode->pHToken->subEnding->strFeature[0] = '0';
		}
		else
		{
			pNode->pHToken->subEnding->strFeature[0] = '0';
			//중의성을 가지고 있는 문자열을 탐색한다.
			GoHaveEndAmbStr(pNode);
		}
		break;
	}
	InitBuffer();
	if (m_pEndBuffer != NULL)
	{
		delete[]m_pEndBuffer;
		m_pEndBuffer = NULL;
	}
}

void CNAAmbiguity::GoHaveEndAmbStr(H_NODE *pNode)
{
	int nTotalLen = 0;
	int nStart = 0;
	int nThisPos = 0;
	int nLen = 0;
	int nCount = 0;
	int nEndStart = 0;
	char* pAmbString = NULL;
	char* EndFunc = NULL;
	bool bFindEnd = false;
	if (pNode->pHToken->strAmbEndingSource != NULL)
	{
		nTotalLen = strlen(pNode->pHToken->strAmbEndingSource);
		for (nStart; nStart < nTotalLen; nStart++)
		{
			if (pNode->pHToken->strAmbEndingSource[nStart] == '%')
			{
				if (pAmbString != NULL)
				{
					delete[]pAmbString;
					pAmbString = NULL;
				}
				nLen = nStart - nThisPos;
				if (nLen == 0)
					nLen += 2;
				else
					nLen += 1;
				pAmbString = new char[nLen];
				memset(pAmbString, 0x00, nLen);
				nCount = 0;
				for (nThisPos; nThisPos < nStart; nThisPos++)
				{
					pAmbString[nCount] = pNode->pHToken->strAmbEndingSource[nThisPos];
					nCount += 1;
				}
				for (nEndStart = 0; nEndStart < END_AMB_COLUM; nEndStart++)
				{
					if (strcmp(pAmbString, End_Amb_Table[nEndStart][0]) == 0)
					{
						EndFunc = End_Amb_Table[nEndStart][1];
						bFindEnd = true;
						break;
					}
				}
				if (bFindEnd == true)
				{
					CallEndScriptFunction(pNode, EndFunc);
					bFindEnd = false;
				}
				nThisPos = nStart + 1;
			}
		}
		if (nThisPos < nTotalLen)
		{
			if (pAmbString != NULL)
			{
				delete[]pAmbString;
				pAmbString = NULL;
			}
			nLen = nTotalLen - nThisPos;
			if (nLen == 0)
				nLen += 2;
			else
				nLen += 1;
			pAmbString = new char[nLen];
			memset(pAmbString, 0x00, nLen);
			nCount = 0;
			for (nThisPos; nThisPos < nStart; nThisPos++)
			{
				pAmbString[nCount] = pNode->pHToken->strAmbEndingSource[nThisPos];
				nCount += 1;
			}
			for (nEndStart = 0; nEndStart < END_AMB_COLUM; nEndStart++)
			{
				if (strcmp(pAmbString, End_Amb_Table[nEndStart][0]) == 0)
				{
					EndFunc = End_Amb_Table[nEndStart][1];
					bFindEnd = true;
					break;
				}
			}
			if (bFindEnd == true)
			{
				CallEndScriptFunction(pNode, EndFunc);
				bFindEnd = false;
			}
		}
	}
	if (pAmbString != NULL)
	{
		delete[]pAmbString;
		pAmbString = NULL;
	}
	InitBuffer();

}

///////////////////////////////////////////////////////////////////////////////
bool CNAAmbiguity::IsExistTable001(char* pString, int nMumber)// 12
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_001; nStart++)
			{
				if (strcmp(pString, Amb_Table001[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_001; nStart++)
			{
				if (strcmp(pString, Amb_Table001[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;
}

bool CNAAmbiguity::IsExistTable002(char* pString, int nMumber)// 5
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_002; nStart++)
			{
				if (strcmp(pString, Amb_Table002[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_002; nStart++)
			{
				if (strcmp(pString, Amb_Table002[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;
}
bool CNAAmbiguity::IsExistTable003(char* pString, int nMumber)// 39
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_003; nStart++)
			{
				if (strcmp(pString, Amb_Table003[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_003; nStart++)
			{
				if (strcmp(pString, Amb_Table003[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;
}
bool CNAAmbiguity::IsExistTable004(char* pString, int nMumber)// 2
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_004; nStart++)
			{
				if (strcmp(pString, Amb_Table004[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_004; nStart++)
			{
				if (strcmp(pString, Amb_Table004[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;
}
bool CNAAmbiguity::IsExistTable005(char* pString, int nMumber)// 5
{

	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_005; nStart++)
			{
				if (strcmp(pString, Amb_Table005[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_005; nStart++)
			{
				if (strcmp(pString, Amb_Table005[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;
}

bool CNAAmbiguity::IsExistTable006(char* pString, int nMumber)// 1
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_006; nStart++)
			{
				if (strcmp(pString, Amb_Table006[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_006; nStart++)
			{
				if (strcmp(pString, Amb_Table006[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;
}


bool CNAAmbiguity::IsExistTable007(char* pString, int nMumber)// 2
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_007; nStart++)
			{
				if (strcmp(pString, Amb_Table007[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_007; nStart++)
			{
				if (strcmp(pString, Amb_Table007[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;
}


bool CNAAmbiguity::IsExistTable051(char* pString, int nMumber)// 7
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_051; nStart++)
			{
				if (strcmp(pString, Amb_Table051[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_051; nStart++)
			{
				if (strcmp(pString, Amb_Table051[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;

}
bool CNAAmbiguity::IsExistTable052(char* pString, int nMumber)// 3
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_052; nStart++)
			{
				if (strcmp(pString, Amb_Table052[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_052; nStart++)
			{
				if (strcmp(pString, Amb_Table052[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;

}

bool CNAAmbiguity::IsExistTable053(char* pString, int nMumber)// 8
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_053; nStart++)
			{
				if (strcmp(pString, Amb_Table053[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_053; nStart++)
			{
				if (strcmp(pString, Amb_Table053[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;

}
bool CNAAmbiguity::IsExistTable054(char* pString, int nMumber)// 3
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_054; nStart++)
			{
				if (strcmp(pString, Amb_Table054[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_054; nStart++)
			{
				if (strcmp(pString, Amb_Table054[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;

}

bool CNAAmbiguity::IsExistTable055(char* pString, int nMumber)// 12
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_055; nStart++)
			{
				if (strcmp(pString, Amb_Table055[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_055; nStart++)
			{
				if (strcmp(pString, Amb_Table055[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;

}

bool CNAAmbiguity::IsExistTable056(char* pString, int nMumber)// 7
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_056; nStart++)
			{
				if (strcmp(pString, Amb_Table056[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_056; nStart++)
			{
				if (strcmp(pString, Amb_Table056[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;

}
bool CNAAmbiguity::IsExistTable057(char* pString, int nMumber)// 15
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_057; nStart++)
			{
				if (strcmp(pString, Amb_Table057[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_057; nStart++)
			{
				if (strcmp(pString, Amb_Table057[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;

}

bool CNAAmbiguity::IsExistTable058(char* pString, int nMumber)// 30
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_058; nStart++)
			{
				if (strcmp(pString, Amb_Table058[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_058; nStart++)
			{
				if (strcmp(pString, Amb_Table058[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;

}

bool CNAAmbiguity::IsExistTable059(char* pString, int nMumber)// 94
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_059; nStart++)
			{
				if (strcmp(pString, Amb_Table059[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_059; nStart++)
			{
				if (strcmp(pString, Amb_Table059[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;

}

bool CNAAmbiguity::IsExistTable060(char* pString, int nMumber)// 10
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_060; nStart++)
			{
				if (strcmp(pString, Amb_Table060[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_060; nStart++)
			{
				if (strcmp(pString, Amb_Table060[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;

}

bool CNAAmbiguity::IsExistTable061(char* pString, int nMumber)// 12
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_061; nStart++)
			{
				if (strcmp(pString, Amb_Table061[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_061; nStart++)
			{
				if (strcmp(pString, Amb_Table061[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;

}

bool CNAAmbiguity::IsExistTable062(char* pString, int nMumber)// 10
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_062; nStart++)
			{
				if (strcmp(pString, Amb_Table062[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_062; nStart++)
			{
				if (strcmp(pString, Amb_Table062[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;

}

bool CNAAmbiguity::IsExistTable063(char* pString, int nMumber)// 7
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_063; nStart++)
			{
				if (strcmp(pString, Amb_Table063[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_063; nStart++)
			{
				if (strcmp(pString, Amb_Table063[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;

}

bool CNAAmbiguity::IsExistTable064(char* pString, int nMumber)// 4
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_064; nStart++)
			{
				if (strcmp(pString, Amb_Table064[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_064; nStart++)
			{
				if (strcmp(pString, Amb_Table064[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;

}

bool CNAAmbiguity::IsExistTable065(char* pString, int nMumber)// 13
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_065; nStart++)
			{
				if (strcmp(pString, Amb_Table065[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_065; nStart++)
			{
				if (strcmp(pString, Amb_Table065[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;

}

bool CNAAmbiguity::IsExistTable066(char* pString, int nMumber)// 9
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_066; nStart++)
			{
				if (strcmp(pString, Amb_Table066[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_066; nStart++)
			{
				if (strcmp(pString, Amb_Table066[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;

}

bool CNAAmbiguity::IsExistTable067(char* pString, int nMumber)// 14
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_067; nStart++)
			{
				if (strcmp(pString, Amb_Table067[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_067; nStart++)
			{
				if (strcmp(pString, Amb_Table067[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;

}

bool CNAAmbiguity::IsExistTable068(char* pString, int nMumber)// 20
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_068; nStart++)
			{
				if (strcmp(pString, Amb_Table068[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_068; nStart++)
			{
				if (strcmp(pString, Amb_Table068[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;

}
bool CNAAmbiguity::IsExistTable069(char* pString, int nMumber)// 34
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_069; nStart++)
			{
				if (strcmp(pString, Amb_Table069[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_069; nStart++)
			{
				if (strcmp(pString, Amb_Table069[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;
}

bool CNAAmbiguity::IsExistTable070(char* pString, int nMumber)// 30
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_070; nStart++)
			{
				if (strcmp(pString, Amb_Table070[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_070; nStart++)
			{
				if (strcmp(pString, Amb_Table070[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;
}


bool CNAAmbiguity::IsExistTable071(char* pString, int nMumber)// 30
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_071; nStart++)
			{
				if (strcmp(pString, Amb_Table071[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_071; nStart++)
			{
				if (strcmp(pString, Amb_Table071[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;
}


bool CNAAmbiguity::IsExistTable072(char* pString, int nMumber)// 30
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_072; nStart++)
			{
				if (strcmp(pString, Amb_Table072[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_072; nStart++)
			{
				if (strcmp(pString, Amb_Table072[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;
}


bool CNAAmbiguity::IsExistTable073(char* pString, int nMumber)// 30
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_073; nStart++)
			{
				if (strcmp(pString, Amb_Table073[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_073; nStart++)
			{
				if (strcmp(pString, Amb_Table073[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;
}

bool CNAAmbiguity::IsExistTable074(char* pString, int nMumber)// 30
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_074; nStart++)
			{
				if (strcmp(pString, Amb_Table074[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_074; nStart++)
			{
				if (strcmp(pString, Amb_Table074[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;
}

bool CNAAmbiguity::IsExistTable075(char* pString, int nMumber)// 1
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_075; nStart++)
			{
				if (strcmp(pString, Amb_Table075[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_075; nStart++)
			{
				if (strcmp(pString, Amb_Table075[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;
}

bool CNAAmbiguity::IsExistTable076(char* pString, int nMumber)// 1
{
	bool bIsFind = false;
	int nStart = 0;
	if (pString != NULL)
	{
		switch (nMumber)
		{
		case GET_STEM:
			for (nStart; nStart < TABLE_076; nStart++)
			{
				if (strcmp(pString, Amb_Table076[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		case GET_END:
			for (nStart; nStart < TABLE_076; nStart++)
			{
				if (strcmp(pString, Amb_Table076[nStart].strOneWord) == 0)
				{
					bIsFind = true;
					break;
				}
			}
			break;
		}
	}
	return bIsFind;
}

void CNAAmbiguity::CreateStemEndStr(H_NODE *pNode, int nCase, int nCount)
{
	//#define CREATE_STEM 0
	//#define CREATE_END 1
	switch (nCase)
	{
	case CREATE_STEM:
		if (pNode->pHToken->subStem->strResult != NULL)
		{
			delete[]pNode->pHToken->subStem->strResult;
			pNode->pHToken->subStem->strResult = NULL;
		}
		pNode->pHToken->subStem->strResult = new char[nCount];
		memset(pNode->pHToken->subStem->strResult, 0x00, nCount);
		if (pNode->pHToken->subStem->strFeature != NULL)
		{
			pNode->pHToken->subStem->strFeature[1] = '0';//중의성 자질을 없애 준다.
		}
		break;
	case CREATE_END:
		if (pNode->pHToken->subEnding->strResult != NULL)
		{
			delete[]pNode->pHToken->subEnding->strResult;
			pNode->pHToken->subEnding->strResult = NULL;
		}
		pNode->pHToken->subEnding->strResult = new char[nCount];
		memset(pNode->pHToken->subEnding->strResult, 0x00, nCount);
		break;
	}
}

//else  if 로 변경시 컴파일 에러 발생으로 if문을 쓰게 됨.
void CNAAmbiguity::CallStemScriptFunction(H_NODE *pNode, char *pStemScript)
{
	if (strcmp(pStemScript, "am0101") == 0) { Amb_Function_0101(pNode); return; }
	if (strcmp(pStemScript, "am0102") == 0) { Amb_Function_0102(pNode); return; }
	if (strcmp(pStemScript, "am0103") == 0) { Amb_Function_0103(pNode); return; }
	if (strcmp(pStemScript, "am0104") == 0) { Amb_Function_0104(pNode); return; }
	if (strcmp(pStemScript, "am0105") == 0) { Amb_Function_0105(pNode); return; }
	if (strcmp(pStemScript, "am0106") == 0) { Amb_Function_0106(pNode); return; }
	if (strcmp(pStemScript, "am0107") == 0) { Amb_Function_0107(pNode); return; }
	if (strcmp(pStemScript, "am0108") == 0) { Amb_Function_0108(pNode); return; }
	if (strcmp(pStemScript, "am0109") == 0) { Amb_Function_0109(pNode); return; }
	if (strcmp(pStemScript, "am0110") == 0) { Amb_Function_0110(pNode); return; }
	if (strcmp(pStemScript, "am0111") == 0) { Amb_Function_0111(pNode); return; }
	if (strcmp(pStemScript, "am0112") == 0) { Amb_Function_0112(pNode); return; }
	if (strcmp(pStemScript, "am0113") == 0) { Amb_Function_0113(pNode); return; }
	if (strcmp(pStemScript, "am0114") == 0) { Amb_Function_0114(pNode); return; }
	if (strcmp(pStemScript, "am0115") == 0) { Amb_Function_0115(pNode); return; }
	if (strcmp(pStemScript, "am0116") == 0) { Amb_Function_0116(pNode); return; }
	if (strcmp(pStemScript, "am0117") == 0) { Amb_Function_0117(pNode); return; }
	if (strcmp(pStemScript, "am0118") == 0) { Amb_Function_0118(pNode); return; }
	if (strcmp(pStemScript, "am0119") == 0) { Amb_Function_0119(pNode); return; }
	if (strcmp(pStemScript, "am0120") == 0) { Amb_Function_0120(pNode); return; }
	if (strcmp(pStemScript, "am0121") == 0) { Amb_Function_0121(pNode); return; }
	if (strcmp(pStemScript, "am0122") == 0) { Amb_Function_0122(pNode); return; }
	if (strcmp(pStemScript, "am0123") == 0) { Amb_Function_0123(pNode); return; }
	if (strcmp(pStemScript, "am0124") == 0) { Amb_Function_0124(pNode); return; }
	if (strcmp(pStemScript, "am0125") == 0) { Amb_Function_0125(pNode); return; }
	if (strcmp(pStemScript, "am0126") == 0) { Amb_Function_0126(pNode); return; }
	if (strcmp(pStemScript, "am0127") == 0) { Amb_Function_0127(pNode); return; }
	if (strcmp(pStemScript, "am0128") == 0) { Amb_Function_0128(pNode); return; }
	if (strcmp(pStemScript, "am0129") == 0) { Amb_Function_0129(pNode); return; }
	if (strcmp(pStemScript, "am0130") == 0) { Amb_Function_0130(pNode); return; }
	if (strcmp(pStemScript, "am0131") == 0) { Amb_Function_0131(pNode); return; }
	if (strcmp(pStemScript, "am0132") == 0) { Amb_Function_0132(pNode); return; }
	if (strcmp(pStemScript, "am0133") == 0) { Amb_Function_0133(pNode); return; }
	if (strcmp(pStemScript, "am0134") == 0) { Amb_Function_0134(pNode); return; }
	if (strcmp(pStemScript, "am0135") == 0) { Amb_Function_0135(pNode); return; }
	if (strcmp(pStemScript, "am0136") == 0) { Amb_Function_0136(pNode); return; }
	if (strcmp(pStemScript, "am0137") == 0) { Amb_Function_0137(pNode); return; }
	if (strcmp(pStemScript, "am0138") == 0) { Amb_Function_0138(pNode); return; }
	if (strcmp(pStemScript, "am0139") == 0) { Amb_Function_0139(pNode); return; }
	if (strcmp(pStemScript, "am0140") == 0) { Amb_Function_0140(pNode); return; }
	if (strcmp(pStemScript, "am0141") == 0) { Amb_Function_0141(pNode); return; }
	if (strcmp(pStemScript, "am0142") == 0) { Amb_Function_0142(pNode); return; }
	if (strcmp(pStemScript, "am0143") == 0) { Amb_Function_0143(pNode); return; }
	if (strcmp(pStemScript, "am0144") == 0) { Amb_Function_0144(pNode); return; }
	if (strcmp(pStemScript, "am0145") == 0) { Amb_Function_0145(pNode); return; }
	if (strcmp(pStemScript, "am0146") == 0) { Amb_Function_0146(pNode); return; }
	if (strcmp(pStemScript, "am0147") == 0) { Amb_Function_0147(pNode); return; }
	if (strcmp(pStemScript, "am0148") == 0) { Amb_Function_0148(pNode); return; }
	if (strcmp(pStemScript, "am0149") == 0) { Amb_Function_0149(pNode); return; }
	if (strcmp(pStemScript, "am0150") == 0) { Amb_Function_0150(pNode); return; }
	if (strcmp(pStemScript, "am0151") == 0) { Amb_Function_0151(pNode); return; }
	if (strcmp(pStemScript, "am0152") == 0) { Amb_Function_0152(pNode); return; }
	if (strcmp(pStemScript, "am0153") == 0) { Amb_Function_0153(pNode); return; }
	if (strcmp(pStemScript, "am0154") == 0) { Amb_Function_0154(pNode); return; }
	if (strcmp(pStemScript, "am0155") == 0) { Amb_Function_0155(pNode); return; }
	if (strcmp(pStemScript, "am0156") == 0) { Amb_Function_0156(pNode); return; }
	if (strcmp(pStemScript, "am0157") == 0) { Amb_Function_0157(pNode); return; }
	if (strcmp(pStemScript, "am0158") == 0) { Amb_Function_0158(pNode); return; }
	if (strcmp(pStemScript, "am0159") == 0) { Amb_Function_0159(pNode); return; }
	if (strcmp(pStemScript, "am0160") == 0) { Amb_Function_0160(pNode); return; }
	if (strcmp(pStemScript, "am0161") == 0) { Amb_Function_0161(pNode); return; }
	if (strcmp(pStemScript, "am0162") == 0) { Amb_Function_0162(pNode); return; }
	if (strcmp(pStemScript, "am0163") == 0) { Amb_Function_0163(pNode); return; }
	if (strcmp(pStemScript, "am0164") == 0) { Amb_Function_0164(pNode); return; }
	if (strcmp(pStemScript, "am0165") == 0) { Amb_Function_0165(pNode); return; }
	if (strcmp(pStemScript, "am0166") == 0) { Amb_Function_0166(pNode); return; }
	if (strcmp(pStemScript, "am0167") == 0) { Amb_Function_0167(pNode); return; }
	if (strcmp(pStemScript, "am0168") == 0) { Amb_Function_0168(pNode); return; }
	if (strcmp(pStemScript, "am0169") == 0) { Amb_Function_0169(pNode); return; }
	if (strcmp(pStemScript, "am0170") == 0) { Amb_Function_0170(pNode); return; }
	if (strcmp(pStemScript, "am0171") == 0) { Amb_Function_0171(pNode); return; }
	if (strcmp(pStemScript, "am0172") == 0) { Amb_Function_0172(pNode); return; }
	if (strcmp(pStemScript, "am0173") == 0) { Amb_Function_0173(pNode); return; }
	if (strcmp(pStemScript, "am0174") == 0) { Amb_Function_0174(pNode); return; }
	if (strcmp(pStemScript, "am0175") == 0) { Amb_Function_0175(pNode); return; }
	if (strcmp(pStemScript, "am0176") == 0) { Amb_Function_0176(pNode); return; }
	if (strcmp(pStemScript, "am0177") == 0) { Amb_Function_0177(pNode); return; }
	if (strcmp(pStemScript, "am0178") == 0) { Amb_Function_0178(pNode); return; }
	if (strcmp(pStemScript, "am0179") == 0) { Amb_Function_0179(pNode); return; }
	if (strcmp(pStemScript, "am0180") == 0) { Amb_Function_0180(pNode); return; }
	if (strcmp(pStemScript, "am0181") == 0) { Amb_Function_0181(pNode); return; }
	if (strcmp(pStemScript, "am0182") == 0) { Amb_Function_0182(pNode); return; }
	if (strcmp(pStemScript, "am0183") == 0) { Amb_Function_0183(pNode); return; }
	if (strcmp(pStemScript, "am0184") == 0) { Amb_Function_0184(pNode); return; }
	if (strcmp(pStemScript, "am0185") == 0) { Amb_Function_0185(pNode); return; }
	if (strcmp(pStemScript, "am0186") == 0) { Amb_Function_0186(pNode); return; }
	if (strcmp(pStemScript, "am0187") == 0) { Amb_Function_0187(pNode); return; }
	if (strcmp(pStemScript, "am0188") == 0) { Amb_Function_0188(pNode); return; }
	if (strcmp(pStemScript, "am0189") == 0) { Amb_Function_0189(pNode); return; }
	if (strcmp(pStemScript, "am0190") == 0) { Amb_Function_0190(pNode); return; }
	if (strcmp(pStemScript, "am0191") == 0) { Amb_Function_0191(pNode); return; }
	if (strcmp(pStemScript, "am0192") == 0) { Amb_Function_0192(pNode); return; }
	if (strcmp(pStemScript, "am0193") == 0) { Amb_Function_0193(pNode); return; }
	if (strcmp(pStemScript, "am0194") == 0) { Amb_Function_0194(pNode); return; }
	if (strcmp(pStemScript, "am0195") == 0) { Amb_Function_0195(pNode); return; }
	if (strcmp(pStemScript, "am0196") == 0) { Amb_Function_0196(pNode); return; }
	if (strcmp(pStemScript, "am0197") == 0) { Amb_Function_0197(pNode); return; }
	if (strcmp(pStemScript, "am0198") == 0) { Amb_Function_0198(pNode); return; }
	if (strcmp(pStemScript, "am0199") == 0) { Amb_Function_0199(pNode); return; }
	if (strcmp(pStemScript, "am0200") == 0) { Amb_Function_0200(pNode); return; }
	if (strcmp(pStemScript, "am0201") == 0) { Amb_Function_0201(pNode); return; }
	if (strcmp(pStemScript, "am0202") == 0) { Amb_Function_0202(pNode); return; }
	if (strcmp(pStemScript, "am0203") == 0) { Amb_Function_0203(pNode); return; }
	if (strcmp(pStemScript, "am0204") == 0) { Amb_Function_0204(pNode); return; }
	if (strcmp(pStemScript, "am0205") == 0) { Amb_Function_0205(pNode); return; }
	if (strcmp(pStemScript, "am0206") == 0) { Amb_Function_0206(pNode); return; }
	if (strcmp(pStemScript, "am0207") == 0) { Amb_Function_0207(pNode); return; }
	if (strcmp(pStemScript, "am0208") == 0) { Amb_Function_0208(pNode); return; }
	if (strcmp(pStemScript, "am0209") == 0) { Amb_Function_0209(pNode); return; }
	if (strcmp(pStemScript, "am0210") == 0) { Amb_Function_0210(pNode); return; }
	if (strcmp(pStemScript, "am0211") == 0) { Amb_Function_0211(pNode); return; }
	if (strcmp(pStemScript, "am0212") == 0) { Amb_Function_0212(pNode); return; }
	if (strcmp(pStemScript, "am0213") == 0) { Amb_Function_0213(pNode); return; }
	if (strcmp(pStemScript, "am0214") == 0) { Amb_Function_0214(pNode); return; }
	if (strcmp(pStemScript, "am0215") == 0) { Amb_Function_0215(pNode); return; }
	if (strcmp(pStemScript, "am0216") == 0) { Amb_Function_0216(pNode); return; }
	if (strcmp(pStemScript, "am0217") == 0) { Amb_Function_0217(pNode); return; }
	if (strcmp(pStemScript, "am0218") == 0) { Amb_Function_0218(pNode); return; }
	if (strcmp(pStemScript, "am0219") == 0) { Amb_Function_0219(pNode); return; }
	if (strcmp(pStemScript, "am0220") == 0) { Amb_Function_0220(pNode); return; }
	if (strcmp(pStemScript, "am0221") == 0) { Amb_Function_0221(pNode); return; }
	if (strcmp(pStemScript, "am0222") == 0) { Amb_Function_0222(pNode); return; }
	if (strcmp(pStemScript, "am0223") == 0) { Amb_Function_0223(pNode); return; }
	if (strcmp(pStemScript, "am0224") == 0) { Amb_Function_0224(pNode); return; }
	if (strcmp(pStemScript, "am0225") == 0) { Amb_Function_0225(pNode); return; }
	if (strcmp(pStemScript, "am0226") == 0) { Amb_Function_0226(pNode); return; }
	if (strcmp(pStemScript, "am0227") == 0) { Amb_Function_0227(pNode); return; }
	if (strcmp(pStemScript, "am0228") == 0) { Amb_Function_0228(pNode); return; }
	if (strcmp(pStemScript, "am0229") == 0) { Amb_Function_0229(pNode); return; }
	if (strcmp(pStemScript, "am0230") == 0) { Amb_Function_0230(pNode); return; }
	if (strcmp(pStemScript, "am0231") == 0) { Amb_Function_0231(pNode); return; }
	if (strcmp(pStemScript, "am0232") == 0) { Amb_Function_0232(pNode); return; }
	if (strcmp(pStemScript, "am0233") == 0) { Amb_Function_0233(pNode); return; }
	if (strcmp(pStemScript, "am0234") == 0) { Amb_Function_0234(pNode); return; }
	if (strcmp(pStemScript, "am0235") == 0) { Amb_Function_0235(pNode); return; }
	if (strcmp(pStemScript, "am0236") == 0) { Amb_Function_0236(pNode); return; }
	if (strcmp(pStemScript, "am0237") == 0) { Amb_Function_0237(pNode); return; }
	if (strcmp(pStemScript, "am0238") == 0) { Amb_Function_0238(pNode); return; }
	if (strcmp(pStemScript, "am0239") == 0) { Amb_Function_0239(pNode); return; }
	if (strcmp(pStemScript, "am0240") == 0) { Amb_Function_0240(pNode); return; }
	if (strcmp(pStemScript, "am0241") == 0) { Amb_Function_0241(pNode); return; }
	if (strcmp(pStemScript, "am0242") == 0) { Amb_Function_0242(pNode); return; }
	if (strcmp(pStemScript, "am0243") == 0) { Amb_Function_0243(pNode); return; }
	if (strcmp(pStemScript, "am0244") == 0) { Amb_Function_0244(pNode); return; }
	if (strcmp(pStemScript, "am0245") == 0) { Amb_Function_0245(pNode); return; }
	if (strcmp(pStemScript, "am0246") == 0) { Amb_Function_0246(pNode); return; }
	if (strcmp(pStemScript, "am0247") == 0) { Amb_Function_0247(pNode); return; }
	if (strcmp(pStemScript, "am0248") == 0) { Amb_Function_0248(pNode); return; }
	if (strcmp(pStemScript, "am0249") == 0) { Amb_Function_0249(pNode); return; }
	if (strcmp(pStemScript, "am0250") == 0) { Amb_Function_0250(pNode); return; }
	if (strcmp(pStemScript, "am0251") == 0) { Amb_Function_0251(pNode); return; }
	if (strcmp(pStemScript, "am0252") == 0) { Amb_Function_0252(pNode); return; }
	if (strcmp(pStemScript, "am0253") == 0) { Amb_Function_0253(pNode); return; }
	if (strcmp(pStemScript, "am0254") == 0) { Amb_Function_0254(pNode); return; }
	if (strcmp(pStemScript, "am0255") == 0) { Amb_Function_0255(pNode); return; }
	if (strcmp(pStemScript, "am0256") == 0) { Amb_Function_0256(pNode); return; }
	if (strcmp(pStemScript, "am0257") == 0) { Amb_Function_0257(pNode); return; }
	if (strcmp(pStemScript, "am0258") == 0) { Amb_Function_0258(pNode); return; }
	if (strcmp(pStemScript, "am0259") == 0) { Amb_Function_0259(pNode); return; }
	if (strcmp(pStemScript, "am0260") == 0) { Amb_Function_0260(pNode); return; }
	if (strcmp(pStemScript, "am0261") == 0) { Amb_Function_0261(pNode); return; }
	if (strcmp(pStemScript, "am0262") == 0) { Amb_Function_0262(pNode); return; }
	if (strcmp(pStemScript, "am0263") == 0) { Amb_Function_0263(pNode); return; }
	if (strcmp(pStemScript, "am0264") == 0) { Amb_Function_0264(pNode); return; }
	if (strcmp(pStemScript, "am0265") == 0) { Amb_Function_0265(pNode); return; }
	if (strcmp(pStemScript, "am0266") == 0) { Amb_Function_0266(pNode); return; }
	if (strcmp(pStemScript, "am0267") == 0) { Amb_Function_0267(pNode); return; }
	if (strcmp(pStemScript, "am0268") == 0) { Amb_Function_0268(pNode); return; }
	if (strcmp(pStemScript, "am0269") == 0) { Amb_Function_0269(pNode); return; }
	if (strcmp(pStemScript, "am0270") == 0) { Amb_Function_0270(pNode); return; }
	if (strcmp(pStemScript, "am0271") == 0) { Amb_Function_0271(pNode); return; }
	if (strcmp(pStemScript, "am0272") == 0) { Amb_Function_0272(pNode); return; }
	if (strcmp(pStemScript, "am0273") == 0) { Amb_Function_0273(pNode); return; }
	if (strcmp(pStemScript, "am0274") == 0) { Amb_Function_0274(pNode); return; }
	if (strcmp(pStemScript, "am0275") == 0) { Amb_Function_0275(pNode); return; }
	if (strcmp(pStemScript, "am0276") == 0) { Amb_Function_0276(pNode); return; }
	if (strcmp(pStemScript, "am0277") == 0) { Amb_Function_0277(pNode); return; }
	if (strcmp(pStemScript, "am0278") == 0) { Amb_Function_0278(pNode); return; }
	if (strcmp(pStemScript, "am0279") == 0) { Amb_Function_0279(pNode); return; }
	if (strcmp(pStemScript, "am0280") == 0) { Amb_Function_0280(pNode); return; }
	if (strcmp(pStemScript, "am0281") == 0) { Amb_Function_0281(pNode); return; }
	if (strcmp(pStemScript, "am0282") == 0) { Amb_Function_0282(pNode); return; }
	if (strcmp(pStemScript, "am0283") == 0) { Amb_Function_0283(pNode); return; }
	if (strcmp(pStemScript, "am0284") == 0) { Amb_Function_0284(pNode); return; }
	if (strcmp(pStemScript, "am0285") == 0) { Amb_Function_0285(pNode); return; }
	if (strcmp(pStemScript, "am0286") == 0) { Amb_Function_0286(pNode); return; }
	if (strcmp(pStemScript, "am0287") == 0) { Amb_Function_0287(pNode); return; }
	if (strcmp(pStemScript, "am0288") == 0) { Amb_Function_0288(pNode); return; }
	if (strcmp(pStemScript, "am0289") == 0) { Amb_Function_0289(pNode); return; }
	if (strcmp(pStemScript, "am0290") == 0) { Amb_Function_0290(pNode); return; }
	if (strcmp(pStemScript, "am0291") == 0) { Amb_Function_0291(pNode); return; }
	if (strcmp(pStemScript, "am0292") == 0) { Amb_Function_0292(pNode); return; }
	if (strcmp(pStemScript, "am0293") == 0) { Amb_Function_0293(pNode); return; }
	if (strcmp(pStemScript, "am0294") == 0) { Amb_Function_0294(pNode); return; }
	if (strcmp(pStemScript, "am0295") == 0) { Amb_Function_0295(pNode); return; }
	if (strcmp(pStemScript, "am0296") == 0) { Amb_Function_0296(pNode); return; }
	if (strcmp(pStemScript, "am0297") == 0) { Amb_Function_0297(pNode); return; }
	if (strcmp(pStemScript, "am0298") == 0) { Amb_Function_0298(pNode); return; }
	if (strcmp(pStemScript, "am0299") == 0) { Amb_Function_0299(pNode); return; }
	if (strcmp(pStemScript, "am0300") == 0) { Amb_Function_0300(pNode); return; }
	if (strcmp(pStemScript, "am0301") == 0) { Amb_Function_0301(pNode); return; }
	if (strcmp(pStemScript, "am0302") == 0) { Amb_Function_0302(pNode); return; }
	if (strcmp(pStemScript, "am0303") == 0) { Amb_Function_0303(pNode); return; }
	if (strcmp(pStemScript, "am0304") == 0) { Amb_Function_0304(pNode); return; }
	if (strcmp(pStemScript, "am0305") == 0) { Amb_Function_0305(pNode); return; }
	if (strcmp(pStemScript, "am0306") == 0) { Amb_Function_0306(pNode); return; }
	if (strcmp(pStemScript, "am0307") == 0) { Amb_Function_0307(pNode); return; }
	if (strcmp(pStemScript, "am0308") == 0) { Amb_Function_0308(pNode); return; }
	if (strcmp(pStemScript, "am0309") == 0) { Amb_Function_0309(pNode); return; }
	if (strcmp(pStemScript, "am0310") == 0) { Amb_Function_0310(pNode); return; }
	if (strcmp(pStemScript, "am0311") == 0) { Amb_Function_0311(pNode); return; }
	if (strcmp(pStemScript, "am0312") == 0) { Amb_Function_0312(pNode); return; }
	if (strcmp(pStemScript, "am0313") == 0) { Amb_Function_0313(pNode); return; }
	if (strcmp(pStemScript, "am0314") == 0) { Amb_Function_0314(pNode); return; }
	if (strcmp(pStemScript, "am0315") == 0) { Amb_Function_0315(pNode); return; }
	if (strcmp(pStemScript, "am0316") == 0) { Amb_Function_0316(pNode); return; }
	if (strcmp(pStemScript, "am0317") == 0) { Amb_Function_0317(pNode); return; }
	if (strcmp(pStemScript, "am0318") == 0) { Amb_Function_0318(pNode); return; }
	if (strcmp(pStemScript, "am0319") == 0) { Amb_Function_0319(pNode); return; }
	if (strcmp(pStemScript, "am0320") == 0) { Amb_Function_0320(pNode); return; }
	if (strcmp(pStemScript, "am0321") == 0) { Amb_Function_0321(pNode); return; }
	if (strcmp(pStemScript, "am0322") == 0) { Amb_Function_0322(pNode); return; }
	if (strcmp(pStemScript, "am0323") == 0) { Amb_Function_0323(pNode); return; }
	if (strcmp(pStemScript, "am0324") == 0) { Amb_Function_0324(pNode); return; }
	if (strcmp(pStemScript, "am0325") == 0) { Amb_Function_0325(pNode); return; }
	if (strcmp(pStemScript, "am0326") == 0) { Amb_Function_0326(pNode); return; }
	if (strcmp(pStemScript, "am0327") == 0) { Amb_Function_0327(pNode); return; }
	if (strcmp(pStemScript, "am0328") == 0) { Amb_Function_0328(pNode); return; }
	if (strcmp(pStemScript, "am0329") == 0) { Amb_Function_0329(pNode); return; }
	if (strcmp(pStemScript, "am0330") == 0) { Amb_Function_0330(pNode); return; }
	if (strcmp(pStemScript, "am0331") == 0) { Amb_Function_0331(pNode); return; }
	if (strcmp(pStemScript, "am0332") == 0) { Amb_Function_0332(pNode); return; }
	if (strcmp(pStemScript, "am0333") == 0) { Amb_Function_0333(pNode); return; }
	if (strcmp(pStemScript, "am0334") == 0) { Amb_Function_0334(pNode); return; }
	if (strcmp(pStemScript, "am0335") == 0) { Amb_Function_0335(pNode); return; }
	if (strcmp(pStemScript, "am0336") == 0) { Amb_Function_0336(pNode); return; }
	if (strcmp(pStemScript, "am0337") == 0) { Amb_Function_0337(pNode); return; }
	if (strcmp(pStemScript, "am0338") == 0) { Amb_Function_0338(pNode); return; }
	if (strcmp(pStemScript, "am0339") == 0) { Amb_Function_0339(pNode); return; }
	if (strcmp(pStemScript, "am0340") == 0) { Amb_Function_0340(pNode); return; }
	if (strcmp(pStemScript, "am0341") == 0) { Amb_Function_0341(pNode); return; }
	if (strcmp(pStemScript, "am0342") == 0) { Amb_Function_0342(pNode); return; }
	if (strcmp(pStemScript, "am0343") == 0) { Amb_Function_0343(pNode); return; }
	if (strcmp(pStemScript, "am0344") == 0) { Amb_Function_0344(pNode); return; }
	if (strcmp(pStemScript, "am0345") == 0) { Amb_Function_0345(pNode); return; }
	if (strcmp(pStemScript, "am0346") == 0) { Amb_Function_0346(pNode); return; }
	if (strcmp(pStemScript, "am0347") == 0) { Amb_Function_0347(pNode); return; }
	if (strcmp(pStemScript, "am0348") == 0) { Amb_Function_0348(pNode); return; }
	if (strcmp(pStemScript, "am0349") == 0) { Amb_Function_0349(pNode); return; }
	if (strcmp(pStemScript, "am0350") == 0) { Amb_Function_0350(pNode); return; }
	if (strcmp(pStemScript, "am0351") == 0) { Amb_Function_0351(pNode); return; }
	if (strcmp(pStemScript, "am0352") == 0) { Amb_Function_0352(pNode); return; }
	if (strcmp(pStemScript, "am0353") == 0) { Amb_Function_0353(pNode); return; }
	if (strcmp(pStemScript, "am0354") == 0) { Amb_Function_0354(pNode); return; }
	if (strcmp(pStemScript, "am0355") == 0) { Amb_Function_0355(pNode); return; }
	if (strcmp(pStemScript, "am0356") == 0) { Amb_Function_0356(pNode); return; }
	if (strcmp(pStemScript, "am0357") == 0) { Amb_Function_0357(pNode); return; }
	if (strcmp(pStemScript, "am0358") == 0) { Amb_Function_0358(pNode); return; }
	if (strcmp(pStemScript, "am0359") == 0) { Amb_Function_0359(pNode); return; }
	if (strcmp(pStemScript, "am0360") == 0) { Amb_Function_0360(pNode); return; }
	if (strcmp(pStemScript, "am0361") == 0) { Amb_Function_0361(pNode); return; }
	if (strcmp(pStemScript, "am0362") == 0) { Amb_Function_0362(pNode); return; }
	if (strcmp(pStemScript, "am0363") == 0) { Amb_Function_0363(pNode); return; }
	if (strcmp(pStemScript, "am0364") == 0) { Amb_Function_0364(pNode); return; }
	if (strcmp(pStemScript, "am0365") == 0) { Amb_Function_0365(pNode); return; }
	if (strcmp(pStemScript, "am0366") == 0) { Amb_Function_0366(pNode); return; }
	if (strcmp(pStemScript, "am0367") == 0) { Amb_Function_0367(pNode); return; }
	if (strcmp(pStemScript, "am0368") == 0) { Amb_Function_0368(pNode); return; }
	if (strcmp(pStemScript, "am0369") == 0) { Amb_Function_0369(pNode); return; }
	if (strcmp(pStemScript, "am0370") == 0) { Amb_Function_0370(pNode); return; }
	if (strcmp(pStemScript, "am0371") == 0) { Amb_Function_0371(pNode); return; }
	if (strcmp(pStemScript, "am0372") == 0) { Amb_Function_0372(pNode); return; }
	if (strcmp(pStemScript, "am0373") == 0) { Amb_Function_0373(pNode); return; }
	if (strcmp(pStemScript, "am0374") == 0) { Amb_Function_0374(pNode); return; }
	if (strcmp(pStemScript, "am0375") == 0) { Amb_Function_0375(pNode); return; }
	if (strcmp(pStemScript, "am0376") == 0) { Amb_Function_0376(pNode); return; }
	if (strcmp(pStemScript, "am0377") == 0) { Amb_Function_0377(pNode); return; }
	if (strcmp(pStemScript, "am0378") == 0) { Amb_Function_0378(pNode); return; }
	if (strcmp(pStemScript, "am0379") == 0) { Amb_Function_0379(pNode); return; }
	if (strcmp(pStemScript, "am0380") == 0) { Amb_Function_0380(pNode); return; }
	if (strcmp(pStemScript, "am0381") == 0) { Amb_Function_0381(pNode); return; }
	if (strcmp(pStemScript, "am0382") == 0) { Amb_Function_0382(pNode); return; }
	if (strcmp(pStemScript, "am0383") == 0) { Amb_Function_0383(pNode); return; }
	if (strcmp(pStemScript, "am0384") == 0) { Amb_Function_0384(pNode); return; }
	if (strcmp(pStemScript, "am0385") == 0) { Amb_Function_0385(pNode); return; }
	if (strcmp(pStemScript, "am0386") == 0) { Amb_Function_0386(pNode); return; }
	if (strcmp(pStemScript, "am0387") == 0) { Amb_Function_0387(pNode); return; }
	if (strcmp(pStemScript, "am0388") == 0) { Amb_Function_0388(pNode); return; }
	if (strcmp(pStemScript, "am0389") == 0) { Amb_Function_0389(pNode); return; }
	if (strcmp(pStemScript, "am0390") == 0) { Amb_Function_0390(pNode); return; }
	if (strcmp(pStemScript, "am0391") == 0) { Amb_Function_0391(pNode); return; }
	if (strcmp(pStemScript, "am0392") == 0) { Amb_Function_0392(pNode); return; }
	if (strcmp(pStemScript, "am0393") == 0) { Amb_Function_0393(pNode); return; }
	if (strcmp(pStemScript, "am0394") == 0) { Amb_Function_0394(pNode); return; }
	if (strcmp(pStemScript, "am0395") == 0) { Amb_Function_0395(pNode); return; }
	if (strcmp(pStemScript, "am0396") == 0) { Amb_Function_0396(pNode); return; }
	if (strcmp(pStemScript, "am0397") == 0) { Amb_Function_0397(pNode); return; }
	if (strcmp(pStemScript, "am0398") == 0) { Amb_Function_0398(pNode); return; }
	if (strcmp(pStemScript, "am0399") == 0) { Amb_Function_0399(pNode); return; }
	if (strcmp(pStemScript, "am0400") == 0) { Amb_Function_0400(pNode); return; }
	if (strcmp(pStemScript, "am0401") == 0) { Amb_Function_0401(pNode); return; }
	if (strcmp(pStemScript, "am0402") == 0) { Amb_Function_0402(pNode); return; }
	if (strcmp(pStemScript, "am0403") == 0) { Amb_Function_0403(pNode); return; }
	if (strcmp(pStemScript, "am0404") == 0) { Amb_Function_0404(pNode); return; }
	if (strcmp(pStemScript, "am0405") == 0) { Amb_Function_0405(pNode); return; }
	if (strcmp(pStemScript, "am0406") == 0) { Amb_Function_0406(pNode); return; }
	if (strcmp(pStemScript, "am0407") == 0) { Amb_Function_0407(pNode); return; }
	if (strcmp(pStemScript, "am0408") == 0) { Amb_Function_0408(pNode); return; }
	if (strcmp(pStemScript, "am0409") == 0) { Amb_Function_0409(pNode); return; }
	if (strcmp(pStemScript, "am0410") == 0) { Amb_Function_0410(pNode); return; }
	if (strcmp(pStemScript, "am0411") == 0) { Amb_Function_0411(pNode); return; }
	if (strcmp(pStemScript, "am0412") == 0) { Amb_Function_0412(pNode); return; }
	if (strcmp(pStemScript, "am0413") == 0) { Amb_Function_0413(pNode); return; }
	if (strcmp(pStemScript, "am0414") == 0) { Amb_Function_0414(pNode); return; }
	if (strcmp(pStemScript, "am0415") == 0) { Amb_Function_0415(pNode); return; }
	if (strcmp(pStemScript, "am0416") == 0) { Amb_Function_0416(pNode); return; }
	if (strcmp(pStemScript, "am0417") == 0) { Amb_Function_0417(pNode); return; }
	if (strcmp(pStemScript, "am0418") == 0) { Amb_Function_0418(pNode); return; }
	if (strcmp(pStemScript, "am0419") == 0) { Amb_Function_0419(pNode); return; }
	if (strcmp(pStemScript, "am0420") == 0) { Amb_Function_0420(pNode); return; }
	if (strcmp(pStemScript, "am0421") == 0) { Amb_Function_0421(pNode); return; }
	if (strcmp(pStemScript, "am0422") == 0) { Amb_Function_0422(pNode); return; }
	if (strcmp(pStemScript, "am0423") == 0) { Amb_Function_0423(pNode); return; }
	if (strcmp(pStemScript, "am0424") == 0) { Amb_Function_0424(pNode); return; }
	if (strcmp(pStemScript, "am0425") == 0) { Amb_Function_0425(pNode); return; }
	if (strcmp(pStemScript, "am0426") == 0) { Amb_Function_0426(pNode); return; }
	if (strcmp(pStemScript, "am0427") == 0) { Amb_Function_0427(pNode); return; }
	if (strcmp(pStemScript, "am0428") == 0) { Amb_Function_0428(pNode); return; }
	if (strcmp(pStemScript, "am0429") == 0) { Amb_Function_0429(pNode); return; }
	if (strcmp(pStemScript, "am0430") == 0) { Amb_Function_0430(pNode); return; }
	if (strcmp(pStemScript, "am0431") == 0) { Amb_Function_0431(pNode); return; }
	if (strcmp(pStemScript, "am0432") == 0) { Amb_Function_0432(pNode); return; }
	if (strcmp(pStemScript, "am0433") == 0) { Amb_Function_0433(pNode); return; }
	if (strcmp(pStemScript, "am0434") == 0) { Amb_Function_0434(pNode); return; }
	if (strcmp(pStemScript, "am0435") == 0) { Amb_Function_0435(pNode); return; }
	if (strcmp(pStemScript, "am0436") == 0) { Amb_Function_0436(pNode); return; }
	if (strcmp(pStemScript, "am0437") == 0) { Amb_Function_0437(pNode); return; }
	if (strcmp(pStemScript, "am0438") == 0) { Amb_Function_0438(pNode); return; }
	if (strcmp(pStemScript, "am0439") == 0) { Amb_Function_0439(pNode); return; }
	if (strcmp(pStemScript, "am0440") == 0) { Amb_Function_0440(pNode); return; }
	if (strcmp(pStemScript, "am0441") == 0) { Amb_Function_0441(pNode); return; }
	if (strcmp(pStemScript, "am0442") == 0) { Amb_Function_0442(pNode); return; }
	if (strcmp(pStemScript, "am0443") == 0) { Amb_Function_0443(pNode); return; }
	if (strcmp(pStemScript, "am0444") == 0) { Amb_Function_0444(pNode); return; }
	if (strcmp(pStemScript, "am0445") == 0) { Amb_Function_0445(pNode); return; }
	if (strcmp(pStemScript, "am0446") == 0) { Amb_Function_0446(pNode); return; }
	if (strcmp(pStemScript, "am0447") == 0) { Amb_Function_0447(pNode); return; }
	if (strcmp(pStemScript, "am0448") == 0) { Amb_Function_0448(pNode); return; }
	if (strcmp(pStemScript, "am0449") == 0) { Amb_Function_0449(pNode); return; }
	if (strcmp(pStemScript, "am0450") == 0) { Amb_Function_0450(pNode); return; }
	if (strcmp(pStemScript, "am0451") == 0) { Amb_Function_0451(pNode); return; }
	if (strcmp(pStemScript, "am0452") == 0) { Amb_Function_0452(pNode); return; }
	if (strcmp(pStemScript, "am0453") == 0) { Amb_Function_0453(pNode); return; }
	if (strcmp(pStemScript, "am0454") == 0) { Amb_Function_0454(pNode); return; }
	if (strcmp(pStemScript, "am0455") == 0) { Amb_Function_0455(pNode); return; }
	if (strcmp(pStemScript, "am0456") == 0) { Amb_Function_0456(pNode); return; }
	if (strcmp(pStemScript, "am0457") == 0) { Amb_Function_0457(pNode); return; }
	if (strcmp(pStemScript, "am0458") == 0) { Amb_Function_0458(pNode); return; }
	if (strcmp(pStemScript, "am0459") == 0) { Amb_Function_0459(pNode); return; }
	if (strcmp(pStemScript, "am0460") == 0) { Amb_Function_0460(pNode); return; }
	if (strcmp(pStemScript, "am0461") == 0) { Amb_Function_0461(pNode); return; }
	if (strcmp(pStemScript, "am0462") == 0) { Amb_Function_0462(pNode); return; }
	if (strcmp(pStemScript, "am0463") == 0) { Amb_Function_0463(pNode); return; }
	if (strcmp(pStemScript, "am0464") == 0) { Amb_Function_0464(pNode); return; }
	if (strcmp(pStemScript, "am0465") == 0) { Amb_Function_0465(pNode); return; }
	if (strcmp(pStemScript, "am0466") == 0) { Amb_Function_0466(pNode); return; }
	if (strcmp(pStemScript, "am0467") == 0) { Amb_Function_0467(pNode); return; }
	if (strcmp(pStemScript, "am0468") == 0) { Amb_Function_0468(pNode); return; }
	if (strcmp(pStemScript, "am0469") == 0) { Amb_Function_0469(pNode); return; }
	if (strcmp(pStemScript, "am0470") == 0) { Amb_Function_0470(pNode); return; }
	if (strcmp(pStemScript, "am0471") == 0) { Amb_Function_0471(pNode); return; }
	if (strcmp(pStemScript, "am0472") == 0) { Amb_Function_0472(pNode); return; }
	if (strcmp(pStemScript, "am0473") == 0) { Amb_Function_0473(pNode); return; }
	if (strcmp(pStemScript, "am0474") == 0) { Amb_Function_0474(pNode); return; }
	if (strcmp(pStemScript, "am0475") == 0) { Amb_Function_0475(pNode); return; }
	if (strcmp(pStemScript, "am0476") == 0) { Amb_Function_0476(pNode); return; }
	if (strcmp(pStemScript, "am0477") == 0) { Amb_Function_0477(pNode); return; }
	if (strcmp(pStemScript, "am0478") == 0) { Amb_Function_0478(pNode); return; }
	if (strcmp(pStemScript, "am0479") == 0) { Amb_Function_0479(pNode); return; }
	if (strcmp(pStemScript, "am0480") == 0) { Amb_Function_0480(pNode); return; }
	if (strcmp(pStemScript, "am0481") == 0) { Amb_Function_0481(pNode); return; }
	if (strcmp(pStemScript, "am0482") == 0) { Amb_Function_0482(pNode); return; }
	if (strcmp(pStemScript, "am0483") == 0) { Amb_Function_0483(pNode); return; }
	if (strcmp(pStemScript, "am0484") == 0) { Amb_Function_0484(pNode); return; }
	if (strcmp(pStemScript, "am0485") == 0) { Amb_Function_0485(pNode); return; }
	if (strcmp(pStemScript, "am0486") == 0) { Amb_Function_0486(pNode); return; }
	if (strcmp(pStemScript, "am0487") == 0) { Amb_Function_0487(pNode); return; }
	if (strcmp(pStemScript, "am0488") == 0) { Amb_Function_0488(pNode); return; }
	if (strcmp(pStemScript, "am0489") == 0) { Amb_Function_0489(pNode); return; }
	if (strcmp(pStemScript, "am0490") == 0) { Amb_Function_0490(pNode); return; }
	if (strcmp(pStemScript, "am0491") == 0) { Amb_Function_0491(pNode); return; }
	if (strcmp(pStemScript, "am0492") == 0) { Amb_Function_0492(pNode); return; }
	if (strcmp(pStemScript, "am0493") == 0) { Amb_Function_0493(pNode); return; }
	if (strcmp(pStemScript, "am0494") == 0) { Amb_Function_0494(pNode); return; }
	if (strcmp(pStemScript, "am0495") == 0) { Amb_Function_0495(pNode); return; }
	if (strcmp(pStemScript, "am0496") == 0) { Amb_Function_0496(pNode); return; }
	if (strcmp(pStemScript, "am0497") == 0) { Amb_Function_0497(pNode); return; }
	if (strcmp(pStemScript, "am0498") == 0) { Amb_Function_0498(pNode); return; }
	if (strcmp(pStemScript, "am0499") == 0) { Amb_Function_0499(pNode); return; }
	if (strcmp(pStemScript, "am0500") == 0) { Amb_Function_0500(pNode); return; }
	if (strcmp(pStemScript, "am0501") == 0) { Amb_Function_0501(pNode); return; }
	if (strcmp(pStemScript, "am0502") == 0) { Amb_Function_0502(pNode); return; }
	if (strcmp(pStemScript, "am0503") == 0) { Amb_Function_0503(pNode); return; }
	if (strcmp(pStemScript, "am0504") == 0) { Amb_Function_0504(pNode); return; }
	if (strcmp(pStemScript, "am0505") == 0) { Amb_Function_0505(pNode); return; }
	if (strcmp(pStemScript, "am0506") == 0) { Amb_Function_0506(pNode); return; }
	if (strcmp(pStemScript, "am0507") == 0) { Amb_Function_0507(pNode); return; }
	if (strcmp(pStemScript, "am0508") == 0) { Amb_Function_0508(pNode); return; }
	if (strcmp(pStemScript, "am0509") == 0) { Amb_Function_0509(pNode); return; }
	if (strcmp(pStemScript, "am0510") == 0) { Amb_Function_0510(pNode); return; }
	if (strcmp(pStemScript, "am0511") == 0) { Amb_Function_0511(pNode); return; }
	if (strcmp(pStemScript, "am0512") == 0) { Amb_Function_0512(pNode); return; }
	if (strcmp(pStemScript, "am0513") == 0) { Amb_Function_0513(pNode); return; }
	if (strcmp(pStemScript, "am0514") == 0) { Amb_Function_0514(pNode); return; }
	if (strcmp(pStemScript, "am0515") == 0) { Amb_Function_0515(pNode); return; }
	if (strcmp(pStemScript, "am0516") == 0) { Amb_Function_0516(pNode); return; }
	if (strcmp(pStemScript, "am0517") == 0) { Amb_Function_0517(pNode); return; }
	if (strcmp(pStemScript, "am0518") == 0) { Amb_Function_0518(pNode); return; }
	if (strcmp(pStemScript, "am0519") == 0) { Amb_Function_0519(pNode); return; }
	if (strcmp(pStemScript, "am0520") == 0) { Amb_Function_0520(pNode); return; }
	if (strcmp(pStemScript, "am0521") == 0) { Amb_Function_0521(pNode); return; }
	if (strcmp(pStemScript, "am0522") == 0) { Amb_Function_0522(pNode); return; }
	if (strcmp(pStemScript, "am0523") == 0) { Amb_Function_0523(pNode); return; }
	if (strcmp(pStemScript, "am0524") == 0) { Amb_Function_0524(pNode); return; }
	if (strcmp(pStemScript, "am0525") == 0) { Amb_Function_0525(pNode); return; }
	if (strcmp(pStemScript, "am0526") == 0) { Amb_Function_0526(pNode); return; }
	if (strcmp(pStemScript, "am0527") == 0) { Amb_Function_0527(pNode); return; }
	if (strcmp(pStemScript, "am0528") == 0) { Amb_Function_0528(pNode); return; }
	if (strcmp(pStemScript, "am0529") == 0) { Amb_Function_0529(pNode); return; }
	if (strcmp(pStemScript, "am0530") == 0) { Amb_Function_0530(pNode); return; }
	if (strcmp(pStemScript, "am0531") == 0) { Amb_Function_0531(pNode); return; }
	if (strcmp(pStemScript, "am0532") == 0) { Amb_Function_0532(pNode); return; }
	if (strcmp(pStemScript, "am0533") == 0) { Amb_Function_0533(pNode); return; }
	if (strcmp(pStemScript, "am0534") == 0) { Amb_Function_0534(pNode); return; }
	if (strcmp(pStemScript, "am0535") == 0) { Amb_Function_0535(pNode); return; }
	if (strcmp(pStemScript, "am0536") == 0) { Amb_Function_0536(pNode); return; }
	if (strcmp(pStemScript, "am0537") == 0) { Amb_Function_0537(pNode); return; }
	if (strcmp(pStemScript, "am0538") == 0) { Amb_Function_0538(pNode); return; }
	if (strcmp(pStemScript, "am0539") == 0) { Amb_Function_0539(pNode); return; }
	if (strcmp(pStemScript, "am0540") == 0) { Amb_Function_0540(pNode); return; }
	if (strcmp(pStemScript, "am0541") == 0) { Amb_Function_0541(pNode); return; }
	if (strcmp(pStemScript, "am0542") == 0) { Amb_Function_0542(pNode); return; }
	if (strcmp(pStemScript, "am0543") == 0) { Amb_Function_0543(pNode); return; }
	if (strcmp(pStemScript, "am0544") == 0) { Amb_Function_0544(pNode); return; }
	if (strcmp(pStemScript, "am0545") == 0) { Amb_Function_0545(pNode); return; }
	if (strcmp(pStemScript, "am0546") == 0) { Amb_Function_0546(pNode); return; }
	if (strcmp(pStemScript, "am0547") == 0) { Amb_Function_0547(pNode); return; }
	if (strcmp(pStemScript, "am0548") == 0) { Amb_Function_0548(pNode); return; }
	if (strcmp(pStemScript, "am0549") == 0) { Amb_Function_0549(pNode); return; }
	if (strcmp(pStemScript, "am0550") == 0) { Amb_Function_0550(pNode); return; }
	if (strcmp(pStemScript, "am0551") == 0) { Amb_Function_0551(pNode); return; }
	if (strcmp(pStemScript, "am0552") == 0) { Amb_Function_0552(pNode); return; }
	if (strcmp(pStemScript, "am0553") == 0) { Amb_Function_0553(pNode); return; }
	if (strcmp(pStemScript, "am0554") == 0) { Amb_Function_0554(pNode); return; }
	if (strcmp(pStemScript, "am0555") == 0) { Amb_Function_0555(pNode); return; }
	if (strcmp(pStemScript, "am0556") == 0) { Amb_Function_0556(pNode); return; }
	if (strcmp(pStemScript, "am0557") == 0) { Amb_Function_0557(pNode); return; }
	if (strcmp(pStemScript, "am0558") == 0) { Amb_Function_0558(pNode); return; }
	if (strcmp(pStemScript, "am0559") == 0) { Amb_Function_0559(pNode); return; }
	if (strcmp(pStemScript, "am0560") == 0) { Amb_Function_0560(pNode); return; }
	if (strcmp(pStemScript, "am0561") == 0) { Amb_Function_0561(pNode); return; }
	if (strcmp(pStemScript, "am0562") == 0) { Amb_Function_0562(pNode); return; }
	if (strcmp(pStemScript, "am0563") == 0) { Amb_Function_0563(pNode); return; }
	if (strcmp(pStemScript, "am0564") == 0) { Amb_Function_0564(pNode); return; }
	if (strcmp(pStemScript, "am0565") == 0) { Amb_Function_0565(pNode); return; }
	if (strcmp(pStemScript, "am0566") == 0) { Amb_Function_0566(pNode); return; }
	if (strcmp(pStemScript, "am0567") == 0) { Amb_Function_0567(pNode); return; }
	if (strcmp(pStemScript, "am0568") == 0) { Amb_Function_0568(pNode); return; }
	if (strcmp(pStemScript, "am0569") == 0) { Amb_Function_0569(pNode); return; }
	if (strcmp(pStemScript, "am0570") == 0) { Amb_Function_0570(pNode); return; }
	if (strcmp(pStemScript, "am0571") == 0) { Amb_Function_0571(pNode); return; }
	if (strcmp(pStemScript, "am0572") == 0) { Amb_Function_0572(pNode); return; }
	if (strcmp(pStemScript, "am0573") == 0) { Amb_Function_0573(pNode); return; }
	if (strcmp(pStemScript, "am0574") == 0) { Amb_Function_0574(pNode); return; }
	if (strcmp(pStemScript, "am0575") == 0) { Amb_Function_0575(pNode); return; }
	if (strcmp(pStemScript, "am0576") == 0) { Amb_Function_0576(pNode); return; }
	if (strcmp(pStemScript, "am0577") == 0) { Amb_Function_0577(pNode); return; }
	if (strcmp(pStemScript, "am0578") == 0) { Amb_Function_0578(pNode); return; }
	if (strcmp(pStemScript, "am0579") == 0) { Amb_Function_0579(pNode); return; }
	if (strcmp(pStemScript, "am0580") == 0) { Amb_Function_0580(pNode); return; }
	if (strcmp(pStemScript, "am0581") == 0) { Amb_Function_0581(pNode); return; }
	if (strcmp(pStemScript, "am0582") == 0) { Amb_Function_0582(pNode); return; }
	if (strcmp(pStemScript, "am0583") == 0) { Amb_Function_0583(pNode); return; }
	if (strcmp(pStemScript, "am0584") == 0) { Amb_Function_0584(pNode); return; }
	if (strcmp(pStemScript, "am0585") == 0) { Amb_Function_0585(pNode); return; }
	if (strcmp(pStemScript, "am0586") == 0) { Amb_Function_0586(pNode); return; }
	if (strcmp(pStemScript, "am0587") == 0) { Amb_Function_0587(pNode); return; }
	if (strcmp(pStemScript, "am0588") == 0) { Amb_Function_0588(pNode); return; }
	if (strcmp(pStemScript, "am0589") == 0) { Amb_Function_0589(pNode); return; }
	if (strcmp(pStemScript, "am0590") == 0) { Amb_Function_0590(pNode); return; }
	if (strcmp(pStemScript, "am0591") == 0) { Amb_Function_0591(pNode); return; }
	if (strcmp(pStemScript, "am0592") == 0) { Amb_Function_0592(pNode); return; }
	if (strcmp(pStemScript, "am0593") == 0) { Amb_Function_0593(pNode); return; }
	if (strcmp(pStemScript, "am0594") == 0) { Amb_Function_0594(pNode); return; }
	if (strcmp(pStemScript, "am0595") == 0) { Amb_Function_0595(pNode); return; }
	if (strcmp(pStemScript, "am0596") == 0) { Amb_Function_0596(pNode); return; }
	if (strcmp(pStemScript, "am0597") == 0) { Amb_Function_0597(pNode); return; }
	if (strcmp(pStemScript, "am0598") == 0) { Amb_Function_0598(pNode); return; }
	if (strcmp(pStemScript, "am0599") == 0) { Amb_Function_0599(pNode); return; }
	if (strcmp(pStemScript, "am0600") == 0) { Amb_Function_0600(pNode); return; }
	if (strcmp(pStemScript, "am0601") == 0) { Amb_Function_0601(pNode); return; }
	if (strcmp(pStemScript, "am0602") == 0) { Amb_Function_0602(pNode); return; }
	if (strcmp(pStemScript, "am0603") == 0) { Amb_Function_0603(pNode); return; }
	if (strcmp(pStemScript, "am0604") == 0) { Amb_Function_0604(pNode); return; }
	if (strcmp(pStemScript, "am0605") == 0) { Amb_Function_0605(pNode); return; }
	if (strcmp(pStemScript, "am0606") == 0) { Amb_Function_0606(pNode); return; }
	if (strcmp(pStemScript, "am0607") == 0) { Amb_Function_0607(pNode); return; }
	if (strcmp(pStemScript, "am0608") == 0) { Amb_Function_0608(pNode); return; }
	if (strcmp(pStemScript, "am0609") == 0) { Amb_Function_0609(pNode); return; }
	if (strcmp(pStemScript, "am0610") == 0) { Amb_Function_0610(pNode); return; }
	if (strcmp(pStemScript, "am0611") == 0) { Amb_Function_0611(pNode); return; }
	if (strcmp(pStemScript, "am0612") == 0) { Amb_Function_0612(pNode); return; }
	if (strcmp(pStemScript, "am0613") == 0) { Amb_Function_0613(pNode); return; }
	if (strcmp(pStemScript, "am0614") == 0) { Amb_Function_0614(pNode); return; }
	if (strcmp(pStemScript, "am0615") == 0) { Amb_Function_0615(pNode); return; }
	if (strcmp(pStemScript, "am0616") == 0) { Amb_Function_0616(pNode); return; }
	if (strcmp(pStemScript, "am0617") == 0) { Amb_Function_0617(pNode); return; }
	if (strcmp(pStemScript, "am0618") == 0) { Amb_Function_0618(pNode); return; }
	if (strcmp(pStemScript, "am0619") == 0) { Amb_Function_0619(pNode); return; }
	if (strcmp(pStemScript, "am0620") == 0) { Amb_Function_0620(pNode); return; }
	if (strcmp(pStemScript, "am0621") == 0) { Amb_Function_0621(pNode); return; }
	if (strcmp(pStemScript, "am0622") == 0) { Amb_Function_0622(pNode); return; }
	if (strcmp(pStemScript, "am0623") == 0) { Amb_Function_0623(pNode); return; }
	if (strcmp(pStemScript, "am0624") == 0) { Amb_Function_0624(pNode); return; }
	if (strcmp(pStemScript, "am0625") == 0) { Amb_Function_0625(pNode); return; }
	if (strcmp(pStemScript, "am0626") == 0) { Amb_Function_0626(pNode); return; }
	if (strcmp(pStemScript, "am0627") == 0) { Amb_Function_0627(pNode); return; }
}

void CNAAmbiguity::CallEndScriptFunction(H_NODE *pNode, char *pEndScript)
{
	if (strcmp(pEndScript, "am0001") == 0)		Amb_Function_0001(pNode);
	if (strcmp(pEndScript, "am0002") == 0)		Amb_Function_0002(pNode);
	if (strcmp(pEndScript, "am0003") == 0)		Amb_Function_0003(pNode);
	if (strcmp(pEndScript, "am0004") == 0)		Amb_Function_0004(pNode);
	if (strcmp(pEndScript, "am0005") == 0)		Amb_Function_0005(pNode);
	if (strcmp(pEndScript, "am0006") == 0)		Amb_Function_0006(pNode);
	if (strcmp(pEndScript, "am0007") == 0)		Amb_Function_0007(pNode);
	if (strcmp(pEndScript, "am0008") == 0)		Amb_Function_0008(pNode);
	if (strcmp(pEndScript, "am0009") == 0)		Amb_Function_0009(pNode);
	if (strcmp(pEndScript, "am0010") == 0)		Amb_Function_0010(pNode);
	if (strcmp(pEndScript, "am0011") == 0)		Amb_Function_0011(pNode);
	if (strcmp(pEndScript, "am0012") == 0)		Amb_Function_0012(pNode);
	if (strcmp(pEndScript, "am0013") == 0)		Amb_Function_0013(pNode);
	if (strcmp(pEndScript, "am0014") == 0)		Amb_Function_0014(pNode);
	if (strcmp(pEndScript, "am0015") == 0)		Amb_Function_0015(pNode);
	if (strcmp(pEndScript, "am0016") == 0)		Amb_Function_0016(pNode);
	if (strcmp(pEndScript, "am0017") == 0)		Amb_Function_0017(pNode);
	if (strcmp(pEndScript, "am0018") == 0)		Amb_Function_0018(pNode);
	if (strcmp(pEndScript, "am0019") == 0)		Amb_Function_0019(pNode);
	if (strcmp(pEndScript, "am0020") == 0)		Amb_Function_0020(pNode);
	if (strcmp(pEndScript, "am0021") == 0)		Amb_Function_0021(pNode);
	if (strcmp(pEndScript, "am0022") == 0)		Amb_Function_0022(pNode);
}

void CNAAmbiguity::SaveHangulAddress(/*CNAHangulAnaly*/ CMorphoLogicalAnalysis *m_pH, H_NODE *pN)
{
	//형태소 분석 클래스가 널이 아닌 경우 한글 및 노드의 값을 저장한다.
	if (m_pH != NULL)
	{
		m_pHangulAnaly = m_pH;
		pThisNode = pN;
	}
}


bool CNAAmbiguity::ThisNodeNull(int nCase)
{
	bool bIsExist = false;
	switch (nCase)
	{
	case STEM_VALUE:
		if (pThisNode->pHToken->subStem->strResult == NULL)
			bIsExist = true;
		else
			bIsExist = false;
		break;
	case END_VALUE:
		if (pThisNode->pHToken->subEnding->strResult == NULL)
			bIsExist = true;
		else
			bIsExist = false;
		break;
	}
	return bIsExist;
}


bool CNAAmbiguity::NextNodeNull(int nCase)
{
	bool bIsExist = false;

	switch (nCase)
	{
	case STEM_VALUE:
		if (pThisNode->pNext != m_pHangulAnaly->m_LinkedList->m_pTailNode)
		{
			if (pThisNode->pNext->pHToken->subStem->strResult == NULL)
				bIsExist = true;
			else
				bIsExist = false;

		}
		else//꼬리를 가리키는 경우 false을 리턴한다.
		{
			bIsExist = true;
		}
		break;
	case END_VALUE:
		if (pThisNode->pNext != m_pHangulAnaly->m_LinkedList->m_pTailNode)
		{
			if (pThisNode->pNext->pHToken->subEnding->strResult == NULL)
				bIsExist = true;
			else
				bIsExist = false;
		}
		else//꼬리를 가리키는 경우 false을 리턴한다.
		{
			bIsExist = true;
		}
		break;
	}
	return bIsExist;
}


bool CNAAmbiguity::PrevNodeNull(int nCase)
{
	bool bIsExist = false;
	switch (nCase)
	{
	case STEM_VALUE:
		if (pThisNode->pPrev != m_pHangulAnaly->m_LinkedList->m_pHeadNode)
		{
			if (pThisNode->pPrev->pHToken->subStem->strResult == NULL)
				bIsExist = true;
			else
				bIsExist = false;
		}
		else//꼬리를 가리키는 경우 false을 리턴한다.
		{
			bIsExist = true;
		}
		break;
	case END_VALUE:
		if (pThisNode->pPrev != m_pHangulAnaly->m_LinkedList->m_pHeadNode)
		{
			if (pThisNode->pPrev->pHToken->subEnding->strResult == NULL)
				bIsExist = true;
			else
				bIsExist = false;
		}
		else//꼬리를 가리키는 경우 false을 리턴한다.
		{
			bIsExist = true;
		}
		break;
	}
	return bIsExist;
}



bool CNAAmbiguity::ThisNodeFeature(int nCase)
{
	bool bIsExist = false;
	switch (nCase)
	{
	case STEM_VALUE:
		if (pThisNode->pHToken->subStem->strFeature != NULL)
			bIsExist = true;
		else
			bIsExist = false;
		break;
	case END_VALUE:
		if (pThisNode->pHToken->subEnding->strFeature != NULL)
			bIsExist = true;
		else
			bIsExist = false;
		break;
	}
	return bIsExist;
}

bool CNAAmbiguity::ThisNodestrResult(int nCase)
{
	bool bIsExist = false;
	switch (nCase)
	{
	case STEM_VALUE:
		if (pThisNode->pHToken->subStem->strResult != NULL)
			bIsExist = true;
		else
			bIsExist = false;
		break;
	case END_VALUE:
		if (pThisNode->pHToken->subEnding->strResult != NULL)
			bIsExist = true;
		else
			bIsExist = false;
		break;
	}
	return bIsExist;
}

bool CNAAmbiguity::NextNodeFeature(int nCase)
{
	bool bIsExist = false;

	switch (nCase)
	{
	case STEM_VALUE:
		if (pThisNode->pNext != m_pHangulAnaly->m_LinkedList->m_pTailNode)
		{
			if (pThisNode->pNext->pHToken->subStem->strFeature != NULL)
				bIsExist = true;
			else
				bIsExist = false;
		}
		else//꼬리를 가리키는 경우 false을 리턴한다.
		{
			bIsExist = false;
		}
		break;
	case END_VALUE:
		if (pThisNode->pNext != m_pHangulAnaly->m_LinkedList->m_pTailNode)
		{
			if (pThisNode->pNext->pHToken->subEnding->strFeature != NULL)
				bIsExist = true;
			else
				bIsExist = false;
		}
		else//꼬리를 가리키는 경우 false을 리턴한다.
		{
			bIsExist = false;
		}
		break;
	}
	return bIsExist;
}

bool CNAAmbiguity::NextNodestrResult(int nCase)
{
	bool bIsExist = false;
	switch (nCase)
	{
	case STEM_VALUE:
		if (pThisNode->pNext != m_pHangulAnaly->m_LinkedList->m_pTailNode)
		{
			if (pThisNode->pNext->pHToken->subStem->strResult != NULL)
				bIsExist = true;
			else
				bIsExist = false;
		}
		else//꼬리를 가리키는 경우 false을 리턴한다.
		{
			bIsExist = false;
		}
		break;
	case END_VALUE:
		if (pThisNode->pNext != m_pHangulAnaly->m_LinkedList->m_pTailNode)
		{
			if (pThisNode->pNext->pHToken->subEnding->strResult != NULL)
				bIsExist = true;
			else
				bIsExist = false;
		}
		else//꼬리를 가리키는 경우 false을 리턴한다.
		{
			bIsExist = false;
		}
		break;
	}
	return bIsExist;
}

bool CNAAmbiguity::PrevNodeFeature(int nCase)
{
	bool bIsExist = false;
	switch (nCase)
	{
	case STEM_VALUE:
		if (pThisNode->pPrev != m_pHangulAnaly->m_LinkedList->m_pHeadNode)
		{
			if (pThisNode->pPrev->pHToken->subStem->strFeature != NULL)
				bIsExist = true;
			else
				bIsExist = false;
		}
		else//꼬리를 가리키는 경우 false을 리턴한다.
		{
			bIsExist = false;
		}
		break;
	case END_VALUE:
		if (pThisNode->pPrev != m_pHangulAnaly->m_LinkedList->m_pHeadNode)
		{
			if (pThisNode->pPrev->pHToken->subEnding->strFeature != NULL)
				bIsExist = true;
			else
				bIsExist = false;
		}
		else//꼬리를 가리키는 경우 false을 리턴한다.
		{
			bIsExist = false;
		}
		break;
	}
	return bIsExist;
}

bool CNAAmbiguity::PrevNodestrResult(int nCase)
{
	bool bIsExist = false;
	switch (nCase)
	{
	case STEM_VALUE:
		if (pThisNode->pPrev != m_pHangulAnaly->m_LinkedList->m_pHeadNode)
		{
			if (pThisNode->pPrev->pHToken->subStem->strResult != NULL)
				bIsExist = true;
			else
				bIsExist = false;
		}
		else//꼬리를 가리키는 경우 false을 리턴한다.
		{
			bIsExist = false;
		}
		break;
	case END_VALUE:
		if (pThisNode->pPrev != m_pHangulAnaly->m_LinkedList->m_pHeadNode)
		{
			if (pThisNode->pPrev->pHToken->subEnding->strResult != NULL)
				bIsExist = true;
			else
				bIsExist = false;
		}
		else//꼬리를 가리키는 경우 false을 리턴한다.
		{
			bIsExist = false;
		}
		break;
	}
	return bIsExist;
}

bool CNAAmbiguity::IsExistTable(int nCase, int strCase)
{
	bool bIsExist = false;
	//#define THIS_STR 0
	//#define NEXT_STR 1
	//#define PREV_STR 2
	switch (strCase)
	{
	case THIS_STR:
		bIsExist = ThisNodestrResult(nCase);
		break;
	case NEXT_STR:
		bIsExist = NextNodestrResult(nCase);
		break;
	case PREV_STR:
		bIsExist = PrevNodestrResult(nCase);
		break;
	}
	return bIsExist;
}


void CNAAmbiguity::CreateNewEndStr(H_NODE *pNode, char *pEndString)
{
	//InitBuffer();
	char* pSave = NULL;
	int i;
	pSave = new char[strlen(pEndString) + 1];
	memset(pSave, 0x00, strlen(pEndString) + 1);
	strcpy(pSave, pEndString);
	if (m_pAddTwoString != NULL)
	{
		delete[]m_pAddTwoString;
		m_pAddTwoString = NULL;
	}

	int nLen = 0;
	if (pNode->pHToken->subEnding->strResult != NULL)
		AddTwoStr(pSave, pNode->pHToken->subEnding->strResult);
	else
		AddTwoStr(pSave, "");

	nLen = strlen(m_pAddTwoString);

	if (pNode->pHToken->subEnding->strResult != NULL)
	{
		delete[]pNode->pHToken->subEnding->strResult;
		pNode->pHToken->subEnding->strResult = NULL;
	}
	if (pNode->pHToken->subEnding->strFeature == NULL)
	{
		//delete []pNode->pHToken->subEnding->strFeature;
		//pNode->pHToken->subEnding->strFeature = NULL;
		pNode->pHToken->subEnding->strFeature = new char[48];
		memset(pNode->pHToken->subEnding->strFeature, 0x00, 48);
		for (i = 0; i<48; i++)
			pNode->pHToken->subEnding->strFeature[i] = '0';
	}
	else
	{
		pNode->pHToken->subEnding->strFeature[0] = '0';//중의성 자질을 없애 준다.
	}

	pNode->pHToken->subEnding->strResult = new char[nLen + 1];
	memset(pNode->pHToken->subEnding->strResult, 0x00, nLen + 1);

	strcpy(pNode->pHToken->subEnding->strResult, m_pAddTwoString);
	delete[]pSave;
	pSave = NULL;


}


/////////////////////////////////////////////////////////////////////////////////////////
//스크립트 
/////////////////////////////////////////////////////////////////////////////////////////

void CNAAmbiguity::Amb_Function_0101(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0102(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "경우") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8
}

void CNAAmbiguity::Amb_Function_0103(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "원주율") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if ((strcmp(pNode->pHToken->subEnding->strResult, "어") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "게") == 0) &&
			pNode->pNext->pHToken->subStem->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0104(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "서는") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0105(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "여") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "어") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "어서") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35, S_T144);//2,7,35
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35, S_T144);//2,7,35
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0106(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "서는") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "오른") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "말") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0107(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39	
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if ((pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1') ||
					pNode->pNext->pHToken->subStem->strFeature[49] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (ThisNodestrResult(STEM_VALUE) == true && NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pHToken->subStem->strResult, "남") == 0 &&
					pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0108(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0109(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 7);//3,7
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 &&
			(strcmp(pNode->pNext->pHToken->subStem->strResult, "보") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "볼") == 0))
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
}

void CNAAmbiguity::Amb_Function_0110(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || NextNodeNull(STEM_VALUE) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[8] == '1')
					{
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

																	   // Edted by KKH 2004-01-12
						if ((pNode->pHToken->subEnding->strFeature != NULL &&
							pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
							pNode->pHToken->subEnding->strFeature == NULL)
						{
							CreateNewEndStr(pNode, "어");
							SaveEndBuffer("어");
						}
						// Edted by KKH 2004-01-12
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
					}
				}
				if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

																   // Edited by KKH 2004-01-12
					if ((pNode->pHToken->subEnding->strFeature != NULL &&
						pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
						pNode->pHToken->subEnding->strFeature == NULL)
					{
						CreateNewEndStr(pNode, "어");
						SaveEndBuffer("어");
					}
					// Edited by KKH 2004-01-12
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "주") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "보") == 0)
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

																   // Edited by KKH 2004-01-12
					if ((pNode->pHToken->subEnding->strFeature != NULL &&
						pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
						pNode->pHToken->subEnding->strFeature == NULL)
					{
						CreateNewEndStr(pNode, "어");
						SaveEndBuffer("어");
					}
					// Edited by KKH 2004-01-12
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0111(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1'  &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "서는") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "버리") == 0)
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "아");
					SaveEndBuffer("아");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "아");
				SaveEndBuffer("아");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0112(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "서는") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true || NextNodeNull(STEM_VALUE) == true)
			{
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pNext->pHToken->subStem->strResult, "놓") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "버리") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
				}
				if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken == NULL)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
}

void CNAAmbiguity::Amb_Function_0113(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true || ThisNodeFeature(END_VALUE) == true)
	{
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
}

void CNAAmbiguity::Amb_Function_0114(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "여") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[39] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0115(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "는다") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0116(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 28);//2,7,8,28
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 28);//2,7,8,28
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 28);//2,7,8,28
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 28);//2,7,8,28
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 28);//2,7,8,28
}

void CNAAmbiguity::Amb_Function_0117(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
				}
			}
			if (PrevNodestrResult(END_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
			{
				if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
				}
				if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
}

void CNAAmbiguity::Amb_Function_0118(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "구두") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "접시") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "흑판") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "체면") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0119(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "비꼬") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0120(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0121(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "한") == 0)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "앞서") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "물러나") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0122(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
		{
			if (PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "하") == 0)
		{
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (PrevNodestrResult(END_VALUE) == true && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는지") == 0 &&
			strcmp(pNode->pNext->pHToken->subStem->strResult, "대하") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0123(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에다가") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "걸");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if ((strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0) &&
			pNode->pPrev->pHToken->subEnding->strFeature[2] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "걸");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "걸");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "걸");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true &&  PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
			pNode->pPrev->pHToken->subEnding == NULL)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeNull(END_VALUE) == true && PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "것");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

			CreateNewEndStr(pNode, "은");
			SaveEndBuffer("은");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "고") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "것");
		bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

		CreateNewEndStr(pNode, "이ㄴ");
		SaveEndBuffer("이ㄴ");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0124(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(STEM_VALUE) == true && PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subStem->strResult, "다") == 0 &&
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "나") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (ThisNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subStem->strResult, "모두") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (ThisNodestrResult(STEM_VALUE) == true && ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subStem->strResult, "못") == 0 &&
			strcmp(pNode->pHToken->subEnding->strResult, "지") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "못하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,3,8,27
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0125(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[5] == '1')
				{
					if (PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
					if (bIsFirstFind == false)
						bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,4
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
}

void CNAAmbiguity::Amb_Function_0126(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true || NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "없") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
						pNode->pNext->pHToken->subStem->strFeature[12] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0127(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[39] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에서") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0128(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true)
	{
		if (pNode->pHToken->subEnding->strResult == NULL && bIsFirstFind == false)
		{
			if (NextNodeFeature(STEM_VALUE) == true)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' ||
					pNode->pNext->pHToken->subStem->strFeature[5] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[39] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0129(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
		{
			if (NextNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subEnding->strResult, "지") == 0 ||
					strcmp(pNode->pNext->pHToken->subEnding->strResult, "이") == 0 ||
					strcmp(pNode->pNext->pHToken->subEnding->strResult, "가") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "만") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0130(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "독립") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "공화국") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "자강") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "국방") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "국방력") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "외교") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "국가") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "고름") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "치마") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "저고리") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0131(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "나이") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "인물") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "실험") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "목적") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "여부") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "생각") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0132(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[5] == '0')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 10, 58);//2,10,58
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[39] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 10, 58);//2,10,58
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10, 58);//2,10,58
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
}

void CNAAmbiguity::Amb_Function_0133(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "도") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "순위") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "점") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "미") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14, 51, 52, 54);//2,4,14,51,52,54
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0134(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "요") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
}

void CNAAmbiguity::Amb_Function_0135(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0136(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (ThisNodestrResult(STEM_VALUE) == true && PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pHToken->subStem->strResult, "보") == 0 &&
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0137(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(STEM_VALUE) == true && ThisNodestrResult(END_VALUE) == true
		&& PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if ((strcmp(pNode->pHToken->subStem->strResult, "파") == 0 &&
			strcmp(pNode->pHToken->subEnding->strResult, "ㅂ니다") == 0) &&
			(strcmp(pNode->pPrev->pHToken->subStem->strResult, "땅") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "무덤") == 0))
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35
	}
	if (ThisNodestrResult(STEM_VALUE) == true && ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subStem->strResult, "파") == 0 &&
			strcmp(pNode->pHToken->subEnding->strResult, "ㅂ니다") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "팔");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || NextNodeNull(STEM_VALUE) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[8] == '1')
					{
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

						CreateNewEndStr(pNode, "아");
						SaveEndBuffer("아");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
					}
				}
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pNext->pHToken->subStem->strResult, "보") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "주") == 0)
					{
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

						CreateNewEndStr(pNode, "아");
						SaveEndBuffer("아");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
					}
				}
				if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

					CreateNewEndStr(pNode, "아");
					SaveEndBuffer("아");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

					CreateNewEndStr(pNode, "아");
					SaveEndBuffer("아");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken == NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0138(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeNull(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
			{
				if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pNext->pHToken->subStem->strResult, "버리") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "주") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "놓") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0139(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "입맛") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "입") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "달");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "시");
			SaveEndBuffer("시");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[45] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0140(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0141(H_NODE *pNode)
{

	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable060(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0142(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable060(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0143(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0144(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "은") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0145(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4}
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}

	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0146(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[14] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
			{
				if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pPrev->pHToken->subEnding->strFeature[2] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
				if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0147(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(STEM_VALUE) == true || PrevNodeNull(STEM_VALUE) == true)
	{
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "한걸음") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "표") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "수") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "자") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "자고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "어라") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0148(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "자") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "자고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "아라") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "심성") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "마음") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "말") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "말씀") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "예의") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "예절") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "양지") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "햇볕") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "심성") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "마음") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "말") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "말씀") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "길") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "대로") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "게") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0149(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "입") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0150(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는다") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "눈") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "낯") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "몸") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "귀") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "손") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[49] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0151(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "러") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "자") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "시") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "라") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "도록") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "다리") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "데") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[58] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[58] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7
}

void CNAAmbiguity::Amb_Function_0152(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "어라") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "여라") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "자") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0153(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(STEM_VALUE) == true &&
			PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[50] == '1' ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "입") == 0)
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "아");
				SaveEndBuffer("아");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "아");
			SaveEndBuffer("아");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[50] == '1' ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "입") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "똥") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "오줌") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "침") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "게") == 0)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "되") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable060(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "비싸") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "제품") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "물건") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "값") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "더") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "훨씬") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0154(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "려는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "려고") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "게") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true || PrevNodestrResult(STEM_VALUE) == true)
	{
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable060(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "머리") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "기억력") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "감각") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "솜씨") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "유우머") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0155(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "와") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "과") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "랑") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이랑") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "하고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[49] == '1' ||
			IsExistTable054(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0156(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[45] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0157(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[45] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에만") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "구") == 0)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "것");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4  

					CreateNewEndStr(pNode, "하");
					SaveEndBuffer("하");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[2] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "게") == 0)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "되") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[9] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "것");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4   

			CreateNewEndStr(pNode, "하");
			SaveEndBuffer("하");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "이런") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "그런") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "저런") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "것");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4   

			CreateNewEndStr(pNode, "하");
			SaveEndBuffer("하");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0158(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(STEM_VALUE) == true && PrevNodeFeature(STEM_VALUE) == true &&
		PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subStem->strResult, "일대") == 0 &&
			pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
			pNode->pPrev->pHToken->subStem->strFeature[51] == '1')
		{
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 51);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 22);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 22);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 22);//2,4
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[S_T142] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 22);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 13, 22);//2,13
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 13, 22);//2,13
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "시") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "일") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 13, 22);//2,13
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 22);//2,4
		}
		if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 22);//2,4
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 13, 22);//2,13
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 22);//2,4
}

void CNAAmbiguity::Amb_Function_0159(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[25] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable059(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0160(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[25] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable059(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}

	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "불손") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0161(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(STEM_VALUE) == true || PrevNodeFeature(STEM_VALUE) == true)
	{
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "이") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "그") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "우리") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "네") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "에게") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "한테") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "들") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "더러") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "같") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "으로") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "에서") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "까지") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0162(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "에") == 0)
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "어느") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "아침") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "무심") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "꿈") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "엉겹") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "어떨") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "잠") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "얼") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "모르") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}


void CNAAmbiguity::Amb_Function_0163(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[14] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0164(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1'  &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[39] == '1')
			{
				if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (bIsFirstFind == false)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0165(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "울리") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "흐르") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}

	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "어") == 0)
		{
			if (PrevNodestrResult(END_VALUE) == true)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "여") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0166(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				if (PrevNodestrResult(END_VALUE) == true)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
				if (bIsFirstFind == false)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "여") == 0)
			{
				if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
				if (bIsFirstFind == false)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0167(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0168(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "원숭이") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0169(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0170(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[10] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
			if (NextNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subEnding->strResult, "다면") == 0 ||
					strcmp(pNode->pNext->pHToken->subEnding->strResult, "면") == 0 ||
					strcmp(pNode->pNext->pHToken->subEnding->strResult, "으면") == 0 ||
					strcmp(pNode->pNext->pHToken->subEnding->strResult, "려거든") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0171(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[25] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable059(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
				}
			}
			if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
			{
				if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
						pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
				}
				if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
				}
			}
		}
		if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken == NULL)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable064(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable064(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
}

void CNAAmbiguity::Amb_Function_0172(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0173(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0174(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true || NextNodestrResult(STEM_VALUE) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[25] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable059(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
				}
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pNext->pHToken->subStem->strResult, "학년") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "학기") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "학기말") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "형제") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "남매") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "교대") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "부자") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[6] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable064(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable064(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0175(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	bool bIsFind1 = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㄴ");
				bIsFind1 = IsJongsungCFunction(pOriginalString, 4, "ㅆ");
			}
			else
			{
				bIsFind = false;
				bIsFind1 = false;
			}
		}
		else
		{
			bIsFind = false;
			bIsFind1 = false;
		}
	}

	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "보") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "가지") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "주") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "들이") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "달") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "먹") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "오") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "한") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "팔") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true || NextNodestrResult(STEM_VALUE) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[25] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable064(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable059(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "학년") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "학기") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "학기말") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "형제") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "남매") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable064(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (PrevNodestrResult(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "기") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "서는") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pNext->pHToken->subStem->strResult, "보") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "가지") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "주") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "들이") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "달") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "먹") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "오") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (bIsFind == false && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "생") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "팔") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "소비자") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[16] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (PrevNodestrResult(END_VALUE) == true || IsExistTable(END_VALUE, PREV_STR) == true)
			{
				if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에서") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "서") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "와") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "과") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "랑") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이랑") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "하고") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "살");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
					}
				}
			}
			if (PrevNodestrResult(STEM_VALUE) == true || PrevNodeFeature(STEM_VALUE) == true)
			{
				if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "혼자") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "같이") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "생") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "함께") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "잘") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "평생") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "오늘") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "현대") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "살");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
					}
				}
				if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pPrev->pHToken->subStem->strFeature[52] == '1' ||
						pNode->pPrev->pHToken->subStem->strFeature[7] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "살");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
					}
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "살");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			if (bIsFind1 == false && bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "생") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "팔") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "소비자") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[16] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에서") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "서") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "와") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "과") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "랑") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이랑") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "하고") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "살");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
				}
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "혼자") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "같이") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "생") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "함께") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "잘") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "평생") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "오늘") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "현대") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "전세") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "월세") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "살");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
				}
			}
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[52] == '1' ||
					pNode->pPrev->pHToken->subStem->strFeature[7] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "살");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "많이") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "살");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
			}
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0176(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
			}
			if (NextNodeFeature(STEM_VALUE) == true || NextNodeNull(STEM_VALUE) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
					{
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

						CreateNewEndStr(pNode, "아");
						SaveEndBuffer("아");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
					}
				}
				if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

					CreateNewEndStr(pNode, "아");
					SaveEndBuffer("아");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1'  &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
}

void CNAAmbiguity::Amb_Function_0177(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "타작") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "사냥") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1' && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0178(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable074(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7
				}
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pNext->pHToken->subStem->strResult, "듯하") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7
}

void CNAAmbiguity::Amb_Function_0179(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || PrevNodestrResult(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "앞") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "뒤") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "옆") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "뒷") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[12] == '1' ||
					pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
					pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0180(H_NODE *pNode)
{

	bool bIsFirstFind = false;
	bool bIsFind = false;
	bool bIsFind1 = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㅇ");
				bIsFind1 = IsJongsungCFunction(pOriginalString, 4, "ㅆ");
				if (bIsFind1 == false)
					bIsFind1 = IsJongsungCFunction(pOriginalString, 2, "ㅆ");
			}
			else
			{
				bIsFind = false;
				bIsFind1 = false;
			}
		}
		else
		{
			bIsFind = false;
			bIsFind1 = false;
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "에게까지") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "장조") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "단조") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "어리") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "어린") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "많") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(END_VALUE) == true && ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 &&
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "고") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 &&
			pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "요") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18
	}
	if (bIsFind1 == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	if (bIsFind == true && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "낫");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0)
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "아");
				SaveEndBuffer("아");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable070(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "아");
				SaveEndBuffer("아");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "시고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 7);//3,7
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable070(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 &&
			(strcmp(pNode->pNext->pHToken->subStem->strResult, "말") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "만") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "마") == 0))
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18
}

void CNAAmbiguity::Amb_Function_0181(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (PrevNodestrResult(STEM_VALUE) && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "쌀") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "같") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "골라내") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "섞이") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "많이") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "많") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "같") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "골라내") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "섞이") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "많이") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "많") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "같") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "골라내") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "섞이") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "많이") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "많") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "요") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "시오") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0182(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(END_VALUE) == true && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if ((strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에게") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "께") == 0) &&
			(strcmp(pNode->pNext->pHToken->subStem->strResult, "되") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "끼치") == 0))
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "가") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "누구");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 22);//2,4,5
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0183(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㄴ");
			}
			else
			{
				bIsFind = false;
			}
		}
		else
		{
			bIsFind = false;
		}
	}

	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "로") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (bIsFind == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(STEM_VALUE) && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "코") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "골");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[14] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
}

void CNAAmbiguity::Amb_Function_0184(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[25] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
				}
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pNext->pHToken->subStem->strResult, "마지") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable059(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
				}
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "동") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "남") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "북") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "대표") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "전") == 0 &&
					strcmp(pNode->pNext->pNext->pHToken->subStem->strResult, "대표") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "동") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "남") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "북") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "총재") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

																   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true || ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
		}
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
		}
	}
	if (ThisNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
}

void CNAAmbiguity::Amb_Function_0185(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[12] == '1' ||
						pNode->pNext->pHToken->subStem->strFeature[6] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true || NextNodestrResult(STEM_VALUE) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pNext->pHToken->subStem->strResult, "수작") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "꾀") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "행동") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "소리") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "쥐") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0186(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "밤") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "날") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "하룻밤") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "밤") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "그") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "잠들") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "어느") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "눈코뜨") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "뜨") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "눈깜짝하") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "끊이") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "그러") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "쉬") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "없이") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "없") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
				}
			}
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "버리") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0187(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "중") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "하") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0188(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "뜻") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "의미") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "가치") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "진리") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "지식인") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "수행자") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "종교인") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[39] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0189(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "떨") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "떨리") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken == NULL)
					bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "가") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "를") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0190(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if ((strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0) &&
			pNode->pPrev->pHToken->subStem->strFeature[7] == '1')

			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "오늘") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "내일") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "이") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "그") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "저") == 0)

			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken == NULL)
					bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
			}
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable063(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "버리") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)

				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "아서") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);

			strcpy(pNode->pHToken->subStem->strResult, "잣");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0191(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}

	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1' ||
				pNode->pHToken->subEnding->strFeature[46] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0192(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true &&bIsFirstFind == false)
	{
		if ((pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[6] == '1') &&
			pNode->pPrev->pHToken->subStem->strFeature[25] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[49] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable054(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
			pNode->pPrev->pHToken->subStem->strFeature[8] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "착륙") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "출발") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "도착") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "오류") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "구매") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "반품") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "주문") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "취소") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "구입") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "입금") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "환불") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "배송") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || PrevNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' ||
						pNode->pNext->pHToken->subStem->strFeature[3] == '1' ||
						pNode->pNext->pHToken->subStem->strFeature[49] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable054(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "도") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "레") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "미") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "파") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "솔") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "라") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "음계") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0193(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "불") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
}

void CNAAmbiguity::Amb_Function_0194(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "를") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[14] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4v
}

void CNAAmbiguity::Amb_Function_0195(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
}

void CNAAmbiguity::Amb_Function_0196(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "서는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0197(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "무엇");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "무엇");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "야") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "다고") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "든지") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "라든지") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는다고") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ다고") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으라든지") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
			}
			if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 5);
					strcpy(pNode->pHToken->subStem->strResult, "무엇");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
				}
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[22] == '1' ||
						pNode->pNext->pHToken->subStem->strFeature[9] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
				}
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pNext->pHToken->subStem->strResult, "어때") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
				}
				if (bIsFirstFind == false)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 5);
					strcpy(pNode->pHToken->subStem->strResult, "무엇");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
				}
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "무엇");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
			}
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "무엇");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
}

void CNAAmbiguity::Amb_Function_0198(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true || NextNodestrResult(STEM_VALUE) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[12] == '1' ||
						pNode->pNext->pHToken->subStem->strFeature[6] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pNext->pHToken->subStem->strResult, "쓰다듬") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "가지") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "쇼핑") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "낳") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "입학") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "또래") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "자신") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "옷가지") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "옷") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "생모") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "앞") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "입장") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
			}
			if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0199(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "까지") == 0)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "오") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "내려오") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "찾") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "나오") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "흘러오") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "찾아오") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "데리") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "살") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken == NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
	}
	if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken == NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0200(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
				}

			}
			if (NextNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subEnding->strResult, "ㄴ") == 0 ||
					strcmp(pNode->pNext->pHToken->subEnding->strResult, "ㄹ") == 0 ||
					strcmp(pNode->pNext->pHToken->subEnding->strResult, "은") == 0 ||
					strcmp(pNode->pNext->pHToken->subEnding->strResult, "을") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 8);//2,4,5,8
		}
	}
	if (ThisNodestrResult(END_VALUE) == true)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 8);//2,4,5,8
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
}

void CNAAmbiguity::Amb_Function_0201(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㅇ");
			}
			else
			{
				bIsFind = false;
			}
		}
		else
		{
			bIsFind = false;
		}
	}

	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 18);//2,4,5,18
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 18);//2,4,5,18
	}
	if (bIsFind == true && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "젓");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[14] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
				}
			}
			if (NextNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subEnding->strResult, "ㄴ") == 0 ||
					strcmp(pNode->pNext->pHToken->subEnding->strResult, "ㄹ") == 0 ||
					strcmp(pNode->pNext->pHToken->subEnding->strResult, "은") == 0 ||
					strcmp(pNode->pNext->pHToken->subEnding->strResult, "을") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "역시") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "여기") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "오늘") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "자신") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 18);//2,4,5,18
}

void CNAAmbiguity::Amb_Function_0202(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0203(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(END_VALUE) == true && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if ((strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0) &&
			(strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "없") == 0))
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
			if (NextNodestrResult(STEM_VALUE) == true  && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0204(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "불") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "현황") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "설정") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "경로") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "처리") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken == NULL)
					bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0205(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
	}
	if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
	if (PrevNodestrResult(END_VALUE) == true && PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if ((strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은") == 0) &&
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "썰") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "치") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0206(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "어리") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "언제") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "올챙이") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "어라") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "자") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "게") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "보다") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable060(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
		{
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "보다") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable060(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "보다") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable060(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "은") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable060(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				{
					if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
					{
						if (pNode->pPrev->pHToken->subEnding->strFeature[4] == '1')
							bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
					}
					if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
					{
						if (strcmp(pNode->pNext->pHToken->subStem->strResult, "경비") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "수") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "수입") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "수효") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "액수") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "비용") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "양") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "용량") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "분량") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "돈") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "보수") == 0)
							bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
					}
					if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
					{
						if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "경비") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "수") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "수입") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "수효") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "액수") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "비용") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "양") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "용량") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "분량") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "돈") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "보수") == 0)
							bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
					}
					if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
					{
						if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
							bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
					}
					if (bIsFirstFind == false)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable073(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
					{
						if (pNode->pPrev->pHToken->subEnding->strFeature[4] == '1')
							bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
					}
					if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
					{
						if (strcmp(pNode->pNext->pHToken->subStem->strResult, "경비") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "수") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "수입") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "수효") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "액수") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "비용") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "양") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "용량") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "분량") == 0 ||
							strcmp(pNode->pNext->pHToken->subStem->strResult, "돈") == 0)
							bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
					}
					if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
					{
						if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "경비") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "수") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "수입") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "수효") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "액수") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "비용") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "양") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "용량") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "분량") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "돈") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "보수") == 0)
							bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
					}
					if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
					{
						if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
							bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
					}
					if (bIsFirstFind == false)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4	
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0207(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[14] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[43] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "은") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "을") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0208(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "불") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "당기") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "부싯돌") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "대통령") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "대통령") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "눈") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[39] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0209(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeFeature(STEM_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[39] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "정도") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0210(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "년") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "노력") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "애") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "려고") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
}

void CNAAmbiguity::Amb_Function_0211(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable064(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable064(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[25] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable059(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0212(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[12] == '1' &&
			pNode->pNext->pHToken->subStem->strFeature[25] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true || NextNodestrResult(STEM_VALUE) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[25] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable059(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true || ThisNodestrResult(STEM_VALUE) == true)
	{
		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "말");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27
			}
		}
		if (ThisNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subStem->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "말");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27
			}
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "고") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "말");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "해") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "년") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "개월") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "일") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "시간") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "초") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "분") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "달") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
			pNode->pNext->pHToken->subStem->strFeature[12] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "으로") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
	}
	if (ThisNodestrResult(END_VALUE) == true && PrevNodeFeature(STEM_VALUE) == true &&
		PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 &&
			pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
}

void CNAAmbiguity::Amb_Function_0213(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 7);
		strcpy(pNode->pHToken->subStem->strResult, "그러하");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9 

													   // Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKH 2004-01-12
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
	if (NextNodeNull(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
	{
		if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "그래") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "아니") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
}

void CNAAmbiguity::Amb_Function_0214(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	bool bIsFind1 = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[4] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 6, "ㄴ");
				bIsFind1 = IsChosungIFunction(pOriginalString, 6, "ㅡ");
			}
			else
			{
				bIsFind = false;
				bIsFind1 = false;
			}
		}
		else
		{
			bIsFind = false;
			bIsFind1 = false;
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1' ||
					pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "것");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

					CreateNewEndStr(pNode, "은");
					SaveEndBuffer("은");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[5] = '1';
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "걸");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "걸");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "걸");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "것");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

					CreateNewEndStr(pNode, "은");
					SaveEndBuffer("은");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[5] = '1';
				}
			}
			if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pPrev->pHToken->subStem->strFeature[8] == '0')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "것");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

					CreateNewEndStr(pNode, "은");
					SaveEndBuffer("은");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[5] = '1';
				}
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "걸");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
		}
	}
	if (bIsFind == true && bIsFind1 == true && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "걸");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "것");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "것");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "를") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "것");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

			CreateNewEndStr(pNode, "을");
			SaveEndBuffer("을");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "것");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "것");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[22] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "뉘") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	if (bIsFind == true && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "걸");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "것");
		bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
}

void CNAAmbiguity::Amb_Function_0215(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (ThisNodeNull(END_VALUE) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true || PrevNodestrResult(END_VALUE) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[14] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "김") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "이") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "박") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "전") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
}

void CNAAmbiguity::Amb_Function_0216(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[25] == '1' ||
					pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
					pNode->pNext->pHToken->subStem->strFeature[12] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable059(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable064(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "사장") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[18] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[6] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
			{
				if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true ||
					NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
				{
					if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
					{
						if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
							pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
							bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
					}
					if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
					{
						if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
							bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
					}
					if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
					{
						if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
							pNode->pNext->pHToken->subStem->strFeature[12] == '1')
							bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
					}
					if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
					{
						if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
							IsExistTable064(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
							bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
					}
					if (bIsFirstFind == false)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
			}
		}
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[26] == '1')
			{
				if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true ||
					NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
				{
					if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
					{
						if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
							pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
							bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
					}
					if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
					{
						if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
							bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
					}
					if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
					{
						if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
							pNode->pNext->pHToken->subStem->strFeature[12] == '1')
							bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
					}
					if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
					{
						if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
							IsExistTable064(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
							bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
					}
					if (bIsFirstFind == false)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			{
				if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true ||
					NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
				{
					if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
					{
						if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
							pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
							bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
					}
					if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
					{
						if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
							bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
					}
					if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
					{
						if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
							pNode->pNext->pHToken->subStem->strFeature[12] == '1')
							bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
					}
					if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
					{
						if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
							IsExistTable064(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
							bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
					}
					if (bIsFirstFind == false)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35
				}
			}
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35
}

void CNAAmbiguity::Amb_Function_0217(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0218(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[25] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable059(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
}

void CNAAmbiguity::Amb_Function_0219(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "부담") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "확장") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable074(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1'  &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "자") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "주먹") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "고집") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "힘") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "허풍") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "뚝심") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "콧대") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "팔자") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "배짱") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable060(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4	
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0220(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if ((strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0) &&
			pNode->pPrev->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "등") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0221(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "단위") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeNull(STEM_VALUE) == true || PrevNodestrResult(STEM_VALUE) == true)
	{
		if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "이거") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "이게") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "아이고") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "아이구") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if ((pNode->pNext->pHToken->subStem->strFeature[7] == '1' &&
			pNode->pNext->pHToken->subStem->strFeature[9] == '1') ||
			pNode->pNext->pHToken->subStem->strFeature[10] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0222(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㅇ");
			}
			else
			{
				bIsFind = false;
			}
		}
		else
		{
			bIsFind = false;
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFind == true && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "모으");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "몰");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "몰");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8  
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "몰");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "몰");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "씨") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "母") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "몰");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
}

void CNAAmbiguity::Amb_Function_0223(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "가") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "게") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "저");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

			CreateNewEndStr(pNode, "에");
			SaveEndBuffer("에");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[43] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "오") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[12] == '1' ||
					pNode->pNext->pHToken->subStem->strFeature[6] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
			}
		}
		if (PrevNodestrResult(END_VALUE) == true && PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "하") == 0 &&
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "현상") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "관청") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "명령") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "개정") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "규정") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "기능") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "저");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
}

void CNAAmbiguity::Amb_Function_0224(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0225(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable060(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
}

void CNAAmbiguity::Amb_Function_0226(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 7);//3,7
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "어") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "짓");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "책임") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "꽃") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "피") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "마땅") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "짓");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "짓");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
	}
	if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
		if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0227(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0228(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				pOriginalString = pNode->pHToken->subStem->strResult;
				InitBuffer();
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				pOriginalString = pNode->pHToken->subStem->strResult;
				InitBuffer();
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
					GetStartCountChar(pOriginalString, nTotalLen);
					MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
					nLen = strlen(m_pMinusTwoString);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

					nLen = strlen(m_pJongChar);
					CreateNewEndStr(pNode, m_pJongChar);
					SaveEndBuffer(m_pJongChar);
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
					GetStartCountChar(pOriginalString, nTotalLen);
					MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
					nLen = strlen(m_pMinusTwoString);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

					nLen = strlen(m_pJongChar);
					CreateNewEndStr(pNode, m_pJongChar);
					SaveEndBuffer(m_pJongChar);
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, ",") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetStartCountChar(pOriginalString, nTotalLen);
			MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
			nLen = strlen(m_pMinusTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

			nLen = strlen(m_pJongChar);
			CreateNewEndStr(pNode, m_pJongChar);
			SaveEndBuffer(m_pJongChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
		GetStartCountChar(pOriginalString, nTotalLen);
		MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
		nLen = strlen(m_pMinusTwoString);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

		nLen = strlen(m_pJongChar);
		CreateNewEndStr(pNode, m_pJongChar);
		SaveEndBuffer(m_pJongChar);
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0229(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "대하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "대하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "씨에") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ지에") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은지에") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는지에") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "인지에") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "들에") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는가에") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ가에") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ데") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는데") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은데") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "였다는데") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "었다는데") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "았다는데") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "았는지에") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "었는지에") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "였는지에") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어었는지에") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어었다는데") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "대하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "데") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "대하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 5);
					strcpy(pNode->pHToken->subStem->strResult, "대하");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 5);
					strcpy(pNode->pHToken->subStem->strResult, "대하");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "항목") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "사항") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "대하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0230(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodestrResult(END_VALUE) == true &&
		PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if ((strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0) &&
			pNode->pPrev->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "물건") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "상품") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "제품") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "물품") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "사");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "속") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "정상") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "밑") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "아래") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "위") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "너머") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "자체") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "중턱") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "쪽") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "꼭대기") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "구경") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' ||
				(pNode->pNext->pHToken->subStem->strFeature[4] == '1' && pNode->pNext->pHToken->subStem->strFeature[3] == '1'))
			{
				if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "사");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에서") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "살");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (bIsFirstFind == false)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "사");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
					{
						if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
							strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
						{
							CreateStemEndStr(pNode, CREATE_STEM, 3);
							strcpy(pNode->pHToken->subStem->strResult, "사");
							bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

							CreateNewEndStr(pNode, "ㄴ");
							SaveEndBuffer("ㄴ");
							pNode->pHToken->subEnding->strFeature[3] = '1';
							pNode->pHToken->subEnding->strFeature[1] = '1';
							pNode->pHToken->subEnding->strFeature[42] = '1';
						}
					}
					if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
					{
						if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
							strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에서") == 0)
						{
							CreateStemEndStr(pNode, CREATE_STEM, 3);
							strcpy(pNode->pHToken->subStem->strResult, "살");
							bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

							CreateNewEndStr(pNode, "ㄴ");
							SaveEndBuffer("ㄴ");
							pNode->pHToken->subEnding->strFeature[3] = '1';
							pNode->pHToken->subEnding->strFeature[1] = '1';
							pNode->pHToken->subEnding->strFeature[42] = '1';
						}
					}
					if (bIsFirstFind == false)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "사");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "싸") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "비싸") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "사");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "사");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에서") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "살");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (bIsFirstFind == false)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "살");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "싸") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "비싸") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "사");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "사");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에서") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "살");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (bIsFirstFind == false)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "살");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0231(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (ThisNodeFeature(END_VALUE) && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subStem->strResult, "볼") == 0 &&
				strcmp(pNode->pNext->pHToken->subStem->strResult, "곤봉") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);

				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);

				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "만하") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "듯하") == 0)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);

				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "고") == 0)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);

				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0232(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "아") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[14] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
				if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "아들") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
				}
			}
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "따");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄹ");
			SaveEndBuffer("ㄹ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "따");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄹ");
		SaveEndBuffer("ㄹ");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0233(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 49, 74);//2,4,16,49,74
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[16] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[17] == '0' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '0')
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 49, 74);//2,4,16,49,74
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[12] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[25] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 49, 74);//2,4,16,49,74
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "지원") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "구입") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 49, 74);//2,4,16,49,74
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "싸");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");

				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "싸");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");

				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true || PrevNodestrResult(STEM_VALUE) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[50] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "싸");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "오줌") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "똥") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "짐") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "싸");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");

				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 49, 74);//2,4,16,49,74
}

void CNAAmbiguity::Amb_Function_0234(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (IsExistTable(END_VALUE, THIS_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable001(pNode->pHToken->subEnding->strResult, GET_END) == true)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);

			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			AddTwoStr(m_pChoJungChar, m_pJongChar);
			nLen = strlen(m_pAddTwoString);
			CreateNewEndStr(pNode, m_pAddTwoString);
			SaveEndBuffer(m_pAddTwoString);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable051(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				AddTwoStr(m_pChoJungChar, m_pJongChar);
				nLen = strlen(m_pAddTwoString);
				CreateNewEndStr(pNode, m_pAddTwoString);
				SaveEndBuffer(m_pAddTwoString);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				AddTwoStr(m_pChoJungChar, m_pJongChar);
				nLen = strlen(m_pAddTwoString);
				CreateNewEndStr(pNode, m_pAddTwoString);
				SaveEndBuffer(m_pAddTwoString);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				AddTwoStr(m_pChoJungChar, m_pJongChar);
				nLen = strlen(m_pAddTwoString);
				CreateNewEndStr(pNode, m_pAddTwoString);
				SaveEndBuffer(m_pAddTwoString);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[4] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				AddTwoStr(m_pChoJungChar, m_pJongChar);
				nLen = strlen(m_pAddTwoString);
				CreateNewEndStr(pNode, m_pAddTwoString);
				SaveEndBuffer(m_pAddTwoString);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
	}
	if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "아") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
}

void CNAAmbiguity::Amb_Function_0235(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (IsExistTable(END_VALUE, THIS_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable001(pNode->pHToken->subEnding->strResult, GET_END) == true)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);

			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			AddTwoStr(m_pChoJungChar, m_pJongChar);
			nLen = strlen(m_pAddTwoString);
			CreateNewEndStr(pNode, m_pAddTwoString);
			SaveEndBuffer(m_pAddTwoString);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable052(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
					GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);

					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					AddTwoStr(m_pChoJungChar, m_pJongChar);
					nLen = strlen(m_pAddTwoString);
					CreateNewEndStr(pNode, m_pAddTwoString);
					SaveEndBuffer(m_pAddTwoString);
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
					pNode->pHToken->subEnding->strFeature[26] = '1';
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					{
						InitBuffer();
						pOriginalString = pNode->pHToken->subStem->strResult;
						nTotalLen = strlen(pOriginalString);
						GetOneChar(pOriginalString, nTotalLen, nTotalLen);
						GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
						GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
						MoveLeftWordCount(pOriginalString, nTotalLen);
						GetStartCountChar(pOriginalString, nTotalLen);

						nLen = strlen(m_pStartCountChar);
						CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
						strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

						AddTwoStr(m_pChoJungChar, m_pJongChar);
						nLen = strlen(m_pAddTwoString);
						CreateNewEndStr(pNode, m_pAddTwoString);
						SaveEndBuffer(m_pAddTwoString);
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
						pNode->pHToken->subEnding->strFeature[26] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						InitBuffer();
						pOriginalString = pNode->pHToken->subStem->strResult;
						nTotalLen = strlen(pOriginalString);
						GetOneChar(pOriginalString, nTotalLen, nTotalLen);
						GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
						GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
						MoveLeftWordCount(pOriginalString, nTotalLen);
						GetStartCountChar(pOriginalString, nTotalLen);

						nLen = strlen(m_pStartCountChar);
						CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
						strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

						AddTwoStr(m_pChoJungChar, m_pJongChar);
						nLen = strlen(m_pAddTwoString);
						CreateNewEndStr(pNode, m_pAddTwoString);
						SaveEndBuffer(m_pAddTwoString);
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
						pNode->pHToken->subEnding->strFeature[26] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
		}
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
}

void CNAAmbiguity::Amb_Function_0236(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (IsExistTable(END_VALUE, THIS_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable001(pNode->pHToken->subEnding->strResult, GET_END) == true)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);

			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			AddTwoStr(m_pChoJungChar, m_pJongChar);
			nLen = strlen(m_pAddTwoString);
			CreateNewEndStr(pNode, m_pAddTwoString);
			SaveEndBuffer(m_pAddTwoString);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "취미") == 0)
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
					GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);

					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					AddTwoStr(m_pChoJungChar, m_pJongChar);
					nLen = strlen(m_pAddTwoString);
					CreateNewEndStr(pNode, m_pAddTwoString);
					SaveEndBuffer(m_pAddTwoString);
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
					pNode->pHToken->subEnding->strFeature[26] = '1';
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if ((pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1'))
					{
						InitBuffer();
						pOriginalString = pNode->pHToken->subStem->strResult;
						nTotalLen = strlen(pOriginalString);
						GetOneChar(pOriginalString, nTotalLen, nTotalLen);
						GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
						GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
						MoveLeftWordCount(pOriginalString, nTotalLen);
						GetStartCountChar(pOriginalString, nTotalLen);

						nLen = strlen(m_pStartCountChar);
						CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
						strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

						AddTwoStr(m_pChoJungChar, m_pJongChar);
						nLen = strlen(m_pAddTwoString);
						CreateNewEndStr(pNode, m_pAddTwoString);
						SaveEndBuffer(m_pAddTwoString);
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
						pNode->pHToken->subEnding->strFeature[26] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						InitBuffer();
						pOriginalString = pNode->pHToken->subStem->strResult;
						nTotalLen = strlen(pOriginalString);
						GetOneChar(pOriginalString, nTotalLen, nTotalLen);
						GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
						GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
						MoveLeftWordCount(pOriginalString, nTotalLen);
						GetStartCountChar(pOriginalString, nTotalLen);

						nLen = strlen(m_pStartCountChar);
						CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
						strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

						AddTwoStr(m_pChoJungChar, m_pJongChar);
						nLen = strlen(m_pAddTwoString);
						CreateNewEndStr(pNode, m_pAddTwoString);
						SaveEndBuffer(m_pAddTwoString);
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
						pNode->pHToken->subEnding->strFeature[26] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
}

void CNAAmbiguity::Amb_Function_0237(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "골");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "이ㄴ");
				SaveEndBuffer("이ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "골");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "이ㄴ");
				SaveEndBuffer("이ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
	}
	if (IsExistTable(END_VALUE, THIS_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable001(pNode->pHToken->subEnding->strResult, GET_END) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "골");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "이ㄴ");
			SaveEndBuffer("이ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodestrResult(END_VALUE) && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "골");
						bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

						CreateNewEndStr(pNode, "이ㄴ");
						SaveEndBuffer("이ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
						pNode->pHToken->subEnding->strFeature[26] = '1';
					}
				}
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "골");
						bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

						CreateNewEndStr(pNode, "이ㄴ");
						SaveEndBuffer("이ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
						pNode->pHToken->subEnding->strFeature[26] = '1';
					}
				}
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0238(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	int nLen = 0;
	char* pOriginalString = NULL;

	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(STEM_VALUE) == true && NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subStem->strResult, "화가") == 0 &&
			pNode->pNext->pHToken->subStem->strFeature[14] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(STEM_VALUE) == true && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subStem->strResult, "화가") == 0 &&
			strcmp(pNode->pNext->pHToken->subStem->strResult, "지망생") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->strSource;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);
		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		nLen = strlen(m_pOneChar);
		CreateNewEndStr(pNode, m_pOneChar);
		SaveEndBuffer(m_pOneChar);
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[4] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0239(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	int nLen = 0;
	char* pOriginalString = NULL;

	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable062(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable061(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->strSource;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[8] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->strSource;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);
		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, m_pOneChar);
		SaveEndBuffer(m_pOneChar);
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[8] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0240(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

				CreateNewEndStr(pNode, "기");
				SaveEndBuffer("기");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

				CreateNewEndStr(pNode, "기");
				SaveEndBuffer("기");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

				CreateNewEndStr(pNode, "기");
				SaveEndBuffer("기");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0241(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1' &&
			(strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "없") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "많") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "한두") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "태반") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "여러") == 0))
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "적");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "적");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0242(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "상승") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "급등") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "조사") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "기준") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "비교") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "등") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "총액") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true || PrevNodestrResult(STEM_VALUE) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[58] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "지");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

				CreateNewEndStr(pNode, "가");
				SaveEndBuffer("가");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "얼마") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "얼마나") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "오래") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "언제") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "금방") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "벌써") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "겨우") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "아직") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "한참") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "지");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

				CreateNewEndStr(pNode, "가");
				SaveEndBuffer("가");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0)
		{
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "지");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

					CreateNewEndStr(pNode, "가");
					SaveEndBuffer("가");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "지");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

				CreateNewEndStr(pNode, "가");
				SaveEndBuffer("가");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "지");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

		CreateNewEndStr(pNode, "가");
		SaveEndBuffer("가");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0243(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[58] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[12] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);

				strcpy(pNode->pHToken->subStem->strResult, "지");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "얼마") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "얼마나") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "오래") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "모르") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "언제") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "금방") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "벌써") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "겨우") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "아직") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "한참") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "지");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0)
		{
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "지");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "하기사") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "뭐") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "지");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0244(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "수");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "가");
				SaveEndBuffer("가");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "수");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "가");
				SaveEndBuffer("가");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "죽") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "수");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "가");
			SaveEndBuffer("가");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "수");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

			CreateNewEndStr(pNode, "가");
			SaveEndBuffer("가");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "없") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "수");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

			CreateNewEndStr(pNode, "가");
			SaveEndBuffer("가");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "수");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "가");
			SaveEndBuffer("가");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "수");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "가");
		SaveEndBuffer("가");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[4] = '1';
		pNode->pHToken->subEnding->strFeature[25] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0245(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "수");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "수");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[14] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[14] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "없") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "수");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "수");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' ||
			pNode->pNext->pHToken->subStem->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "수");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "수");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0246(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
			{
				if (PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "내");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					CreateNewEndStr(pNode, "의");
					SaveEndBuffer("의");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[7] = '1';
				}
				if (bIsFirstFind == false)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "내");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					CreateNewEndStr(pNode, "의");
					SaveEndBuffer("의");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[7] = '1';
				}
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "차림") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "바람") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "브랜드") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "내");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0247(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "자");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "가");
				SaveEndBuffer("가");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "자");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "가");
				SaveEndBuffer("가");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(END_VALUE) == true && PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if ((strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0) &&
			pNode->pPrev->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "자");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

			CreateNewEndStr(pNode, "가");
			SaveEndBuffer("가");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "이") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "그") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "저") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "어떤") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "자");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

			CreateNewEndStr(pNode, "가");
			SaveEndBuffer("가");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "자");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4;

			CreateNewEndStr(pNode, "가");
			SaveEndBuffer("가");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "자");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "가");
			SaveEndBuffer("가");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "자");
		bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

		CreateNewEndStr(pNode, "가");
		SaveEndBuffer("가");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0248(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "편");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "편");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable053(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "편");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "편");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "시설") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "편");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0249(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodeNull(END_VALUE) == true  && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken == NULL)
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);
					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					nLen = strlen(m_pOneChar);
					CreateNewEndStr(pNode, m_pOneChar);
					SaveEndBuffer(m_pOneChar);
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[4] = '1';
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->strSource;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);
		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		nLen = strlen(m_pOneChar);
		CreateNewEndStr(pNode, m_pOneChar);
		SaveEndBuffer(m_pOneChar);
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[4] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0250(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (PrevNodeFeature(STEM_VALUE) == true  && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if ((pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[6] == '1') &&
			pNode->pPrev->pHToken->subStem->strFeature[25] == '0')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);

			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true  && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (ThisNodestrResult(STEM_VALUE) == true &&
		PrevNodeFeature(STEM_VALUE) == true &&
		PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subStem->strResult, "대의") == 0 &&
			pNode->pPrev->pHToken->subStem->strFeature[25] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0251(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true  && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "명");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true  && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "명");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "이전") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "변경") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "신탁") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "신고") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "도용") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "공동") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "등기") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "타인") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "개인") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "명");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0252(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (IsExistTable(END_VALUE, THIS_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable001(pNode->pHToken->subEnding->strResult, GET_END) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "중");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

			CreateNewEndStr(pNode, "이ㄴ");
			SaveEndBuffer("이ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "계급") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "출신") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "집안") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "신분") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "이상") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "상민") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "평민") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "중");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

			CreateNewEndStr(pNode, "이ㄴ");
			SaveEndBuffer("이ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0253(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true  && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				AddTwoStr(m_pChoJungChar, m_pJongChar);
				nLen = strlen(m_pAddTwoString);
				CreateNewEndStr(pNode, m_pAddTwoString);
				SaveEndBuffer(m_pAddTwoString);

				if (ThisNodeNull(END_VALUE) == true)
				{
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
					pNode->pHToken->subEnding->strFeature[26] = '1';
				}
				else
				{
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[26] = '1';
				}
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				AddTwoStr(m_pChoJungChar, m_pJongChar);
				nLen = strlen(m_pAddTwoString);
				CreateNewEndStr(pNode, m_pAddTwoString);
				SaveEndBuffer(m_pAddTwoString);

				if (ThisNodeNull(END_VALUE) == true)
				{
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
					pNode->pHToken->subEnding->strFeature[26] = '1';
				}
				else
				{
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[26] = '1';
				}
			}
		}
	}
	if (IsExistTable(END_VALUE, THIS_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable001(pNode->pHToken->subEnding->strResult, GET_END) == true)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);

			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			AddTwoStr(m_pChoJungChar, m_pJongChar);
			nLen = strlen(m_pAddTwoString);
			CreateNewEndStr(pNode, m_pAddTwoString);
			SaveEndBuffer(m_pAddTwoString);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "등") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
					GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);

					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					AddTwoStr(m_pChoJungChar, m_pJongChar);
					nLen = strlen(m_pAddTwoString);
					CreateNewEndStr(pNode, m_pAddTwoString);
					SaveEndBuffer(m_pAddTwoString);
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
					pNode->pHToken->subEnding->strFeature[26] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
					GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);

					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					AddTwoStr(m_pChoJungChar, m_pJongChar);
					nLen = strlen(m_pAddTwoString);
					CreateNewEndStr(pNode, m_pAddTwoString);
					SaveEndBuffer(m_pAddTwoString);
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
					pNode->pHToken->subEnding->strFeature[26] = '1';
				}
			}
		}
		if (ThisNodestrResult(STEM_VALUE) == true && NextNodeFeature(STEM_VALUE) == true &&
			bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subStem->strResult, "달인") == 0 &&
				pNode->pNext->pHToken->subStem->strFeature[12] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				AddTwoStr(m_pChoJungChar, m_pJongChar);
				nLen = strlen(m_pAddTwoString);
				CreateNewEndStr(pNode, m_pAddTwoString);
				SaveEndBuffer(m_pAddTwoString);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0254(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true  && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				AddTwoStr(m_pChoJungChar, m_pJongChar);
				nLen = strlen(m_pAddTwoString);
				CreateNewEndStr(pNode, m_pAddTwoString);
				SaveEndBuffer(m_pAddTwoString);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				AddTwoStr(m_pChoJungChar, m_pJongChar);
				nLen = strlen(m_pAddTwoString);
				CreateNewEndStr(pNode, m_pAddTwoString);
				SaveEndBuffer(m_pAddTwoString);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				AddTwoStr(m_pChoJungChar, m_pJongChar);
				nLen = strlen(m_pAddTwoString);
				CreateNewEndStr(pNode, m_pAddTwoString);
				SaveEndBuffer(m_pAddTwoString);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetStartCountChar(pOriginalString, nTotalLen);
			MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);

			nLen = strlen(m_pMinusTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 29);//2,7,8,29

			nLen = strlen(m_pJongChar);
			CreateNewEndStr(pNode, m_pJongChar);
			SaveEndBuffer(m_pJongChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetStartCountChar(pOriginalString, nTotalLen);
			MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);

			nLen = strlen(m_pMinusTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 29);//2,7,8,29

			nLen = strlen(m_pJongChar);
			CreateNewEndStr(pNode, m_pJongChar);
			SaveEndBuffer(m_pJongChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
		GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);

		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

		AddTwoStr(m_pChoJungChar, m_pJongChar);
		nLen = strlen(m_pAddTwoString);
		CreateNewEndStr(pNode, m_pAddTwoString);
		SaveEndBuffer(m_pAddTwoString);
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
		pNode->pHToken->subEnding->strFeature[26] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0255(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);

			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
			AddTwoStr(m_pChoJungChar, m_pJongChar);
			nLen = strlen(m_pAddTwoString);
			CreateNewEndStr(pNode, m_pAddTwoString);
			SaveEndBuffer(m_pAddTwoString);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			AddTwoStr(m_pChoJungChar, m_pJongChar);
			nLen = strlen(m_pAddTwoString);
			CreateNewEndStr(pNode, m_pAddTwoString);
			SaveEndBuffer(m_pAddTwoString);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetStartCountChar(pOriginalString, nTotalLen);
			MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
			nLen = strlen(m_pMinusTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			nLen = strlen(m_pJongChar);
			CreateNewEndStr(pNode, m_pJongChar);
			SaveEndBuffer(m_pJongChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetStartCountChar(pOriginalString, nTotalLen);
			MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
			nLen = strlen(m_pMinusTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			nLen = strlen(m_pJongChar);
			CreateNewEndStr(pNode, m_pJongChar);
			SaveEndBuffer(m_pJongChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하늘") == 0)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable056(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "혼영") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "활짝") == 0)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				AddTwoStr(m_pChoJungChar, m_pJongChar);
				nLen = strlen(m_pAddTwoString);
				CreateNewEndStr(pNode, m_pAddTwoString);
				SaveEndBuffer(m_pAddTwoString);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable056(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				AddTwoStr(m_pChoJungChar, m_pJongChar);
				nLen = strlen(m_pAddTwoString);
				CreateNewEndStr(pNode, m_pAddTwoString);
				SaveEndBuffer(m_pAddTwoString);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0256(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);
		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

		CreateNewEndStr(pNode, "세");
		SaveEndBuffer("세");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "세");
			SaveEndBuffer("세");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "세");
			SaveEndBuffer("세");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0257(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;
	InitBuffer();

	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);

				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				InitBuffer();
				pOriginalString = pNode->pHToken->strSource;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);

				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodestrResult(END_VALUE) == true && ThisNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "다고") == 0 ||
				strcmp(pNode->pHToken->subStem->strResult, "보고") == 0)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				(pNode->pNext->pHToken->subStem->strFeature[5] == '0' &&
					pNode->pNext->pHToken->subStem->strFeature[6] == '0' &&
					pNode->pNext->pHToken->subStem->strFeature[14] == '0'))
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "한") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "할") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "함") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "해") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "해서") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "해주") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "되") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0258(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "밀");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "고");
				SaveEndBuffer("고");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "밀");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "고");
				SaveEndBuffer("고");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "밀");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "고");
				SaveEndBuffer("고");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "가") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "나가") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "말") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "보") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "빠지") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "오") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "밀리") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "밀");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "고");
				SaveEndBuffer("고");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0259(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에서") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "해") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "되") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "게");
				SaveEndBuffer("게");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "게");
				SaveEndBuffer("게");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0260(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "깊") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "없") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "능력") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeNull(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
		{
			if (NextNodeNull(STEM_VALUE) == true  && bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "사");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "려");
				SaveEndBuffer("려");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
			if (NextNodestrResult(STEM_VALUE) == true  && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "사");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "려");
					SaveEndBuffer("려");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "사리");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "사");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "려");
				SaveEndBuffer("려");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "면") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "사");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "려");
				SaveEndBuffer("려");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "사");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "려");
						SaveEndBuffer("려");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "사");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "려");
						SaveEndBuffer("려");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
					}
				}
			}
			if (PrevNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "사");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "려");
					SaveEndBuffer("려");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "사");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "려");
		SaveEndBuffer("려");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0261(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true || ThisNodeNull(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);

			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);

			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					{
						InitBuffer();
						pOriginalString = pNode->pHToken->subStem->strResult;
						nTotalLen = strlen(pOriginalString);
						GetOneChar(pOriginalString, nTotalLen, nTotalLen);
						MoveLeftWordCount(pOriginalString, nTotalLen);
						GetStartCountChar(pOriginalString, nTotalLen);

						nLen = strlen(m_pStartCountChar);
						CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
						strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						nLen = strlen(m_pOneChar);
						CreateNewEndStr(pNode, m_pOneChar);
						SaveEndBuffer(m_pOneChar);
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						InitBuffer();
						pOriginalString = pNode->pHToken->subStem->strResult;
						nTotalLen = strlen(pOriginalString);
						GetOneChar(pOriginalString, nTotalLen, nTotalLen);
						MoveLeftWordCount(pOriginalString, nTotalLen);
						GetStartCountChar(pOriginalString, nTotalLen);

						nLen = strlen(m_pStartCountChar);
						CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
						strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						nLen = strlen(m_pOneChar);
						CreateNewEndStr(pNode, m_pOneChar);
						SaveEndBuffer(m_pOneChar);
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);

		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		nLen = strlen(m_pOneChar);
		CreateNewEndStr(pNode, m_pOneChar);
		SaveEndBuffer(m_pOneChar);
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0262(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "아니") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "안") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true || NextNodeNull(STEM_VALUE) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if ((pNode->pNext->pHToken->subStem->strFeature[7] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[39] == '1') &&
				pNode->pNext->pHToken->subStem->strFeature[27] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "말") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "말라") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "마") == 0)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);
		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		nLen = strlen(m_pOneChar);
		CreateNewEndStr(pNode, m_pOneChar);
		SaveEndBuffer(m_pOneChar);
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0263(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㅂ");
			SaveEndBuffer("ㅂ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0264(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "니") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);

			AddTwoStr(m_pStartCountChar, "하");
			nLen = strlen(m_pAddTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pAddTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);

			AddTwoStr(m_pStartCountChar, "하");
			nLen = strlen(m_pAddTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pAddTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				AddTwoStr(m_pStartCountChar, "하");
				nLen = strlen(m_pAddTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pAddTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "또는") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "및") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);

			AddTwoStr(m_pStartCountChar, "하");
			nLen = strlen(m_pAddTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pAddTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "한") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "할") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "함") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "해") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "해서") == 0)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);

			AddTwoStr(m_pStartCountChar, "하");
			nLen = strlen(m_pAddTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pAddTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0265(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "자고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "다고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ다고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "겠다고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "었다고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "았다고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이라고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어었다고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "쯤") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "인가") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "어서");
			SaveEndBuffer("어서");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "어서");
				SaveEndBuffer("어서");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "어서");
			SaveEndBuffer("어서");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "하");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "어서");
		SaveEndBuffer("어서");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0266(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[14] == '1' &&
			pNode->pPrev->pHToken->subStem->strFeature[18] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "달");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

			CreateNewEndStr(pNode, "라");
			SaveEndBuffer("라");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[38] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[7] == '1' &&
			(strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "여") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "야") == 0))
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "달");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

			CreateNewEndStr(pNode, "라");
			SaveEndBuffer("라");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[7] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "달");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

			CreateNewEndStr(pNode, "라");
			SaveEndBuffer("라");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "다르");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

			CreateNewEndStr(pNode, "아");
			SaveEndBuffer("아");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "와") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "과") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "랑") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이랑") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "하고") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "다르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "아");
				SaveEndBuffer("아");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "달");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

			CreateNewEndStr(pNode, "라");
			SaveEndBuffer("라");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "다르");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

		CreateNewEndStr(pNode, "아");
		SaveEndBuffer("아");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0267(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "알") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "모르") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "ㄴ지");
				SaveEndBuffer("ㄴ지");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[10] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "ㄴ지");
				SaveEndBuffer("ㄴ지");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "ㄴ지");
				SaveEndBuffer("ㄴ지");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
			pNode->pNext->pHToken->subStem->strFeature[5] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "가");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

		CreateNewEndStr(pNode, "ㄴ지");
		SaveEndBuffer("ㄴ지");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0268(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)

				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true || PrevNodestrResult(STEM_VALUE) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "중") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "자");
			SaveEndBuffer("자");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "자");
			SaveEndBuffer("자");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "오");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

		CreateNewEndStr(pNode, "자");
		SaveEndBuffer("자");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0269(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);

			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "자");
			SaveEndBuffer("자");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);

			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "자");
			SaveEndBuffer("자");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
		if (PrevNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "자");
				SaveEndBuffer("자");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(STEM_VALUE) == true && PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subStem->strResult, "하자") == 0 &&
				pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "자");
				SaveEndBuffer("자");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
		{
			if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "자");
				SaveEndBuffer("자");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
			if (PrevNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0)
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);

					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "자");
					SaveEndBuffer("자");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (ThisNodestrResult(STEM_VALUE) == true && PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pHToken->subStem->strResult, "하자") == 0 &&
					pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);

					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "자");
					SaveEndBuffer("자");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					{
						InitBuffer();
						pOriginalString = pNode->pHToken->subStem->strResult;
						nTotalLen = strlen(pOriginalString);
						GetOneChar(pOriginalString, nTotalLen, nTotalLen);
						MoveLeftWordCount(pOriginalString, nTotalLen);
						GetStartCountChar(pOriginalString, nTotalLen);

						nLen = strlen(m_pStartCountChar);
						CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
						strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "자");
						SaveEndBuffer("자");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						InitBuffer();
						pOriginalString = pNode->pHToken->subStem->strResult;
						nTotalLen = strlen(pOriginalString);
						GetOneChar(pOriginalString, nTotalLen, nTotalLen);
						MoveLeftWordCount(pOriginalString, nTotalLen);
						GetStartCountChar(pOriginalString, nTotalLen);

						nLen = strlen(m_pStartCountChar);
						CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
						strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "자");
						SaveEndBuffer("자");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subStem->strResult, "하자") == 0)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);

			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "자");
			SaveEndBuffer("자");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0270(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true || ThisNodeFeature(END_VALUE) == true)
	{
		if (ThisNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true || ThisNodeFeature(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);

				strcpy(pNode->pHToken->subStem->strResult, "남");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "아");
				SaveEndBuffer("아");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);

				strcpy(pNode->pHToken->subStem->strResult, "남");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "아");
				SaveEndBuffer("아");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);

				strcpy(pNode->pHToken->subStem->strResult, "남");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "아");
				SaveEndBuffer("아");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);

				strcpy(pNode->pHToken->subStem->strResult, "남");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8


				CreateNewEndStr(pNode, "아");
				SaveEndBuffer("아");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0271(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true || ThisNodeFeature(END_VALUE) == true)
	{
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "주");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "주");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKh 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeNull(STEM_VALUE) == true || PrevNodestrResult(STEM_VALUE) == true)
		{
			if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "목적어") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "보어") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "서술어") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "술어") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "또는") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "목적어") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "보어") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "서술어") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "술어") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "또는") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "다음") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "뒤") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "주");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "주");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

													   // Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKH 2004-01-12
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0272(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "서요") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "불");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "면");
			SaveEndBuffer("면");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "바람") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "휘파람") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "피리") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "호루라기") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "불");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "면");
				SaveEndBuffer("면");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if ((PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true) || NextNodestrResult(STEM_VALUE) == true)
		{
			if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pPrev->pHToken->subStem->strResult == NULL)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "등") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "불");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "면");
			SaveEndBuffer("면");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "불");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "면");
		SaveEndBuffer("면");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0273(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "서요") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "가");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "면");
			SaveEndBuffer("면");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "같") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "사이") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "가");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "면");
			SaveEndBuffer("면");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "가");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

		CreateNewEndStr(pNode, "면");
		SaveEndBuffer("면");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0274(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[14] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "주재") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "소재") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "필") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "국제") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "시립음악원") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "소년") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "소년합창단") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "오스트리아") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "방") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "자리") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "칸") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "구석") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "쟁반") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "술잔") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "병") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "비");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "빌");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "비");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "정조") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "아") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "좌석") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "자리") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "방") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "텅") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "비");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "빌");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0275(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[5] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[14] == '0')
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[17] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);

					strcpy(pNode->pHToken->subStem->strResult, "졸");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 74);//2,4,74
}

void CNAAmbiguity::Amb_Function_0276(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
	}
	if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "가");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "야");
			SaveEndBuffer("야");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "유품") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "문물") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "출토품") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "금동관") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "가");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "야");
			SaveEndBuffer("야");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
}

void CNAAmbiguity::Amb_Function_0277(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 29);//2,7,8,29
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);
		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		nLen = strlen(m_pOneChar);
		CreateNewEndStr(pNode, m_pOneChar);
		SaveEndBuffer(m_pOneChar);
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[4] = '1';
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 29);//2,7,8,29
}

void CNAAmbiguity::Amb_Function_0278(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 3, 4, 25);//2,3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 3, 4, 25);//2,3,4,25
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);

			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);

			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			nLen = strlen(m_pOneChar);

			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);

			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);

			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4			

			nLen = strlen(m_pOneChar);

			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 29);//2,7,8,29
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);
		nLen = strlen(m_pStartCountChar);

		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);

		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		nLen = strlen(m_pOneChar);

		CreateNewEndStr(pNode, m_pOneChar);
		SaveEndBuffer(m_pOneChar);
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[4] = '1';
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 29);//2,7,8,29
}

void CNAAmbiguity::Amb_Function_0279(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

													   // Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKH 2004-01-12
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "나") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "난") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "나서") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "날") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "흐르") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "내");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "가");
			SaveEndBuffer("가");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
		}
	}
	if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "나");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

		CreateNewEndStr(pNode, "가");
		SaveEndBuffer("가");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[4] = '1';
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "나");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

		CreateNewEndStr(pNode, "가");
		SaveEndBuffer("가");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[4] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0280(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "단") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "반드시") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "도록") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "기로") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "까지") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으려") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "려") == 0)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "많") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "미") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "중") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "대표") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "전") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "관계자") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,4
		}
		if (PrevNodestrResult(END_VALUE) == true && PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 &&
				pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4
		}
		if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pPrev->pHToken->subStem->strFeature[3] == '1' &&
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "지") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if ((pNode->pNext->pHToken->subStem->strFeature[3] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[25] == '1')/*||
																		  pNode->pNext->pHToken->subStem->strFeature[58] == '1' */)
					bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable074(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "녀석") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "놈") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "쪽") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "주의") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "시인") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "단위") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "보퉁이") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "팀") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
		if (NextNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subEnding->strResult, "당") == 0 ||
				strcmp(pNode->pNext->pHToken->subEnding->strResult, "두") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
		}
		if (PrevNodeFeature(END_VALUE) == true && NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pPrev->pHToken->subStem->strFeature[8] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,81' ;

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodestrResult(STEM_VALUE) == true && NextNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "함께") == 0 &&
				pNode->pNext->pHToken->subEnding->strFeature[42] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1' &&
				pNode->pPrev->pHToken->subStem->strFeature[58] == '0')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
					GetStartCountChar(pOriginalString, nTotalLen);
					MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
					nLen = strlen(m_pMinusTwoString);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

					nLen = strlen(m_pJongChar);
					CreateNewEndStr(pNode, m_pJongChar);
					SaveEndBuffer(m_pJongChar);
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
					GetStartCountChar(pOriginalString, nTotalLen);
					MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
					nLen = strlen(m_pMinusTwoString);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

					nLen = strlen(m_pJongChar);
					CreateNewEndStr(pNode, m_pJongChar);
					SaveEndBuffer(m_pJongChar);
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "결과") == 0)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[16] == '1' &&
				pNode->pPrev->pHToken->subEnding->strResult == NULL)
				bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[S_T074] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
		}
		if (bIsFirstFind == false)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetStartCountChar(pOriginalString, nTotalLen);
			MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
			nLen = strlen(m_pMinusTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

			nLen = strlen(m_pJongChar);
			CreateNewEndStr(pNode, m_pJongChar);
			SaveEndBuffer(m_pJongChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[7] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetStartCountChar(pOriginalString, nTotalLen);
			MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
			nLen = strlen(m_pMinusTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

			nLen = strlen(m_pJongChar);
			CreateNewEndStr(pNode, m_pJongChar);
			SaveEndBuffer(m_pJongChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
		GetStartCountChar(pOriginalString, nTotalLen);
		MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
		nLen = strlen(m_pMinusTwoString);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

		nLen = strlen(m_pJongChar);
		CreateNewEndStr(pNode, m_pJongChar);
		SaveEndBuffer(m_pJongChar);
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0281(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "수");
				bIsFirstFind = SaveStemFeature(pNode, S_T144, 3, 4);//2,3,4

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "새") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "어리") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, S_T144, 3, 4);//3,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
			pNode->pPrev->pHToken->subEnding->strResult == NULL)
			bIsFirstFind = SaveStemFeature(pNode, S_T144, 3, 4);//3,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0282(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || PrevNodestrResult(STEM_VALUE) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25, 58);//3,4,25,58
		}
		if (PrevNodestrResult(STEM_VALUE) == true && PrevNodeFeature(STEM_VALUE) == false && bIsFirstFind == false)
		{
			if ((strcmp(pNode->pPrev->pHToken->subStem->strResult, "한") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "두") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "두세") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "세") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "네") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "다섯") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "백") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "여러") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "몇몇") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "몇") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "육") == 0) &&
				pNode->pPrev->pHToken->subStem->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25, 58);//3,4,25,58
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (ThisNodestrResult(END_VALUE) == true && NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "요") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

																   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "야") == 0)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "한") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "할") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "함") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "해") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "하나") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "해주") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "해서") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "하");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

																		   // Edited by KKH 2004-01-12
					if ((pNode->pHToken->subEnding->strFeature != NULL &&
						pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
						pNode->pHToken->subEnding->strFeature == NULL)
					{
						CreateNewEndStr(pNode, "어");
						SaveEndBuffer("어");
					}
					// Edited by KKH 2004-01-12
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "어떻게") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "하");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

																		   // Edited by KKH 2004-01-12
					if ((pNode->pHToken->subEnding->strFeature != NULL &&
						pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
						pNode->pHToken->subEnding->strFeature == NULL)
					{
						CreateNewEndStr(pNode, "어");
						SaveEndBuffer("어");
					}
					// Edited by KKH 2004-01-12
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "하");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

																		   // Edited by KKH 2004-01-12
					if ((pNode->pHToken->subEnding->strFeature != NULL &&
						pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
						pNode->pHToken->subEnding->strFeature == NULL)
					{
						CreateNewEndStr(pNode, "어");
						SaveEndBuffer("어");
					}
					// Edited by KKH 2004-01-12
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
		}
	}
	if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if ((pNode->pHToken->subEnding->strFeature[2] == '1' ||
			pNode->pHToken->subEnding->strFeature[22] == '1') &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			//strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

																   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

																   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

																   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
				pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

																	   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "뜨") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "지") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "떨어지") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "저물") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
		}
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pPrev->pHToken->subStem->strFeature[8] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

																	   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "기로") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "자고") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "게") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "도록") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

																	   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

																	   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

																	   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[39] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

																	   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

																   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[25] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "하");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

															   // Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKH 2004-01-12
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0283(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "타");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");

				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "타");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");

				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "속") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "타");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");

					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "타");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");

					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0284(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "벌");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "벌");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "벌");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "벌");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "서") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "갈") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "교대") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "벌");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "벌");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0285(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "지");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "지");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "지");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "바지") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "지");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "지");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "지");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "지");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0286(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "가");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "가");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "에") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[14] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[25] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[49] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "음식") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "떨어지") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "졸이") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "보") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "수술") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "장애") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[10] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(STEM_VALUE) == true && NextNodeFeature(STEM_VALUE) == true
			&& bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[251] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[14] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14, 16, 17, 18);//2,4
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "가");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "거나") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "든가") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "든지") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "든") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
		{
			if (PrevNodestrResult(END_VALUE) == true || PrevNodeNull(END_VALUE) == true)
			{
				if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "들") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
				}
				if (PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0287(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	bool bIsFind1 = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㄴ");
			}
			if (pOriginalString[3] & 0x80)
			{
				bIsFind1 = IsChosungIFunction(pOriginalString, 4, "ㅇ");
			}
			else
			{
				bIsFind = false;
				bIsFind1 = false;
			}
		}
		else
		{
			bIsFind = false;
			bIsFind1 = false;
		}
	}

	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "바람") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "휘파람") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "불");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "불");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "불");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFind == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "불");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFind1 == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "붓");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "니") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "불");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0288(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "오");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "오");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[58] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "설") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "추석") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "초") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "말") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "들") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "농사") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "설") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "추석") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "목표") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "초") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "말") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[17] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "오");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "ㄹ");
			SaveEndBuffer("ㄹ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0289(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (IsExistTable(STEM_VALUE, NEXT_STR) == true  && bIsFirstFind == false)
	{
		if (IsExistTable066(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "크");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "어서");
				SaveEndBuffer("어서");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "크");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "어서");
				SaveEndBuffer("어서");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "이동") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "멈추") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "위치") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "크");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

			CreateNewEndStr(pNode, "어서");
			SaveEndBuffer("어서");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "크");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

		CreateNewEndStr(pNode, "어서");
		SaveEndBuffer("어서");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0290(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 49);//2,4,49
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 49);//2,4,49
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "비");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "비");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 49);//2,4,49
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 49);//2,4,49
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 49);//2,4,49
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "비");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

													   // Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKH 2004-01-12

		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0291(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[9] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "작");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "고");
				SaveEndBuffer("고");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[8] = '1';
				pNode->pHToken->subEnding->strFeature[28] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "문인") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "작");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

			CreateNewEndStr(pNode, "고");
			SaveEndBuffer("고");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
			pNode->pHToken->subEnding->strFeature[28] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "작");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

		CreateNewEndStr(pNode, "고");
		SaveEndBuffer("고");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[8] = '1';
		pNode->pHToken->subEnding->strFeature[28] = '1';
	}
}


void CNAAmbiguity::Amb_Function_0292(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "과") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "지");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

			CreateNewEndStr(pNode, "ㄹ");
			SaveEndBuffer("ㄹ");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "지");
				bIsFirstFind = SaveStemFeature(pNode, 3, 7, 8);//3,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "지");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "지");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "확률") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "지");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "놀이") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "게임") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "책임") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "지");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "좋") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "나쁘") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "지");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[6] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "지");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄹ");
		SaveEndBuffer("ㄹ");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0293(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "아니") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[27] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "지");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "진");
				SaveEndBuffer("진");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "지지");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}


void CNAAmbiguity::Amb_Function_0294(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[7] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,7,8

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,7,8

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "나름") == 0)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,7,8

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);
		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,7,8

		nLen = strlen(m_pOneChar);
		CreateNewEndStr(pNode, m_pOneChar);
		SaveEndBuffer(m_pOneChar);
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0295(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "기는") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "기도") == 0)
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "거나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
}

void CNAAmbiguity::Amb_Function_0296(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "일") == 0)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetStartCountChar(pOriginalString, nTotalLen);
			MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);

			nLen = strlen(m_pMinusTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			nLen = strlen(m_pJongChar);
			CreateNewEndStr(pNode, m_pJongChar);
			SaveEndBuffer(m_pJongChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetStartCountChar(pOriginalString, nTotalLen);
			MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);

			nLen = strlen(m_pMinusTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			nLen = strlen(m_pJongChar);
			CreateNewEndStr(pNode, m_pJongChar);
			SaveEndBuffer(m_pJongChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
		GetStartCountChar(pOriginalString, nTotalLen);
		MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);

		nLen = strlen(m_pMinusTwoString);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		nLen = strlen(m_pJongChar);
		CreateNewEndStr(pNode, m_pJongChar);
		SaveEndBuffer(m_pJongChar);
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0297(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "가");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "ㅂ");
			SaveEndBuffer("ㅂ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
}

void CNAAmbiguity::Amb_Function_0298(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true || PrevNodestrResult(STEM_VALUE) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (PrevNodestrResult(STEM_VALUE) == true  && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "수") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "다음") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "지난") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "새") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "시작하") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "세");
				bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

				CreateNewEndStr(pNode, "기");
				SaveEndBuffer("기");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "때문") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "세");
				bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

				CreateNewEndStr(pNode, "기");
				SaveEndBuffer("기");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "세");
			bIsFirstFind = SaveStemFeature(pNode, 2, 9, 39);//2,9,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "세");
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,9,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable060(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "세");
			bIsFirstFind = SaveStemFeature(pNode, 2, 9, 39);//2,9,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "세");
		bIsFirstFind = SaveStemFeature(pNode, 2, 9, 39);//2,9,39

		CreateNewEndStr(pNode, "기");
		SaveEndBuffer("기");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0299(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "차");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "차");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "바람") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "공기") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "물") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "차");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "차");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodeNull(STEM_VALUE) == true  && bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "차");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "차");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0300(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하나") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "둘") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "하나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "기도") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "기는") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "긴") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이긴") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이기는") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이라") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이라고는") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어야") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "었다") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ다") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ다고는") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는다고") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "다고") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "다고는") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이라고는") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "었다고") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "았다고") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "었다고도") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "았다고도") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "었다고는") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "았다고는") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "려") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으려") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어야") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아야") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "고자") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "나");
				SaveEndBuffer("나");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "보") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "싶") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "보다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "나");
				SaveEndBuffer("나");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "이렇게") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "어떻게") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "저렇") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "인정") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "방송") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "자랑") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "인사") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "나");
				SaveEndBuffer("나");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "나");
			SaveEndBuffer("나");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "기도") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "기는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "긴") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이긴") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이기는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "라") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이라") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이라고는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어야") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "었다") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ다") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ다고는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는다고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "다고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "다고는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이라고는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "었다고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "았다고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "었다고도") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "았다고도") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "었다고는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "았다고는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "려") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으려") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어야") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아야") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "인들") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "나");
			SaveEndBuffer("나");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "니라") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "나");
			SaveEndBuffer("나");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 &&
			pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "나");
			SaveEndBuffer("나");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "나");
			SaveEndBuffer("나");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
			pNode->pPrev->pHToken->subStem->strFeature[8] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "나");
			SaveEndBuffer("나");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "하");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "나");
		SaveEndBuffer("나");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
}

void CNAAmbiguity::Amb_Function_0301(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "두");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "두");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "두");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
}

void CNAAmbiguity::Amb_Function_0302(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "쉬");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "쉬");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[25] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable059(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "쉬");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0303(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "십");
			SaveEndBuffer("십");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
}

void CNAAmbiguity::Amb_Function_0304(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "차");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "차");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(STEM_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->bSubCompCreate == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "차");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
				pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "차");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true  && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "가운데") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "양쪽") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "가까이") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "전용") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "고가") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "예비") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "지하") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "차");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "물") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "바람") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "차");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[4] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "차");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "차");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "차");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0305(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "타") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "소리") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "넣") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "썰") == 0)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);
		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

		nLen = strlen(m_pOneChar);
		CreateNewEndStr(pNode, m_pOneChar);
		SaveEndBuffer(m_pOneChar);
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0306(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);

		strcpy(pNode->pHToken->subStem->strResult, "저");

		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

		CreateNewEndStr(pNode, "의");
		SaveEndBuffer("의");

		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[7] = '1';
	}
}


void CNAAmbiguity::Amb_Function_0307(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);

		strcpy(pNode->pHToken->subStem->strResult, "이");

		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

		CreateNewEndStr(pNode, "에");
		SaveEndBuffer("에");

		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
	}
	if (PrevNodestrResult(END_VALUE) == true && PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if ((strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ") == 0) &&
			pNode->pPrev->pHToken->subStem->strFeature[7] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);

			strcpy(pNode->pHToken->subStem->strResult, "이");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

			CreateNewEndStr(pNode, "에");
			SaveEndBuffer("에");

			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "이");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

			CreateNewEndStr(pNode, "에");
			SaveEndBuffer("에");

			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "이");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

		CreateNewEndStr(pNode, "에");
		SaveEndBuffer("에");

		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
	}
}


void CNAAmbiguity::Amb_Function_0308(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "보");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 37);//2,7,8,37

		CreateNewEndStr(pNode, "다");
		SaveEndBuffer("다");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
	if (ThisNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "두") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "보");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 37);//2,7,8,37

			CreateNewEndStr(pNode, "다");
			SaveEndBuffer("다");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "나") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이나") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ가") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "인가") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "보");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 37);//2,7,8,37

			CreateNewEndStr(pNode, "다");
			SaveEndBuffer("다");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subEnding->strResult, "말") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "보");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 37);//2,7,8,37

			CreateNewEndStr(pNode, "다");
			SaveEndBuffer("다");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' ||
			pNode->pNext->pHToken->subStem->strFeature[10] == '1' ||
			pNode->pNext->pHToken->subStem->strFeature[4] == '1' ||
			pNode->pNext->pHToken->subStem->strFeature[1] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "보");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 37);//2,7,8,37

		CreateNewEndStr(pNode, "다");
		SaveEndBuffer("다");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0309(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
		if (NextNodeNull(STEM_VALUE) == true && PrevNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken == NULL &&
				(strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는지") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은지") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ지") == 0))
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "알");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "니");
				SaveEndBuffer("니");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
		if (NextNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 10, 27);//2,10,27
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "까") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "알");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "니");
			SaveEndBuffer("니");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9, 27);//2,7,9,27
}

void CNAAmbiguity::Amb_Function_0310(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "개");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "개");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "개");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "개");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[10])
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0311(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "십");
				SaveEndBuffer("십");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "니까") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "네") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "쇼") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "십");
				SaveEndBuffer("십");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}


void CNAAmbiguity::Amb_Function_0312(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "내");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "실");
			SaveEndBuffer("실");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[45] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "내");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "실");
			SaveEndBuffer("실");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[45] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "내");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "실");
						SaveEndBuffer("실");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[45] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "내");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "실");
						SaveEndBuffer("실");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[45] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0313(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true || ThisNodeFeature(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[45] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[45] = '1';
			}
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					{
						InitBuffer();
						pOriginalString = pNode->pHToken->subStem->strResult;
						nTotalLen = strlen(pOriginalString);
						GetOneChar(pOriginalString, nTotalLen, nTotalLen);
						MoveLeftWordCount(pOriginalString, nTotalLen);
						GetStartCountChar(pOriginalString, nTotalLen);
						nLen = strlen(m_pStartCountChar);
						CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
						strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						nLen = strlen(m_pOneChar);
						CreateNewEndStr(pNode, m_pOneChar);
						SaveEndBuffer(m_pOneChar);
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[45] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						InitBuffer();
						pOriginalString = pNode->pHToken->subStem->strResult;
						nTotalLen = strlen(pOriginalString);
						GetOneChar(pOriginalString, nTotalLen, nTotalLen);
						MoveLeftWordCount(pOriginalString, nTotalLen);
						GetStartCountChar(pOriginalString, nTotalLen);
						nLen = strlen(m_pStartCountChar);
						CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
						strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						nLen = strlen(m_pOneChar);
						CreateNewEndStr(pNode, m_pOneChar);
						SaveEndBuffer(m_pOneChar);
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[45] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[13] == '1')
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);
					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					nLen = strlen(m_pOneChar);
					CreateNewEndStr(pNode, m_pOneChar);
					SaveEndBuffer(m_pOneChar);
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[45] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (NextNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subEnding->strFeature[42] == '1')
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);
					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					nLen = strlen(m_pOneChar);
					CreateNewEndStr(pNode, m_pOneChar);
					SaveEndBuffer(m_pOneChar);
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[45] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);
		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		nLen = strlen(m_pOneChar);
		CreateNewEndStr(pNode, m_pOneChar);
		SaveEndBuffer(m_pOneChar);
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[45] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0314(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "오") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "길");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '1';
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "길");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "길");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '1';
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "길");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
				pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "길");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "잊") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "남") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "기억") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[25] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "길");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "오") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "길");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "길");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "길");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "길");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "길");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "길");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "길");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "길");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "길");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0315(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "도");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "로");
				SaveEndBuffer("로");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true  && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "도");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "로");
				SaveEndBuffer("로");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' ||
					pNode->pNext->pHToken->subStem->strFeature[10] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0316(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
				{
					if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
					{
						if (pNode->pHToken->subEnding->strFeature[3] == '1')
						{
							CreateStemEndStr(pNode, CREATE_STEM, 3);
							strcpy(pNode->pHToken->subStem->strResult, "개");
							bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

							CreateNewEndStr(pNode, "이ㅂ");
							SaveEndBuffer("이ㅂ");
							pNode->pHToken->subEnding->strFeature[1] = '1';
							pNode->pHToken->subEnding->strFeature[3] = '1';
							pNode->pHToken->subEnding->strFeature[26] = '1';
						}
					}
					if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
					{
						if (strcmp(pNode->pHToken->subEnding->strResult, "니까") == 0 ||
							strcmp(pNode->pHToken->subEnding->strResult, "네") == 0)
						{
							CreateStemEndStr(pNode, CREATE_STEM, 3);
							strcpy(pNode->pHToken->subStem->strResult, "개");
							bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

							CreateNewEndStr(pNode, "이ㅂ");
							SaveEndBuffer("이ㅂ");
							pNode->pHToken->subEnding->strFeature[1] = '1';
							pNode->pHToken->subEnding->strFeature[3] = '1';
							pNode->pHToken->subEnding->strFeature[26] = '1';
						}
					}
				}
				if (bIsFirstFind == false)
					bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
				{
					if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
					{
						if (pNode->pHToken->subEnding->strFeature[3] == '1')
						{
							CreateStemEndStr(pNode, CREATE_STEM, 3);
							strcpy(pNode->pHToken->subStem->strResult, "개");
							bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

							CreateNewEndStr(pNode, "이ㅂ");
							SaveEndBuffer("이ㅂ");
							pNode->pHToken->subEnding->strFeature[1] = '1';
							pNode->pHToken->subEnding->strFeature[3] = '1';
							pNode->pHToken->subEnding->strFeature[26] = '1';
						}
					}
					if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
					{
						if (strcmp(pNode->pHToken->subEnding->strResult, "니까") == 0 ||
							strcmp(pNode->pHToken->subEnding->strResult, "네") == 0)
						{
							CreateStemEndStr(pNode, CREATE_STEM, 3);
							strcpy(pNode->pHToken->subStem->strResult, "개");
							bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

							CreateNewEndStr(pNode, "이ㅂ");
							SaveEndBuffer("이ㅂ");
							pNode->pHToken->subEnding->strFeature[1] = '1';
							pNode->pHToken->subEnding->strFeature[3] = '1';
							pNode->pHToken->subEnding->strFeature[26] = '1';
						}
					}
				}
				if (bIsFirstFind == false)
					bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "개");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 25);//2,4,25

				CreateNewEndStr(pNode, "이ㅂ");
				SaveEndBuffer("이ㅂ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "니까") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "네") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "개");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 25);//2,4,25

				CreateNewEndStr(pNode, "이ㅂ");
				SaveEndBuffer("이ㅂ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0317(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "오") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 51);//2,4,51
	}
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 51);//2,4,51
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 51);//2,4,51
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 51);//2,4,51
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 51);//2,4,51
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 51);//2,4,51
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					{
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 51);//2,4,51
		}
	}
	if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "수록") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 51);//2,4,51
}

void CNAAmbiguity::Amb_Function_0318(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true || ThisNodeFeature(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "서");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "서");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "미") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "서");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "서");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0319(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㄴ");
			}
			else
			{
				bIsFind = false;
			}
		}
		else
		{
			bIsFind = false;
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "여") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "놀");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[6] == '0')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "놀");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "놀");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "놀");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFind == true && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "놀");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}


void CNAAmbiguity::Amb_Function_0320(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "마");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "라");
				SaveEndBuffer("라");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "마");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "라");
				SaveEndBuffer("라");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "마");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "라");
			SaveEndBuffer("라");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "마");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "라");
			SaveEndBuffer("라");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지나") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지도") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "진") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "질") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지만") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "시지") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "말");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27

			CreateNewEndStr(pNode, "라");
			SaveEndBuffer("라");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "마");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "라");
		SaveEndBuffer("라");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0321(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (PrevNodeFeature(STEM_VALUE) == true &&
		PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[7] == '1' &&
			(strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0))
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 3, 7);//2,7,8

			CreateNewEndStr(pNode, "세");
			SaveEndBuffer("세");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);
		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "세");
		SaveEndBuffer("세");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "세");
			SaveEndBuffer("세");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "세");
			SaveEndBuffer("세");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0322(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true &&
			bIsFirstFind == false)
		{
			if ((pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1') &&
				pNode->pPrev->pHToken->subStem->strFeature[25] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true &&
			bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "절");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "절");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (ThisNodeNull(STEM_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->bSubCompCreate == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "절");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "대통령") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "전대통령") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true || PrevNodestrResult(STEM_VALUE) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[58] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "얼마") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "며칠") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "오래") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "조금") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "년") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "개월") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "시간") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "분") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "초") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "해") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "해방") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "결혼") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "돌") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "취학") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "기") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeNull(STEM_VALUE) == false  && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken != NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
			}
			if (NextNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subEnding->strFeature[2] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "저");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0323(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	bool bIsFind1 = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㅇ");
				bIsFind1 = IsJungsungVFunction(pOriginalString, 4, "으");
			}
			else
			{
				bIsFind = false;
				bIsFind1 = false;
			}
		}
		else
		{
			bIsFind = false;
			bIsFind1 = false;
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
		{
			if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true  && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pPrev->pHToken->subEnding->strResult == NULL)
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "아") == 0)
		{
			if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true  && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pPrev->pHToken->subEnding->strResult == NULL)
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if ((strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0) &&
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "전하") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "듣");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '0')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "듣");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "듣");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
					}
				}
			}
			if (PrevNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "듣");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true  && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pPrev->pHToken->subEnding->strResult == NULL)
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true  && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pPrev->pHToken->subEnding->strResult == NULL)
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					{
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFind == false && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	if (bIsFind == true && bIsFind1 == true && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "듣");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			if (PrevNodestrResult(STEM_VALUE) == true && ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "점") == 0 &&
					strcmp(pNode->pHToken->subEnding->strResult, "어") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable067(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "듣");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "다고") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "라고") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "라도") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "듣");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[38] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "듣");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "좀") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "꼭") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "듣");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (ThisNodestrResult(END_VALUE) == true  && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pHToken->subEnding->strResult, "어") == 0 &&
					strcmp(pNode->pNext->pHToken->subStem->strResult, "보") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "듣");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "듣");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "다고") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "라고") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "듣");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "좀") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "듣");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (ThisNodestrResult(END_VALUE) == true  && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pHToken->subEnding->strResult, "어") == 0 &&
					strcmp(pNode->pNext->pHToken->subStem->strResult, "보") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "듣");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0324(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true || NextNodestrResult(STEM_VALUE) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
						pNode->pNext->pHToken->subStem->strFeature[12] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
				}
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하루") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "한") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "한사람") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
				}
			}
			if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
			{
				if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pPrev->pHToken->subStem->strFeature[49] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "달");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9;

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, PREV_STR) == true  && bIsFirstFind == false)
				{
					if (IsExistTable054(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "달");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[49] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "달");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true  && bIsFirstFind == false)
				{
					if (IsExistTable054(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "달");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			if (NextNodeNull(STEM_VALUE) == true  && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken == NULL)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pHToken->subStem->strFeature[S_T142] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "달");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "달");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "달");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "달");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0325(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true || ThisNodestrResult(STEM_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[26] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeFeature(STEM_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[39] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken == NULL)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "가");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35, 39);//2,7,30,35,39

					CreateNewEndStr(pNode, "ㅁ");
					SaveEndBuffer("ㅁ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "까지") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "가");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35, 39);//2,7,30,35,39

			CreateNewEndStr(pNode, "ㅁ");
			SaveEndBuffer("ㅁ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
		{
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0326(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "냄새") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "물기") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "알") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "새끼") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "아기") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "아이") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "애") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "배");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 39);//2,7,8,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "가스") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strResult == NULL)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "야") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true || ThisNodeFeature(END_VALUE) == true)
	{
		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[39] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0327(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' ||
					pNode->pNext->pHToken->subStem->strFeature[10] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 5);
					strcpy(pNode->pHToken->subStem->strResult, "경기");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					CreateNewEndStr(pNode, "도");
					SaveEndBuffer("도");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[2] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 51, 52);//2,4,16,51,52
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 51, 52);//2,4,16,51,52
}

void CNAAmbiguity::Amb_Function_0328(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "대");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "로");
				SaveEndBuffer("로");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "대");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "로");
				SaveEndBuffer("로");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4
			}
			if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "한복판") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "대");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "로");
				SaveEndBuffer("로");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
			}
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true || PrevNodeFeature(END_VALUE) == true || ThisNodeFeature(STEM_VALUE) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[26] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "대");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "로");
		SaveEndBuffer("로");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0329(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (IsExistTable(END_VALUE, THIS_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable057(pNode->pHToken->subEnding->strResult, GET_END) == true)
		{
			if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
			{
				if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
						pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "백");
						bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6

						CreateNewEndStr(pNode, "이ㄴ");
						SaveEndBuffer("이ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
						pNode->pHToken->subEnding->strFeature[26] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "백");
						bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6

						CreateNewEndStr(pNode, "이ㄴ");
						SaveEndBuffer("이ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
						pNode->pHToken->subEnding->strFeature[26] = '1';
					}
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
						pNode->pNext->pHToken->subStem->strFeature[12] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "백");
						bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6

						CreateNewEndStr(pNode, "이ㄴ");
						SaveEndBuffer("이ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
						pNode->pHToken->subEnding->strFeature[26] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "백");
						bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6

						CreateNewEndStr(pNode, "이ㄴ");
						SaveEndBuffer("이ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
						pNode->pHToken->subEnding->strFeature[26] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "백");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "이ㄴ");
				SaveEndBuffer("이ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "숫자") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "수") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "백");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6

					CreateNewEndStr(pNode, "이ㄴ");
					SaveEndBuffer("이ㄴ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
					pNode->pHToken->subEnding->strFeature[26] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0330(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㅇ");
			}
			else
			{
				bIsFind = false;
			}
		}
		else
		{
			bIsFind = false;
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "놈") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "곳") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "집") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "쪽") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "길") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "천") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "일") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "차") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "총재") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "후보") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "총무") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "의장") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && NextNodeNull(END_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
	if (NextNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[6] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
			IsExistTable064(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (ThisNodeNull(END_VALUE) == true && NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[25] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (ThisNodeNull(END_VALUE) == true && IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable076(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (ThisNodeNull(END_VALUE) == true && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "학년") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "학기") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "학기말") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (PrevNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true ||
			IsExistTable064(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "갈리") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "갈") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "빠지") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "빼") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "악물") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "나") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "기어가") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "잡") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "상하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "상한") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[1] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (PrevNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (ThisNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는데") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
			}
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1' &&
					pNode->pPrev->pHToken->subStem->strFeature[26] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
			}
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[28] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "논란") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "일");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,8
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[54] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "지붕") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "이엉") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "기와") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "짚") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (bIsFind == false && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	if (ThisNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "지붕") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "이엉") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "기와") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "짚") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "잇");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "잇");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "잇");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
}

void CNAAmbiguity::Amb_Function_0331(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[25] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable064(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "손가락") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "과목") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "교환") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0332(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "아니") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "안") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[27] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "내");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "지");
				SaveEndBuffer("지");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "말") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "말라") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "마") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "내");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "지");
				SaveEndBuffer("지");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
			{
				if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
						pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
						pNode->pPrev->pHToken->subStem->strFeature[25] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
				}
				if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable059(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
				}
			}
			if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (PrevNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
}



void CNAAmbiguity::Amb_Function_0333(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (PrevNodeFeature(STEM_VALUE) == true || PrevNodeNull(STEM_VALUE) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[26] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "나");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18

				CreateNewEndStr(pNode, "는");
				SaveEndBuffer("는");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '1';
				pNode->pHToken->subEnding->strFeature[5] = '1';
			}
		}
		if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "함께") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "때문") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "와") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "과") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "랑") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이랑") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "하고") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "마음씨") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[5] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if ((strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에서") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0) &&
			(pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pPrev->pHToken->subStem->strFeature[3] == '0'))
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable070(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[18] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[17] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "날");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "하늘") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "창공") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "휙") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "휙휙") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "훨훨") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "날");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
			pNode->pNext->pHToken->subStem->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
			IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "듯하") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "나");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18

		CreateNewEndStr(pNode, "는");
		SaveEndBuffer("는");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[25] = '1';
		pNode->pHToken->subEnding->strFeature[5] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0334(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[49] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
		if (ThisNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[58] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4	
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "서");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "서");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4	
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}


void CNAAmbiguity::Amb_Function_0335(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeFeature(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "말");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27
			}
		}
		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[39] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "말");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && PrevNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지나") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지도") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "진") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "질") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지만") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "시지") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "말");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27

			CreateNewEndStr(pNode, "아");
			SaveEndBuffer("아");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지나") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지도") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "진") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "질") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지만") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "시지") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "말");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 &&
			(strcmp(pNode->pPrev->pHToken->subEnding->strResult, "나") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으나") == 0))
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "말");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[7] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "말");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "말");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "말");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0336(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "년") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "달") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "월") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "올해") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "지난해") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "지난달") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "년도") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "금세기") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "세기") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "작년") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 58);//3,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4	
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "담요") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "이불") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "둘둘") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "돌돌") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "둥글") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27
		}
		if (ThisNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					{
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && PrevNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
			{
				if ((strcmp(pNode->pPrev->pHToken->subEnding->strResult, "고") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지") == 0) &&
					pNode->pPrev->pHToken->subStem->strFeature[7] == '1')
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && PrevNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
	{
		if ((strcmp(pNode->pPrev->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지") == 0) &&
			pNode->pPrev->pHToken->subStem->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27
	}
	if (ThisNodestrResult(END_VALUE) == true && PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 &&
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "말") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "아") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0337(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true || ThisNodeNull(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "돌");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[39] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "돌");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
		}
	}
	if (ThisNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하나") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' ||
					pNode->pNext->pHToken->subStem->strFeature[6] == '0')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "돌");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}



void CNAAmbiguity::Amb_Function_0338(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true || ThisNodeFeature(STEM_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[39] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (PrevNodeFeature(END_VALUE) == true || PrevNodestrResult(END_VALUE) == true)
	{
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
				pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "라는") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true  && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "받") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "저");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[6] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0339(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4	
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			if (PrevNodeFeature(STEM_VALUE) == true && PrevNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
			{
				if ((pNode->pPrev->pHToken->subStem->strFeature[7] == '1') &&
					(strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은") == 0))
				{
					if (ThisNodeNull(END_VALUE) == true)
					{
						InitBuffer();
						pOriginalString = pNode->pHToken->subStem->strResult;
						nTotalLen = strlen(pOriginalString);
						GetOneChar(pOriginalString, nTotalLen, nTotalLen);
						MoveLeftWordCount(pOriginalString, nTotalLen);
						GetStartCountChar(pOriginalString, nTotalLen);
						nLen = strlen(m_pStartCountChar);
						CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
						strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

						CreateNewEndStr(pNode, "이");
						SaveEndBuffer("이");
						pNode->pHToken->subEnding->strFeature[26] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8	
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			if (PrevNodeFeature(STEM_VALUE) == true  && PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if ((pNode->pPrev->pHToken->subStem->strFeature[7] == '1') &&
					(strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은") == 0))
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);
					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					CreateNewEndStr(pNode, "이");
					SaveEndBuffer("이");
					pNode->pHToken->subEnding->strFeature[26] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8	
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8	
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4	
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0340(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8	
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8	
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "앞") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "뛰") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "너");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

			CreateNewEndStr(pNode, "ㄹ");
			SaveEndBuffer("ㄹ");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0341(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "기");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "가");
		SaveEndBuffer("가");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[4] = '1';
	}
}



void CNAAmbiguity::Amb_Function_0342(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지나") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지도") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "진") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "질") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지만") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "시지") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "말");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27, S_T145);//2,7,8,27

			CreateNewEndStr(pNode, "라");
			SaveEndBuffer("라");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "구") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "던") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "느니") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "말");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27, S_T145);//2,7,8,27

			CreateNewEndStr(pNode, "라");
			SaveEndBuffer("라");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "야") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "마르");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

			CreateNewEndStr(pNode, "아");
			SaveEndBuffer("아");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "걱정") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "염려") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "얼씬") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "말");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27

			CreateNewEndStr(pNode, "라");
			SaveEndBuffer("라");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL && pNode->pNext->pHToken == NULL)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "말");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27, S_T145);//2,7,8,27

			CreateNewEndStr(pNode, "라");
			SaveEndBuffer("라");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "버리") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "죽") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "붙") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "가") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "마르");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

			CreateNewEndStr(pNode, "아");
			SaveEndBuffer("아");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "말");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27, S_T145);//2,7,8,27

			CreateNewEndStr(pNode, "라");
			SaveEndBuffer("라");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "마르");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

		CreateNewEndStr(pNode, "아");
		SaveEndBuffer("아");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0343(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken == NULL)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "사이");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "다");
			SaveEndBuffer("다");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0)
		{
			if (PrevNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4	
			}
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[7] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 5);
					strcpy(pNode->pHToken->subStem->strResult, "사이");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					CreateNewEndStr(pNode, "다");
					SaveEndBuffer("다");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[26] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4	
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0344(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "모");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "로");
				SaveEndBuffer("로");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "모");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "로");
				SaveEndBuffer("로");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[25] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "모");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "로");
			SaveEndBuffer("로");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
}

void CNAAmbiguity::Amb_Function_0345(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "일");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "로");
				SaveEndBuffer("로");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "일");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "로");
				SaveEndBuffer("로");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "대") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "일");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6

			CreateNewEndStr(pNode, "로");
			SaveEndBuffer("로");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "오") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "일");
		bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

		CreateNewEndStr(pNode, "로");
		SaveEndBuffer("로");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[12] = '1';
		pNode->pHToken->subEnding->strFeature[11] = '1';
	}
}




void CNAAmbiguity::Amb_Function_0346(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pHToken->subEnding->strResult == NULL)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "달");
						bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

						CreateNewEndStr(pNode, "이");
						SaveEndBuffer("이");
						pNode->pHToken->subEnding->strFeature[2] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[4] = '1';
					}
				}
				if (bIsFirstFind == false)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "달");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

					CreateNewEndStr(pNode, "이");
					SaveEndBuffer("이");
					pNode->pHToken->subEnding->strFeature[26] = '1';
				}
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pHToken->subEnding->strResult == NULL)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "달");
						bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

						CreateNewEndStr(pNode, "이");
						SaveEndBuffer("이");
						pNode->pHToken->subEnding->strFeature[2] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[4] = '1';
					}
				}
				if (bIsFirstFind == false)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "달");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

					CreateNewEndStr(pNode, "이");
					SaveEndBuffer("이");
					pNode->pHToken->subEnding->strFeature[26] = '1';
				}
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "달");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "달");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "달");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8	
	}
	if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable051(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "달");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0347(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pPrev->pHToken->subEnding->strResult == NULL)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "들");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

					CreateNewEndStr(pNode, "이");
					SaveEndBuffer("이");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[4] = '1';
				}
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "닥치") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "밀") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "대") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "마시") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "받") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "내밀") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8	
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "들");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 39);//2,7,39
	}
	if (ThisNodestrResult(END_VALUE) == true && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 &&
			(strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "싶") == 0))
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
			pNode->pPrev->pHToken->subEnding->strResult == NULL)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "들");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "들");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "이");
		SaveEndBuffer("이");
		pNode->pHToken->subEnding->strFeature[26] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0348(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
		{
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄹ");
			SaveEndBuffer("ㄹ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "가");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

		CreateNewEndStr(pNode, "ㄹ");
		SaveEndBuffer("ㄹ");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0349(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 8);//2,4,8	
	}
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[49] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "쓰");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable054(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "쓰");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "쓰");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄹ");
		SaveEndBuffer("ㄹ");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0350(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[39] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39, 30);//2,8,39	
		}
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
		}
	}
	if (ThisNodeNull(END_VALUE) == true && NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL && pNode->pNext->pHToken == NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
	}
	if (ThisNodestrResult(END_VALUE) == true && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 &&
			(strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "한") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "할") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "함") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "해") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "하나") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "되") == 0))
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
	}
	if (ThisNodestrResult(END_VALUE) == true && NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 &&
			(pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '1'))
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
	}
	if (ThisNodestrResult(END_VALUE) == true && IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 &&
			(IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true))
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
	}
	if (ThisNodestrResult(END_VALUE) == true &&  bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "서");
			SaveEndBuffer("서");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[28] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if ((strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0) &&
			pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "나");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "서");
		SaveEndBuffer("서");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[28] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0351(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "가지");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "는");
				SaveEndBuffer("는");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "가지");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "는");
				SaveEndBuffer("는");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "아니") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "안") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "가지");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[27] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "지는");
				SaveEndBuffer("지는");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "말") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "말라") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "마") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "지는");
				SaveEndBuffer("지는");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "가지");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "가지");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "가지");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "는");
				SaveEndBuffer("는");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "가지");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "는");
				SaveEndBuffer("는");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "가지");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "는");
		SaveEndBuffer("는");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0352(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "가지");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "를");
				SaveEndBuffer("를");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "가지");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "를");
				SaveEndBuffer("를");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "아니") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "안") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "가지");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "를");
			SaveEndBuffer("를");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[27] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "지를");
				SaveEndBuffer("지를");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "말") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "말라") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "마") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "지를");
				SaveEndBuffer("지를");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "가지");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "를");
			SaveEndBuffer("를");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "가지");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "를");
			SaveEndBuffer("를");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "가지");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "를");
		SaveEndBuffer("를");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0353(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	int nLen = 0;
	char* pOriginalString = NULL;

	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				pOriginalString = pNode->pHToken->subStem->strResult;
				InitBuffer();
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25			
				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				pOriginalString = pNode->pHToken->subStem->strResult;
				InitBuffer();
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25			
				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "아니") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "안") == 0)
		{
			pOriginalString = pNode->pHToken->subStem->strResult;
			InitBuffer();
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetStartCountChar(pOriginalString, nTotalLen);
			MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
			nLen = strlen(m_pMinusTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			nLen = strlen(m_pJongChar);
			CreateNewEndStr(pNode, m_pJongChar);
			SaveEndBuffer(m_pJongChar);
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[27] == '1')
			{
				pOriginalString = pNode->pHToken->subStem->strResult;
				InitBuffer();
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "말") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "말라") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "마") == 0)
			{
				pOriginalString = pNode->pHToken->subStem->strResult;
				InitBuffer();
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			pOriginalString = pNode->pHToken->subStem->strResult;
			InitBuffer();
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetStartCountChar(pOriginalString, nTotalLen);
			MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
			nLen = strlen(m_pMinusTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			nLen = strlen(m_pJongChar);
			CreateNewEndStr(pNode, m_pJongChar);
			SaveEndBuffer(m_pJongChar);
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			pOriginalString = pNode->pHToken->subStem->strResult;
			InitBuffer();
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetStartCountChar(pOriginalString, nTotalLen);
			MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
			nLen = strlen(m_pMinusTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			nLen = strlen(m_pJongChar);
			CreateNewEndStr(pNode, m_pJongChar);
			SaveEndBuffer(m_pJongChar);
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			{
				pOriginalString = pNode->pHToken->subStem->strResult;
				InitBuffer();
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				pOriginalString = pNode->pHToken->subStem->strResult;
				InitBuffer();
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				pOriginalString = pNode->pHToken->subStem->strResult;
				InitBuffer();
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				pOriginalString = pNode->pHToken->subStem->strResult;
				InitBuffer();
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
		{
			pOriginalString = pNode->pHToken->subStem->strResult;
			InitBuffer();
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			GetStartCountChar(pOriginalString, nTotalLen);
			MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
			nLen = strlen(m_pMinusTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			nLen = strlen(m_pJongChar);
			CreateNewEndStr(pNode, m_pJongChar);
			SaveEndBuffer(m_pJongChar);
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		pOriginalString = pNode->pHToken->subStem->strResult;
		InitBuffer();
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
		GetStartCountChar(pOriginalString, nTotalLen);
		MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
		nLen = strlen(m_pMinusTwoString);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		nLen = strlen(m_pJongChar);
		CreateNewEndStr(pNode, m_pJongChar);
		SaveEndBuffer(m_pJongChar);
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}



void CNAAmbiguity::Amb_Function_0354(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "가지");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "고");
				SaveEndBuffer("고");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "가지");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "고");
				SaveEndBuffer("고");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "가지");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "고");
			SaveEndBuffer("고");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "가지");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "고");
			SaveEndBuffer("고");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "가지");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "고");
			SaveEndBuffer("고");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "가지");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "고");
			SaveEndBuffer("고");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[7] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "가지");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "고");
			SaveEndBuffer("고");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "가지");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "고");
		SaveEndBuffer("고");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0355(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "요") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "들");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "세");
			SaveEndBuffer("세");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodeNull(STEM_VALUE) == true && ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken == NULL  && pNode->pHToken->subEnding->strResult == NULL)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "들");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "세");
			SaveEndBuffer("세");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0356(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라서") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라요") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라두") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라도요") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라도") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "모르");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8	
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0357(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strResult == NULL)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "빌");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "비");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0358(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodestrResult(END_VALUE) == true || ThisNodeFeature(END_VALUE) == true)
	{
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㅁ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "음") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "하얗");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
		}
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "하얗");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}


void CNAAmbiguity::Amb_Function_0359(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strResult == NULL)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "곱");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "곱");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "곱");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "곱");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "곱");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}


void CNAAmbiguity::Amb_Function_0360(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true || PrevNodestrResult(STEM_VALUE) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "이") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "그") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "하늘") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "창공") == 0)
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable070(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "나");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[5] == '0')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "나");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "나");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "새") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "서") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' ||
					pNode->pNext->pHToken->subStem->strFeature[5] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "나");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[6] = '1';
				}
			}
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[5] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "나");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[6] = '1';
				}
			}
			if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "나");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[6] = '1';
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0361(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (PrevNodeFeature(STEM_VALUE) == true || PrevNodestrResult(STEM_VALUE) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "이") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "그") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "하늘") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "창공") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "날");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable070(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "나");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "나");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "나");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "고") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에서") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "나");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "나");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[5] = '1';
				}
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "화분") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable070(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "나");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "나");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[5] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "하늘") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "창공") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "날");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (bIsFirstFind == false)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "나");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "하늘") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "창공") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "날");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (bIsFirstFind == false)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "나");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}


void CNAAmbiguity::Amb_Function_0362(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㅇ");
			}
			else
			{
				bIsFind = false;
			}
		}
		else
		{
			bIsFind = false;
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "것");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

			CreateNewEndStr(pNode, "을");
			SaveEndBuffer("을");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "것");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

			CreateNewEndStr(pNode, "을");
			SaveEndBuffer("을");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "걷");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "걷");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
			pNode->pNext->pHToken->subStem->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "걷");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "어") == 0 &&
			(strcmp(pNode->pNext->pHToken->subStem->strResult, "가") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "오") == 0))
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "걷");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄹ");
			SaveEndBuffer("ㄹ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에게") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
			IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "걷");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "어") == 0 &&
			pNode->pNext->pHToken->subStem->strFeature[30] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "걷");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "게") == 0)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "만들") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[9] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (bIsFind == true && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "걷");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄹ");
		SaveEndBuffer("ㄹ");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0363(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[49] == '1' ||
						(pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
							pNode->pNext->pHToken->subStem->strFeature[3] == '1'))
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "시");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable054(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "시");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0364(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[25] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable074(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable075(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
				}
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "마당") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "조각") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "이") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "그") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "저") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "녀석") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "이") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "놈") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 5);
					strcpy(pNode->pHToken->subStem->strResult, "너희");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "너");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

					CreateNewEndStr(pNode, "의");
					SaveEndBuffer("의");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[7] = '1';
				}
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "스스로") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "너");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

					CreateNewEndStr(pNode, "의");
					SaveEndBuffer("의");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[7] = '1';
				}
			}
			if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken == NULL)
					bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
}

void CNAAmbiguity::Amb_Function_0365(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pHToken->subStem->strFeature[25] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable059(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "일") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "날씨") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "광영") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "라는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "란") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "이");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4


			CreateNewEndStr(pNode, "만");
			SaveEndBuffer("만");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "쑤시") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "이");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "만");
			SaveEndBuffer("만");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
}

void CNAAmbiguity::Amb_Function_0366(H_NODE *pNode)
{
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			if (strcmp(m_pOneChar, "겨") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "겹");
			}
			if (strcmp(m_pOneChar, "매") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "맵");
			}
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
}

void CNAAmbiguity::Amb_Function_0367(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "자");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "자");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
}

void CNAAmbiguity::Amb_Function_0368(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㅇ");
			}
			else
			{
				bIsFind = false;
			}
		}
		else
		{
			bIsFind = false;
		}
	}

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "또한") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "역시") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "같") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "여") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "에게선") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
	}
	if (bIsFind == true  && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "긋");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "긋");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
}

void CNAAmbiguity::Amb_Function_0369(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "다르") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "다른") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "나라");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16);//2,4,16

			CreateNewEndStr(pNode, "면");
			SaveEndBuffer("면");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "나");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18

		CreateNewEndStr(pNode, "라면");
		SaveEndBuffer("라면");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0370(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '1')
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[14] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14, 18);//2,4,14
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "먹") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄹ");
			SaveEndBuffer("ㄹ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0371(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					if (PrevNodestrResult(END_VALUE) == true || IsExistTable(END_VALUE, PREV_STR) == true)
					{
						if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
						{
							if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
								strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에서") == 0 ||
								strcmp(pNode->pPrev->pHToken->subEnding->strResult, "서") == 0)
							{
								bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

								CreateNewEndStr(pNode, "ㄹ");
								SaveEndBuffer("ㄹ");
								pNode->pHToken->subEnding->strFeature[3] = '1';
								pNode->pHToken->subEnding->strFeature[1] = '1';
								pNode->pHToken->subEnding->strFeature[42] = '1';
							}
						}
						if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
						{
							if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "와") == 0 ||
								strcmp(pNode->pPrev->pHToken->subEnding->strResult, "과") == 0 ||
								strcmp(pNode->pPrev->pHToken->subEnding->strResult, "랑") == 0 ||
								strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이랑") == 0 ||
								strcmp(pNode->pPrev->pHToken->subEnding->strResult, "하고") == 0)
							{
								bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

								CreateNewEndStr(pNode, "ㄹ");
								SaveEndBuffer("ㄹ");
								pNode->pHToken->subEnding->strFeature[3] = '1';
								pNode->pHToken->subEnding->strFeature[1] = '1';
								pNode->pHToken->subEnding->strFeature[42] = '1';
							}
						}
					}
					if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
					{
						if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "혼자") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "같이") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "생") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "함께") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "잘") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "평생") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "누르") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "먹") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "마음놓") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "넣") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "견디") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "펴") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "데리") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "돌보") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "짓") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "신선") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "하") == 0)
						{
							bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

							CreateNewEndStr(pNode, "ㄹ");
							SaveEndBuffer("ㄹ");
							pNode->pHToken->subEnding->strFeature[3] = '1';
							pNode->pHToken->subEnding->strFeature[1] = '1';
							pNode->pHToken->subEnding->strFeature[42] = '1';
						}
					}
					if (bIsFirstFind == false)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "사");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					if (PrevNodestrResult(END_VALUE) == true || IsExistTable(END_VALUE, PREV_STR) == true)
					{
						if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
						{
							if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
								strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에서") == 0 ||
								strcmp(pNode->pPrev->pHToken->subEnding->strResult, "서") == 0)
							{
								bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

								CreateNewEndStr(pNode, "ㄹ");
								SaveEndBuffer("ㄹ");
								pNode->pHToken->subEnding->strFeature[3] = '1';
								pNode->pHToken->subEnding->strFeature[1] = '1';
								pNode->pHToken->subEnding->strFeature[42] = '1';
							}
						}
						if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
						{
							if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "와") == 0 ||
								strcmp(pNode->pPrev->pHToken->subEnding->strResult, "과") == 0 ||
								strcmp(pNode->pPrev->pHToken->subEnding->strResult, "랑") == 0 ||
								strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이랑") == 0 ||
								strcmp(pNode->pPrev->pHToken->subEnding->strResult, "하고") == 0)
							{
								bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

								CreateNewEndStr(pNode, "ㄹ");
								SaveEndBuffer("ㄹ");
								pNode->pHToken->subEnding->strFeature[3] = '1';
								pNode->pHToken->subEnding->strFeature[1] = '1';
								pNode->pHToken->subEnding->strFeature[42] = '1';
							}
						}
					}
					if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
					{
						if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "혼자") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "같이") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "생") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "함께") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "잘") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "평생") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "누르") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "먹") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "마음놓") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "넣") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "견디") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "펴") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "데리") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "돌보") == 0 ||
							strcmp(pNode->pPrev->pHToken->subStem->strResult, "짓") == 0)
						{
							bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

							CreateNewEndStr(pNode, "ㄹ");
							SaveEndBuffer("ㄹ");
							pNode->pHToken->subEnding->strFeature[3] = '1';
							pNode->pHToken->subEnding->strFeature[1] = '1';
							pNode->pHToken->subEnding->strFeature[42] = '1';
						}
					}
					if (bIsFirstFind == false)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "사");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
}

void CNAAmbiguity::Amb_Function_0372(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true &&
		ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if ((pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[6] == '1') &&
			pNode->pPrev->pHToken->subStem->strFeature[12] == '0' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true &&
		PrevNodeFeature(STEM_VALUE) == true && ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true &&
			pNode->pPrev->pHToken->subStem->strFeature[12] == '0' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "알") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "모르") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "주");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "주");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "주");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에게") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "주");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0373(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "알");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
}

void CNAAmbiguity::Amb_Function_0374(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "얼");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
	}
}

void CNAAmbiguity::Amb_Function_0375(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");

			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35, S_T145);//2,7,30,35
			CreateNewEndStr(pNode, "아");
			SaveEndBuffer("아");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[28] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "오");

		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35, S_T145);//2,7,30,35

		CreateNewEndStr(pNode, "아");
		SaveEndBuffer("아");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[28] = '1';
	}
}


void CNAAmbiguity::Amb_Function_0376(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에게") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "께") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "게") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이라고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "다고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "하고") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "이르");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 35);//2,7,8,35
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "주") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "놓") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "이르");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 35);//2,7,8,35
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true || PrevNodeFeature(STEM_VALUE) == true)
	{
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "아직") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "기대") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "이르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[58] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "이르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[14] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "이르");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "이르");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 35);//2,7,8,35
	}
}

void CNAAmbiguity::Amb_Function_0377(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "오");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35, S_T145);//2,7,30,35

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "오");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35, S_T145);//2,7,30,35

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "로그") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable065(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35, S_T145);//2,7,30,35

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "오");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35, S_T145);//2,7,30,35

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "오");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35, S_T145);//2,7,30,35

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "오");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35, S_T145);//2,7,30,35

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0378(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "얼굴") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "오르");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true || NextNodeFeature(STEM_VALUE) == true)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "편") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "쪽") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[45] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "오르");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0379(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "아") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (PrevNodestrResult(END_VALUE) == true && NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 &&
			pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
		{
			if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "주");
				bIsFirstFind = SaveStemFeature(pNode, 3, 7);//3,7

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "주");
				bIsFirstFind = SaveStemFeature(pNode, 3, 7);//3,7

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "주");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "주");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0380(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	bool bIsFind1 = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㄷ");
				bIsFind1 = IsJungsungVFunction(pOriginalString, 4, "아");
			}
			else
			{
				bIsFind = false;
				bIsFind1 = false;
			}
		}
		else
		{
			bIsFind = false;
			bIsFind1 = false;
		}
	}

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[39] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				{
					if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
					{
						if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
							strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
							strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
							strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
						{
							CreateStemEndStr(pNode, CREATE_STEM, 3);
							strcpy(pNode->pHToken->subStem->strResult, "알");
							bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

							CreateNewEndStr(pNode, "ㄴ");
							SaveEndBuffer("ㄴ");
							pNode->pHToken->subEnding->strFeature[3] = '1';
							pNode->pHToken->subEnding->strFeature[1] = '1';
							pNode->pHToken->subEnding->strFeature[42] = '1';
						}
					}
					if (bIsFirstFind == false)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
					{
						if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
							strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
							strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
							strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
						{
							CreateStemEndStr(pNode, CREATE_STEM, 3);
							strcpy(pNode->pHToken->subStem->strResult, "알");
							bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

							CreateNewEndStr(pNode, "ㄴ");
							SaveEndBuffer("ㄴ");
							pNode->pHToken->subEnding->strFeature[3] = '1';
							pNode->pHToken->subEnding->strFeature[1] = '1';
							pNode->pHToken->subEnding->strFeature[42] = '1';
						}
					}
					if (bIsFirstFind == false)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다가") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "다보니") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (bIsFind == true && bIsFind1 == true && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "알");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0381(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "기는") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "기도") == 0)
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "거나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0382(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	bool bIsFind1 = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㅇ");
				bIsFind1 = IsJungsungVFunction(pOriginalString, 4, "으");
			}
			else
			{
				bIsFind = false;
				bIsFind1 = false;
			}
		}
		else
		{
			bIsFind = false;
			bIsFind1 = false;
		}
	}

	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[38] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "묻");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "묻");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "묻");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodeFeature(END_VALUE) == true && NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "묻");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "묻");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "묻");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			if (bIsFind == false && bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			if (bIsFind == true && bIsFind1 == true && bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "묻");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에게") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "께") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "묻");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodestrResult(STEM_VALUE) == true || PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
			{
				if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "책임") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "이유") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "까닭") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "원인") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "넌지시") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "뜻") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "묻");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
					}
				}
				if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pPrev->pHToken->subStem->strFeature[3] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "묻");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "묻");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
					}
				}
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "보") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "묻");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0383(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[18] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
}

void CNAAmbiguity::Amb_Function_0384(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken == NULL)
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

																   // Edited by KKH 2004-01-12
					if ((pNode->pHToken->subEnding->strFeature != NULL &&
						pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
						pNode->pHToken->subEnding->strFeature == NULL)
					{
						CreateNewEndStr(pNode, "어");
						SaveEndBuffer("어");
					}
					// Edited by KKH 2004-01-12
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

																   // Edited by KKH 2004-01-12
					if ((pNode->pHToken->subEnding->strFeature != NULL &&
						pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
						pNode->pHToken->subEnding->strFeature == NULL)
					{

						CreateNewEndStr(pNode, "어");
						SaveEndBuffer("어");
					}
					// Edited by KKH 2004-01-12
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0385(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable064(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "의수") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "에서") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "에다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "에다가") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "에") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[12] == '1' ||
						pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
						pNode->pNext->pHToken->subStem->strFeature[25] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "파");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "파");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
					pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0386(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "던") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "운전하") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "몰") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "끌") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "포") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "안") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "세우") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "좀") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "아");
					SaveEndBuffer("아");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "대") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "보") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "주") == 0)
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "아");
					SaveEndBuffer("아");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken == NULL)
				{
					if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
					{
						if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
							strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
						{
							bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

							CreateNewEndStr(pNode, "아");
							SaveEndBuffer("아");
							pNode->pHToken->subEnding->strFeature[3] = '1';
							pNode->pHToken->subEnding->strFeature[1] = '1';
						}
					}
					if (bIsFirstFind == false)
					{
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

						CreateNewEndStr(pNode, "아");
						SaveEndBuffer("아");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "아");
				SaveEndBuffer("아");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}/*
	 if(ThisNodestrResult(END_VALUE) == true && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	 {
	 if(strcmp(pNode->pHToken->subEnding->strResult, "게") == 0 )
	 {
	 if(NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	 {
	 if(strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
	 strcmp(pNode->pNext->pHToken->subStem->strResult, "한") == 0 ||
	 strcmp(pNode->pNext->pHToken->subStem->strResult, "할") == 0 ||
	 strcmp(pNode->pNext->pHToken->subStem->strResult, "함") == 0 ||
	 strcmp(pNode->pNext->pHToken->subStem->strResult, "해") == 0 ||
	 strcmp(pNode->pNext->pHToken->subStem->strResult, "해서") == 0 ||
	 strcmp(pNode->pNext->pHToken->subStem->strResult, "해주") == 0 ||
	 strcmp(pNode->pNext->pHToken->subStem->strResult, "되") == 0 )
	 bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	 }
	 }
	 }*/
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "다") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "기") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "숨") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "발") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "공") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "다") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "기") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "숨") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "다") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "기") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "숨") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "운전") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0387(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "천둥") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "폭풍우") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "번개") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "눈보라") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "파도") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "경") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "초") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "치");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if ((pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1') &&
						pNode->pNext->pHToken->subStem->strFeature[25] == '0')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "치");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "치");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "치");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "수") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "숫자") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "수") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "숫자") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "치");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄹ");
		SaveEndBuffer("ㄹ");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0388(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "눈") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "붕대") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "팔") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "허리") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "다리") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "몸") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "필름") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "태엽") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "끈") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "감");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 39);//2,7,8,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strResult == NULL)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "야") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0389(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strResult == NULL)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[45] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "가");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "시");
			SaveEndBuffer("시");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[45] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable055(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "채") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "점점") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "완전히") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "싹") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "가");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

						CreateNewEndStr(pNode, "시");
						SaveEndBuffer("시");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[45] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "가");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

						CreateNewEndStr(pNode, "시");
						SaveEndBuffer("시");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[45] = '1';
					}
				}
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "대로") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "가");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

					CreateNewEndStr(pNode, "시");
					SaveEndBuffer("시");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[45] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "가");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "시");
			SaveEndBuffer("시");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[45] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "가");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "시");
			SaveEndBuffer("시");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[45] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "가");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

		CreateNewEndStr(pNode, "시");
		SaveEndBuffer("시");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[45] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0390(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "따");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "따");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "이") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "그") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "저") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "데") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "따");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "따");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
}

void CNAAmbiguity::Amb_Function_0391(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "것");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

					CreateNewEndStr(pNode, "이");
					SaveEndBuffer("이");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[4] = '1';
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "시는") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "신") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ다는") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는다는") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "었다는") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "라는") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "것");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

					CreateNewEndStr(pNode, "이");
					SaveEndBuffer("이");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[4] = '1';
				}
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "별") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "다른") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "모든") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "것");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

					CreateNewEndStr(pNode, "이");
					SaveEndBuffer("이");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[4] = '1';
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				{
					if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
					{
						if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
							pNode->pNext->pHToken->subStem->strFeature[5] == '1')
							bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
					}
					if (bIsFirstFind == false)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "야") == 0)
		{
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "것");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

					CreateNewEndStr(pNode, "이");
					SaveEndBuffer("이");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				{
					if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
					{
						if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
							pNode->pNext->pHToken->subStem->strFeature[5] == '1')
							bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
					}
					if (bIsFirstFind == false)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}


void CNAAmbiguity::Amb_Function_0392(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					{
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "꼭") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "일부러") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0393(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "내");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				InitBuffer();
				pOriginalString = pNode->pHToken->strSource;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "내");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				InitBuffer();
				pOriginalString = pNode->pHToken->strSource;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "내");
				bIsFirstFind = SaveStemFeature(pNode, 3, 7);//3,7

				InitBuffer();
				pOriginalString = pNode->pHToken->strSource;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "내");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				InitBuffer();
				pOriginalString = pNode->pHToken->strSource;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "내");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			InitBuffer();
			pOriginalString = pNode->pHToken->strSource;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
			nLen = strlen(m_pJongChar);
			CreateNewEndStr(pNode, m_pJongChar);
			SaveEndBuffer(m_pJongChar);
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "내");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				pOriginalString = pNode->pHToken->strSource;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "내");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				pOriginalString = pNode->pHToken->strSource;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				nLen = strlen(m_pJongChar);
				CreateNewEndStr(pNode, m_pJongChar);
				SaveEndBuffer(m_pJongChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "내");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		pOriginalString = pNode->pHToken->strSource;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
		nLen = strlen(m_pJongChar);
		CreateNewEndStr(pNode, m_pJongChar);
		SaveEndBuffer(m_pJongChar);
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}


void CNAAmbiguity::Amb_Function_0394(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "끼");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "끼");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "끼");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "끼");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "끼");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
					pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "끼");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "끼");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "끼");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "끼");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "끼");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0395(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
		if (ThisNodeNull(STEM_VALUE) == false && bIsFirstFind == false)
		{
			if (pNode->pHToken->bSubCompCreate == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
		if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken == NULL)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "나");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "나");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable073(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "나");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "주") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "달") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "달라") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "주세") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "보") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "보세") == 0)
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "게") == 0)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "한") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "할") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "함") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "해") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "해서") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "해주") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "되") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "나");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

				CreateNewEndStr(pNode, "에");
				SaveEndBuffer("에");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "가") == 0)
		{
			if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken == NULL)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "흐르") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pPrev->pHToken->subStem->strFeature[17] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable073(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0396(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '1')
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
}

void CNAAmbiguity::Amb_Function_0397(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "은") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "보");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "보");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "보");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "보");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "보");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "논고") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "회의") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "계약서") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "제품") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "사용권") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "합의서") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "필자") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "대하") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "관하") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "本") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "성") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "姓") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "보");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0398(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "구");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

			CreateNewEndStr(pNode, "가");
			SaveEndBuffer("가");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "구");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

			CreateNewEndStr(pNode, "가");
			SaveEndBuffer("가");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "숫자") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "수") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "구");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6

			CreateNewEndStr(pNode, "가");
			SaveEndBuffer("가");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "구");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "가");
		SaveEndBuffer("가");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0399(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[25] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable059(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true || PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "제") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "로") == 0 &&
			(pNode->pPrev->pHToken->subStem->strFeature[2] == '1' &&
				pNode->pPrev->pHToken->subStem->strFeature[5] == '0'))
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ다는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는다는") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strResult == NULL)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "졸");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "졸");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "졸");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
	}
}

void CNAAmbiguity::Amb_Function_0400(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "일하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "일하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "사전") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "관계") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "양국") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "일하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "일하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "일하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "일하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "일하");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0401(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[14] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "머리") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "무겁") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "힘들") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "이");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "이");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (NextNodeNull(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
			{
				if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken == NULL)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pNext->pHToken->subStem->strResult, "의") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "일");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "머리") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "무겁") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "흔들") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "이");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
					}
				}
				if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "이");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
					}
				}
				if (bIsFirstFind == false)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "일");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
				}
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strFeature, "다") == 0)
			{
				if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "머리") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "무겁") == 0 ||
						strcmp(pNode->pPrev->pHToken->subStem->strResult, "흔들") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "이");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
					}
				}
				if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "이");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
					}
				}
				if (bIsFirstFind == false)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "일");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
				}
			}
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0402(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "하루") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "열흘") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "불");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "불");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult = NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[3] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "불");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "불");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0403(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "절절") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "팔십일") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
}

void CNAAmbiguity::Amb_Function_0404(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	CreateStemEndStr(pNode, CREATE_STEM, 9);
	strcpy(pNode->pHToken->subStem->strResult, "만들어지");
	bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

	CreateNewEndStr(pNode, "ㄴ");
	SaveEndBuffer("ㄴ");
	pNode->pHToken->subEnding->strFeature[1] = '1';
	pNode->pHToken->subEnding->strFeature[3] = '1';
	pNode->pHToken->subEnding->strFeature[42] = '1';
}

void CNAAmbiguity::Amb_Function_0405(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "열");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "열");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "열");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if ((pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[25] == '1') ||
						pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
						pNode->pNext->pHToken->subStem->strFeature[12] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable059(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
				}
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "평균") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[22] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "열");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[25] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable059(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[7] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "열");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "열");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0406(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 4, 3, 25);//2,3,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 4, 3, 25);//2,3,25
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "한") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "할") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "해") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[25] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable059(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable064(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "뿐") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "때문") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "밖") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "줄") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[3] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					{
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
}

void CNAAmbiguity::Amb_Function_0407(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "아니") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "안") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true || NextNodeNull(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[27] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "외");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "지");
				SaveEndBuffer("지");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "외");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "지");
			SaveEndBuffer("지");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "말") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "말라") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "마") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "외");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "지");
				SaveEndBuffer("지");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable060(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0408(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "가물");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "가물");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "날") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "날씨") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "땅") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "것") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "강변") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 5);
					strcpy(pNode->pHToken->subStem->strResult, "가물");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0409(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(END_VALUE) == true && PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if ((strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0) &&
			pNode->pPrev->pHToken->subStem->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 30, 35, 39);//2,30,35,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "와") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "기다리") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "기대하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "고대하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "시작하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "전") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "직전") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "위하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "싫") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "어렵") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 30, 35, 39);//2,30,35,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "로") == 0 &&
			strcmp(pNode->pNext->pHToken->subStem->strResult, "되") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 30, 35, 39);//2,30,35,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "러") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에서") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 30, 35, 39);//2,30,35,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "노려보") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "꺾이") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "발동하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "치솟") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "부리") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "뻗치") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "띠") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "생기") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "치밀") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "나") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "내") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "병적기록표") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "기록표") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 30, 35, 39);//2,30,35,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "에") == 0 &&
			strcmp(pNode->pNext->pHToken->subStem->strResult, "따르") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "오");
		bIsFirstFind = SaveStemFeature(pNode, 2, 30, 35, 39);//2,30,35,39

		CreateNewEndStr(pNode, "기");
		SaveEndBuffer("기");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0410(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "한") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "미") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "러") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
		{
			if (PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "것") == 0)
		{
			if (PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[7] == '1' &&
			(strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "던") == 0))
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "이") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "그") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "저") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "다음") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4
}

void CNAAmbiguity::Amb_Function_0411(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "파랗");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "파랗");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "지") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "파랗");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "빛") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "빛깔") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "색") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "색깔") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "파랗");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken == NULL)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "파랗");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0412(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지나") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지도") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "진") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "질") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "지만") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "시지") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "말");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27

			CreateNewEndStr(pNode, "시");
			SaveEndBuffer("시");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[45] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "염려") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "오해") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "걱정") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "실망") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "말씀") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "부끄럽") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "어렵") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "말");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27

			CreateNewEndStr(pNode, "시");
			SaveEndBuffer("시");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[45] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "오") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "우") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "말");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 27);//2,7,8,27

			CreateNewEndStr(pNode, "시");
			SaveEndBuffer("시");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[45] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0413(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable055(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "가시");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "신");
				SaveEndBuffer("신");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[45] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "신");
				SaveEndBuffer("신");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[45] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "그룹") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "중") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "출신") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "가");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

					CreateNewEndStr(pNode, "신");
					SaveEndBuffer("신");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[45] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "가");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

						CreateNewEndStr(pNode, "신");
						SaveEndBuffer("신");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[45] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "가");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

						CreateNewEndStr(pNode, "신");
						SaveEndBuffer("신");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[45] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13])
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] ||
			pNode->pPrev->pHToken->subEnding->strFeature[42])
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "가");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

		CreateNewEndStr(pNode, "신");
		SaveEndBuffer("신");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[45] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0414(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "타");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "면");
				SaveEndBuffer("면");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "타");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "면");
				SaveEndBuffer("면");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "타");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

		CreateNewEndStr(pNode, "면");
		SaveEndBuffer("면");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0415(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "차");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "고");
			SaveEndBuffer("고");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "바람") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "공기") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "물") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "몸") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "온몸") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "손발") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "차");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

			CreateNewEndStr(pNode, "고");
			SaveEndBuffer("고");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "앞") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "문간") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "문") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "차");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "고");
		SaveEndBuffer("고");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0416(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "아니") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "안") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true || NextNodeNull(STEM_VALUE) == true || NextNodeFeature(STEM_VALUE) == true)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "말") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "말라") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "마") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "모르") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "길");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "지");
				SaveEndBuffer("지");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "길");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

			CreateNewEndStr(pNode, "지");
			SaveEndBuffer("지");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[27] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "길");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "지");
				SaveEndBuffer("지");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "길");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

		CreateNewEndStr(pNode, "지");
		SaveEndBuffer("지");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0417(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "고");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "아");
				SaveEndBuffer("아");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "고");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "아");
				SaveEndBuffer("아");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "아니") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "같") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7])
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "고");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "아");
					SaveEndBuffer("아");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "게") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "고");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "아");
					SaveEndBuffer("아");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "고");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "아");
				SaveEndBuffer("아");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "먹") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "고");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "아");
			SaveEndBuffer("아");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "고");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "아");
		SaveEndBuffer("아");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0418(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "조화") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "교체") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "차이") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "글자") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "모으");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 39);//2,7,8,39

			CreateNewEndStr(pNode, "ㅁ");
			SaveEndBuffer("ㅁ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "곡") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "집") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "모으");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 39);//2,7,8,39

			CreateNewEndStr(pNode, "ㅁ");
			SaveEndBuffer("ㅁ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "한글") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "자음") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "머리글자") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "낱말") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "글자") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "이중") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "양성") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "음성") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "원순") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "평순") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "이중") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "우리말") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "표준어") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "모으");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 39);//2,7,8,39

				CreateNewEndStr(pNode, "ㅁ");
				SaveEndBuffer("ㅁ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "모으");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 39);//2,7,8,39

		CreateNewEndStr(pNode, "ㅁ");
		SaveEndBuffer("ㅁ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0419(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "으로써") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 39);//2,7,8,39

			CreateNewEndStr(pNode, "ㅁ");
			SaveEndBuffer("ㅁ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "지") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "들어가") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "들이") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "위원장") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "의원") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "하");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 39);//2,7,8,39

		CreateNewEndStr(pNode, "ㅁ");
		SaveEndBuffer("ㅁ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0420(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL &&
			(pNode->pNext->pHToken->subStem->strFeature[7] &&
				pNode->pNext->pHToken->subStem->strFeature[27]))
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "노선") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
}

void CNAAmbiguity::Amb_Function_0421(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken == NULL)
		{
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를"))
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "죄");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "다");
					SaveEndBuffer("다");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
				}
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "죄");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "다");
				SaveEndBuffer("다");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "죄");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "다");
			SaveEndBuffer("다");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
}

void CNAAmbiguity::Amb_Function_0422(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "되") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true || NextNodestrResult(STEM_VALUE) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
						pNode->pNext->pHToken->subStem->strFeature[12] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pNext->pHToken->subStem->strResult, "세로") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "전시장") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "전시회") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "약") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "넓이") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "방향") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "길이") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}

			}
			if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pPrev->pHToken->subEnding->strResult == NULL)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "가");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					CreateNewEndStr(pNode, "로");
					SaveEndBuffer("로");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[2] = '1';
				}
			}
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '0')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "로");
				SaveEndBuffer("로");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0423(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	int nLen = 0;
	char* pOriginalString = NULL;

	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "출신") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "대학교") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "교수") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "선생님") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "학생") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "의") == 0)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "달리") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "다르") == 0)
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->strSource;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);
					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					nLen = strlen(m_pOneChar);
					CreateNewEndStr(pNode, m_pOneChar);
					SaveEndBuffer(m_pOneChar);
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[8] = '1';
				}
			}
			if (PrevNodestrResult(END_VALUE) == true || IsExistTable(END_VALUE, PREV_STR) == true)
			{
				if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "나") == 0)
					{
						InitBuffer();
						pOriginalString = pNode->pHToken->strSource;
						nTotalLen = strlen(pOriginalString);
						GetOneChar(pOriginalString, nTotalLen, nTotalLen);
						MoveLeftWordCount(pOriginalString, nTotalLen);
						GetStartCountChar(pOriginalString, nTotalLen);
						nLen = strlen(m_pStartCountChar);
						CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
						strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

						nLen = strlen(m_pOneChar);
						CreateNewEndStr(pNode, m_pOneChar);
						SaveEndBuffer(m_pOneChar);
						pNode->pHToken->subEnding->strFeature[2] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[8] = '1';
					}
				}
				if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "와") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "과") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "랑") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이랑") == 0 ||
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "하고") == 0)
					{
						InitBuffer();
						pOriginalString = pNode->pHToken->strSource;
						nTotalLen = strlen(pOriginalString);
						GetOneChar(pOriginalString, nTotalLen, nTotalLen);
						MoveLeftWordCount(pOriginalString, nTotalLen);
						GetStartCountChar(pOriginalString, nTotalLen);
						nLen = strlen(m_pStartCountChar);
						CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
						strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

						nLen = strlen(m_pOneChar);
						CreateNewEndStr(pNode, m_pOneChar);
						SaveEndBuffer(m_pOneChar);
						pNode->pHToken->subEnding->strFeature[2] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[8] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->strSource;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);
		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		nLen = strlen(m_pOneChar);
		CreateNewEndStr(pNode, m_pOneChar);
		SaveEndBuffer(m_pOneChar);
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[8] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0424(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || PrevNodestrResult(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[58] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "공전") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "자전") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "회전") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "운동") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "월경") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "정도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에게") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "주");
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "적") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "주");
		bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

		CreateNewEndStr(pNode, "기");
		SaveEndBuffer("기");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0425(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	int nLen = 0;
	char* pOriginalString = NULL;

	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "없") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "등") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "성실") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->strSource;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "맨") == 0)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->strSource;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0426(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "속") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "애");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "도");
		SaveEndBuffer("도");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0427(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[58] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[22] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "불");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "과");
		SaveEndBuffer("과");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[8] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0428(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "열");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 39);//2,7,8,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "문") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "창문") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "지갑") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "뚜껑") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "냉장고") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "테이블") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "열");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 39);//2,7,8,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "시작하") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "열");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 39);//2,7,8,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0429(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "옥조") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "금");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "과");
		SaveEndBuffer("과");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[8] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0430(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(END_VALUE) == true)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(END_VALUE) == true)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "기울");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 39);//2,7,8,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "시작하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "때문") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "쉽") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "기울");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 39);//2,7,8,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	else
	{
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
}

void CNAAmbiguity::Amb_Function_0431(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "드리") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "주") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "중") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "보양") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "인삼") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "보");
		bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

		CreateNewEndStr(pNode, "기");
		SaveEndBuffer("기");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0432(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "호");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "호");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "호식") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "호");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0433(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[2] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 5);
						strcpy(pNode->pHToken->subStem->strResult, "숨기");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 5);
						strcpy(pNode->pHToken->subStem->strResult, "숨기");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄹ");
						SaveEndBuffer("ㄹ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "숨");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 39);//2,7,8,39

				CreateNewEndStr(pNode, "길");
				SaveEndBuffer("길");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeFeature(STEM_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "숨기");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "숨기");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "숨기");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄹ");
		SaveEndBuffer("ㄹ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0434(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "이만") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "저");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

		CreateNewEndStr(pNode, "만");
		SaveEndBuffer("만");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0435(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true || PrevNodestrResult(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
		{
			if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pPrev->pHToken->subEnding->strResult == NULL)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "중");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

					CreateNewEndStr(pNode, "의");
					SaveEndBuffer("의");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[7] = '1';
				}
			}
			if (PrevNodestrResult(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "이") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "그") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "저") == 0 &&
					pNode->pPrev->pHToken->subEnding->strResult == NULL)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "중");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

					CreateNewEndStr(pNode, "의");
					SaveEndBuffer("의");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[7] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true &&
					pNode->pPrev->pHToken->subEnding->strResult == NULL)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "중");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

					CreateNewEndStr(pNode, "의");
					SaveEndBuffer("의");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[7] = '1';
				}
			}
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "중");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0436(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "울");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "울");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "울");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "울");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "울");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0437(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(END_VALUE) == true && PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			pNode->pPrev->pHToken->subStem->strFeature[7] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "터");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "터");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0438(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "일");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25 

				CreateNewEndStr(pNode, "이ㄴ");
				SaveEndBuffer("이ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "일");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25 

				CreateNewEndStr(pNode, "이ㄴ");
				SaveEndBuffer("이ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
	}
	if (IsExistTable(END_VALUE, THIS_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable001(pNode->pHToken->subEnding->strResult, GET_STEM) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "일");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이ㄴ");
			SaveEndBuffer("이ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[3] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "일");
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

						CreateNewEndStr(pNode, "이ㄴ");
						SaveEndBuffer("이ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
						pNode->pHToken->subEnding->strFeature[26] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "일");
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

						CreateNewEndStr(pNode, "이ㄴ");
						SaveEndBuffer("이ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
						pNode->pHToken->subEnding->strFeature[26] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "일");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이ㄴ");
			SaveEndBuffer("이ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "일");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이ㄴ");
			SaveEndBuffer("이ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0439(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으라고") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "어르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ들");
				SaveEndBuffer("ㄴ들");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
}

void CNAAmbiguity::Amb_Function_0440(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "싣");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[3] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "싣");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
					}
				}
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pNext->pHToken->subStem->strResult, "듯하") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "만하") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "싣");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "싣");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "싣");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
}

void CNAAmbiguity::Amb_Function_0441(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "요") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "두");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7

			CreateNewEndStr(pNode, "세");
			SaveEndBuffer("세");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken == NULL)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "두");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7);//2,7

			CreateNewEndStr(pNode, "세");
			SaveEndBuffer("세");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable059(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
}

void CNAAmbiguity::Amb_Function_0442(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (IsExistTable(END_VALUE, THIS_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable001(pNode->pHToken->subEnding->strResult, GET_STEM) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "정당");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이ㄴ");
			SaveEndBuffer("이ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 5);
						strcpy(pNode->pHToken->subStem->strResult, "정당");
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

						CreateNewEndStr(pNode, "이ㄴ");
						SaveEndBuffer("이ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
						pNode->pHToken->subEnding->strFeature[26] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 5);
						strcpy(pNode->pHToken->subStem->strResult, "정당");
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

						CreateNewEndStr(pNode, "이ㄴ");
						SaveEndBuffer("이ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
						pNode->pHToken->subEnding->strFeature[26] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "정당");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "이ㄴ");
		SaveEndBuffer("이ㄴ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
		pNode->pHToken->subEnding->strFeature[26] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0443(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "등");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 25);//2,4,25

				CreateNewEndStr(pNode, "과");
				SaveEndBuffer("과");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[8] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "등");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 25);//2,4,25

				CreateNewEndStr(pNode, "과");
				SaveEndBuffer("과");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[8] = '1';
			}
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "시험") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (PrevNodeFeature(STEM_VALUE) == true && PrevNodestrResult(END_VALUE) == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pPrev->pHToken->subEnding->strResult == NULL)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "등");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

					CreateNewEndStr(pNode, "과");
					SaveEndBuffer("과");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[8] = '1';
				}
			}
			if (PrevNodestrResult(STEM_VALUE) == true && PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "하") == 0 &&
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "등");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

					CreateNewEndStr(pNode, "과");
					SaveEndBuffer("과");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[8] = '1';
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[45] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "등");
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

						CreateNewEndStr(pNode, "과");
						SaveEndBuffer("과");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[2] = '1';
						pNode->pHToken->subEnding->strFeature[8] = '1';
					}
				}
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pNext->pHToken->subStem->strResult, "팔") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "등");
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

						CreateNewEndStr(pNode, "과");
						SaveEndBuffer("과");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[2] = '1';
						pNode->pHToken->subEnding->strFeature[8] = '1';
					}
				}
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "등");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "과");
				SaveEndBuffer("과");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[8] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "의") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			{
				if (PrevNodeFeature(STEM_VALUE) == true && PrevNodestrResult(END_VALUE) == false && bIsFirstFind == false)
				{
					if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pPrev->pHToken->subEnding->strResult == NULL)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "등");
						bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

						CreateNewEndStr(pNode, "과");
						SaveEndBuffer("과");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[2] = '1';
						pNode->pHToken->subEnding->strFeature[8] = '1';
					}
				}
				if (PrevNodestrResult(STEM_VALUE) == true && PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "하") == 0 &&
						strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "등");
						bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

						CreateNewEndStr(pNode, "과");
						SaveEndBuffer("과");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[2] = '1';
						pNode->pHToken->subEnding->strFeature[8] = '1';
					}
				}
				if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
				{
					if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
					{
						if (pNode->pNext->pHToken->subStem->strFeature[45] == '1')
						{
							CreateStemEndStr(pNode, CREATE_STEM, 3);
							strcpy(pNode->pHToken->subStem->strResult, "등");
							bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

							CreateNewEndStr(pNode, "과");
							SaveEndBuffer("과");
							pNode->pHToken->subEnding->strFeature[1] = '1';
							pNode->pHToken->subEnding->strFeature[2] = '1';
							pNode->pHToken->subEnding->strFeature[8] = '1';
						}
					}
					if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
					{
						if (strcmp(pNode->pNext->pHToken->subStem->strResult, "팔") == 0)
						{
							CreateStemEndStr(pNode, CREATE_STEM, 3);
							strcpy(pNode->pHToken->subStem->strResult, "등");
							bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

							CreateNewEndStr(pNode, "과");
							SaveEndBuffer("과");
							pNode->pHToken->subEnding->strFeature[1] = '1';
							pNode->pHToken->subEnding->strFeature[2] = '1';
							pNode->pHToken->subEnding->strFeature[8] = '1';
						}
					}
				}
				if (bIsFirstFind == false)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "등");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					CreateNewEndStr(pNode, "과");
					SaveEndBuffer("과");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[8] = '1';
				}
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0444(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "주");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 25);//2,4,25

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "주");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 25);//2,4,25

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable068(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "주장") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "집중") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "사항") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "이후") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "체계") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "강화") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "등") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "주");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					CreateNewEndStr(pNode, "의");
					SaveEndBuffer("의");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[7] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0445(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "풀");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "풀");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0446(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "나") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "앉") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "졸");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "고");
			SaveEndBuffer("고");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "라는") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "졸");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "고");
			SaveEndBuffer("고");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "졸");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "고");
			SaveEndBuffer("고");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "졸");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "고");
		SaveEndBuffer("고");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[8] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0447(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true || ThisNodeFeature(END_VALUE) == true)
	{
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "울");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
					}
				}
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pNext->pHToken->subStem->strResult, "듯하") == 0)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "울");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "울");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
					}
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			else
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "울");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,351';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "우향") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "좌") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "수") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] &&
					pNode->pNext->pHToken->subStem->strFeature[8])
					bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "울");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "니") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "울");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
			}
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "울");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
	}
}

void CNAAmbiguity::Amb_Function_0448(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "오경") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "삼경") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "선생님") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "사");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "서");
					SaveEndBuffer("서");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
				}
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "사");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "서");
				SaveEndBuffer("서");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "사");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "서");
			SaveEndBuffer("서");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "사");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "서");
		SaveEndBuffer("서");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0449(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					{
						CreateStemEndStr(pNode, CREATE_STEM, 5);
						strcpy(pNode->pHToken->subStem->strResult, "나서");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 5);
						strcpy(pNode->pHToken->subStem->strResult, "나서");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

						CreateNewEndStr(pNode, "ㄴ");
						SaveEndBuffer("ㄴ");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
						pNode->pHToken->subEnding->strFeature[42] = '1';
					}
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "고") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "나");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "선");
					SaveEndBuffer("선");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
				}
			}
			if (NextNodestrResult(STEM_VALUE) == true)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "계단") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "은하") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "무늬") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "정벌시") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "나서");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "나서");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "나서");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "나서");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0450(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "풀");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "려");
			SaveEndBuffer("려");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "풀리");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

															// Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "풀");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "려");
			SaveEndBuffer("려");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "요") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "풀리");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

															// Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "면") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "풀");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "려");
			SaveEndBuffer("려");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "풀리");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

														// Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKH 2004-01-12
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0451(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "니");
			SaveEndBuffer("니");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "퇴적") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "활성") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "밑바닥") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "오");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "니");
				SaveEndBuffer("니");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "오");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

		CreateNewEndStr(pNode, "니");
		SaveEndBuffer("니");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0452(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "아") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "대") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "데") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "보");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "건");
			SaveEndBuffer("건");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "건") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "보");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "건");
				SaveEndBuffer("건");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "번") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "어떻게") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "보");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "건");
				SaveEndBuffer("건");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "만") == 0)
		{
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "건") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "보");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "건");
					SaveEndBuffer("건");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
				}
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "번") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "어떻게") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "보");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "건");
					SaveEndBuffer("건");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0453(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "싣");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "은");
				SaveEndBuffer("은");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "싣");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "은");
				SaveEndBuffer("은");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true || PrevNodestrResult(STEM_VALUE) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "실");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "은");
				SaveEndBuffer("은");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[5] = '1';
			}
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "득") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "실");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "은");
				SaveEndBuffer("은");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[5] = '1';
			}
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "실");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "은");
			SaveEndBuffer("은");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "알차") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "실");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "은");
			SaveEndBuffer("은");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
	}
	if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken == NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
		{
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "싣");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "은");
					SaveEndBuffer("은");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "게") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "싣");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "은");
					SaveEndBuffer("은");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pPrev->pHToken->subEnding->strResult == NULL)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "싣");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "은");
					SaveEndBuffer("은");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
}

void CNAAmbiguity::Amb_Function_0454(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "나");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

				CreateNewEndStr(pNode, "와");
				SaveEndBuffer("와");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[8] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "나");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

				CreateNewEndStr(pNode, "와");
				SaveEndBuffer("와");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[8] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "나오");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "아");
				SaveEndBuffer("아");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "나오");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "아");
				SaveEndBuffer("아");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken == NULL)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "나오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "아");
			SaveEndBuffer("아");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "함께") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "같") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "다르") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "통하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "같이") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "같이하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "매한가지") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "똑같") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "닮") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "남") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "동등하") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

			CreateNewEndStr(pNode, "와");
			SaveEndBuffer("와");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "주") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "버리") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "보") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "달") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "나오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "아");
			SaveEndBuffer("아");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true || PrevNodestrResult(STEM_VALUE) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[51] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "나오");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "아");
				SaveEndBuffer("아");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "이리") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "모두") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "나오");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "아");
				SaveEndBuffer("아");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true || PrevNodeNull(STEM_VALUE) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "나");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

				CreateNewEndStr(pNode, "와");
				SaveEndBuffer("와");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[8] = '1';
			}
		}
		if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

			CreateNewEndStr(pNode, "와");
			SaveEndBuffer("와");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

			CreateNewEndStr(pNode, "와");
			SaveEndBuffer("와");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에서") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "나오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "아");
			SaveEndBuffer("아");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[4] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "나오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "아");
			SaveEndBuffer("아");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "나");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

			CreateNewEndStr(pNode, "와");
			SaveEndBuffer("와");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "나오");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "아");
		SaveEndBuffer("아");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0455(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "나르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "나르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "짐") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "싣") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "가마니") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "나르");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8


			CreateNewEndStr(pNode, "ㄹ");
			SaveEndBuffer("ㄹ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "나");

		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18

		CreateNewEndStr(pNode, "를");
		SaveEndBuffer("를");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[6] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0456(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	int nLen = 0;
	char* pOriginalString = NULL;

	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '1')
			{
				bIsFirstFind = true;
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				MinusTwoStr(m_pStartCountChar, m_pOneChar, nTotalLen);
				nLen = strlen(m_pMinusTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pMinusTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);
		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);

		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 16, 17, 18);//2,4,5,16,17,18

		CreateNewEndStr(pNode, "를");
		SaveEndBuffer("를");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[6] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0457(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "오너");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "라");
			SaveEndBuffer("라");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "오너");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "라");
			SaveEndBuffer("라");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "오");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

		CreateNewEndStr(pNode, "너라");
		SaveEndBuffer("너라");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0458(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	CreateStemEndStr(pNode, CREATE_STEM, 3);
	strcpy(pNode->pHToken->subStem->strResult, "열");
	bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

	CreateNewEndStr(pNode, "지");
	SaveEndBuffer("지");
	pNode->pHToken->subEnding->strFeature[1] = '1';
	pNode->pHToken->subEnding->strFeature[3] = '1';
}


void CNAAmbiguity::Amb_Function_0459(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bIsFirstFind = true;
	CreateStemEndStr(pNode, CREATE_STEM, 3);
	strcpy(pNode->pHToken->subStem->strResult, "것");
	pNode->pHToken->subStem->strFeature[3] = '1';
	pNode->pHToken->subStem->strFeature[4] = '1';
	pNode->pHToken->subStem->strFeature[S_T144] = '1';

	CreateNewEndStr(pNode, "이라고");
	SaveEndBuffer("이라고");
	pNode->pHToken->subEnding->strFeature[1] = '1';
	pNode->pHToken->subEnding->strFeature[3] = '1';
	pNode->pHToken->subEnding->strFeature[26] = '1';
	pNode->pHToken->subEnding->strFeature[38] = '1';
}

void CNAAmbiguity::Amb_Function_0460(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "일정") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "예정") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "기간") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "부시") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "체하");
			pNode->pHToken->subStem->strFeature[7] = '1';
			pNode->pHToken->subStem->strFeature[3] = '1';

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "체하");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0461(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken == NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[S_T138] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "하");

		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T145);//2,7,8

		CreateNewEndStr(pNode, "지만");
		SaveEndBuffer("지만");

		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0462(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken == NULL)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "적");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "기습") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "공격") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "출현") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "진") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "적");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "어리") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "젊") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "적");
			pNode->pHToken->subStem->strFeature[3] = '1';
			pNode->pHToken->subStem->strFeature[4] = '1';

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
			pNode->pPrev->pHToken->subEnding->strResult == NULL)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "적");
			pNode->pHToken->subStem->strFeature[3] = '1';
			pNode->pHToken->subStem->strFeature[4] = '1';

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "일") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "적");
			pNode->pHToken->subStem->strFeature[3] = '1';
			pNode->pHToken->subStem->strFeature[4] = '1';

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "같") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "적");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "의");
		SaveEndBuffer("의");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[7] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0463(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "비");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "도");
		SaveEndBuffer("도");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0464(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "이르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "이르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "이");
			pNode->pHToken->subStem->strFeature[3] = '1';
			pNode->pHToken->subStem->strFeature[4] = '1';

			CreateNewEndStr(pNode, "를");
			SaveEndBuffer("를");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "닦") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "뽑") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "빼") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "이");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "를");
			SaveEndBuffer("를");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "이");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

			CreateNewEndStr(pNode, "를");
			SaveEndBuffer("를");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[58] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "이르");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

			CreateNewEndStr(pNode, "ㄹ");
			SaveEndBuffer("ㄹ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[58] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "이르");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

			CreateNewEndStr(pNode, "ㄹ");
			SaveEndBuffer("ㄹ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "이르");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄹ");
			SaveEndBuffer("ㄹ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "이");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		pNode->pHToken->subStem->strFeature[5] = '1';

		CreateNewEndStr(pNode, "를");
		SaveEndBuffer("를");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[6] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0465(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[3] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "지르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "뻔하") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "지르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "지르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "지르");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄹ");
			SaveEndBuffer("ㄹ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "지");
			pNode->pHToken->subStem->strFeature[3] = '1';
			pNode->pHToken->subStem->strFeature[4] = '1';

			CreateNewEndStr(pNode, "를");
			SaveEndBuffer("를");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "지");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "를");
			SaveEndBuffer("를");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "지");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "를");
			SaveEndBuffer("를");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "지");
		pNode->pHToken->subStem->strFeature[3] = '1';
		pNode->pHToken->subStem->strFeature[4] = '1';

		CreateNewEndStr(pNode, "를");
		SaveEndBuffer("를");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[6] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0466(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "젓");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "젓");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodeNull(STEM_VALUE) == true || PrevNodestrResult(STEM_VALUE) == true || PrevNodeFeature(STEM_VALUE) == true)
	{
		if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "실은") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[5] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[14] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "잠깐만") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "멀") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
	}
	if (PrevNodeFeature(STEM_VALUE) == true || PrevNodestrResult(STEM_VALUE) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "젓");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "잘") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "노") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "젓");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "젓");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

													   // Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKH 2004-01-12
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0467(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
				if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (strcmp(pNode->pNext->pHToken->subStem->strResult, "통지표") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "중") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "등") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "우수자") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "사이") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "평가") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "순위") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "향상") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "분포") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "부진") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "평점") == 0 ||
						strcmp(pNode->pNext->pHToken->subStem->strResult, "반영") == 0)
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
				}
			}
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable069(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "성");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "적");
				SaveEndBuffer("적");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[24] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
		{
			if (ThisNodestrResult(END_VALUE) == true)
			{
				if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0)
				{
					if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
					{
						if (IsExistTable069(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
							bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
					}
					if (bIsFirstFind == false)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "성");
						bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

						CreateNewEndStr(pNode, "적");
						SaveEndBuffer("적");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[2] = '1';
						pNode->pHToken->subEnding->strFeature[24] = '1';
					}
				}
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "육체") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "성");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					CreateNewEndStr(pNode, "적");
					SaveEndBuffer("적");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[24] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0468(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "동");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0469(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (ThisNodestrResult(STEM_VALUE) == true && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subStem->strResult, "식이") == 0 &&
			strcmp(pNode->pNext->pHToken->subStem->strResult, "요법") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(STEM_VALUE) == true && PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subStem->strResult, "몰이") == 0 &&
			pNode->pPrev->pHToken->subStem->strFeature[S_Ani] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);
		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "이");
		SaveEndBuffer("이");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[4] = '1';
	}
	if (bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);
		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "이");
		SaveEndBuffer("이");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[26] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0470(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken == NULL)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "걸");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "세");
				SaveEndBuffer("세");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "요") == 0)
		{
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
				{
					bIsFirstFind = true;
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "걸");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "세");
					SaveEndBuffer("세");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
				}
			}
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
				{
					if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
					{
						if (IsExistTable060(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
							bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
					}
					if (bIsFirstFind == false)
					{
						bIsFirstFind = true;
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "걸");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

						CreateNewEndStr(pNode, "세");
						SaveEndBuffer("세");
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[3] = '1';
					}
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0471(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable063(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "자");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' ||
					pNode->pNext->pHToken->subStem->strFeature[10] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "속") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "가운데") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "잘");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "잘");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0472(H_NODE *pNode)
{

	bool bIsFirstFind = false;
	bool bIsFind = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㄴ");
			}
			else
			{
				bIsFind = false;
			}
		}
		else
		{
			bIsFind = false;
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "여") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 &&
			(pNode->pNext->pHToken->subStem->strFeature[58] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[43] == '1'))
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "길");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFind == true && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "길");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "길");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0473(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25, S_Tm);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25, S_Tm);//3,4,25
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "이") == 0 &&
			(strcmp(pNode->pNext->pHToken->subStem->strResult, "들") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "들어서") == 0))
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, S_Tm);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "다음") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "이번") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, S_Tm);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
			{
				if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pPrev->pHToken->subStem->strFeature[49] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
				if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable054(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "받") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable060(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0474(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(STEM_VALUE) == false && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "는");
				SaveEndBuffer("는");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "는");
				SaveEndBuffer("는");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[45] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "가늘");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "물줄기") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "가늘");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "가");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "가");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "가");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "가");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

					CreateNewEndStr(pNode, "는");
					SaveEndBuffer("는");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "가");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

					CreateNewEndStr(pNode, "는");
					SaveEndBuffer("는");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[45] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 5);
					strcpy(pNode->pHToken->subStem->strResult, "가늘");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (bIsFirstFind == false)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "는");
				SaveEndBuffer("는");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
			IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "가");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35;

					CreateNewEndStr(pNode, "는");
					SaveEndBuffer("는");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "가");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

					CreateNewEndStr(pNode, "는");
					SaveEndBuffer("는");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[45] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 5);
					strcpy(pNode->pHToken->subStem->strResult, "가늘");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (bIsFirstFind == false)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "는");
				SaveEndBuffer("는");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "가");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "가");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "가");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "는");
		SaveEndBuffer("는");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0475(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "설화") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "신화") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "알");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "지");
		SaveEndBuffer("지");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0476(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "탄");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "탄");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
			}
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "미사일") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "실험") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "계산") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "문제") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "탄");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "도");
		SaveEndBuffer("도");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0477(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	bool bIsFind1 = false;
	bool bIsFind2 = false;
	bool bIsFind3 = false;
	bool bIsFind4 = false;
	bool bIsFind5 = false;
	bool bIsFind6 = false;
	bool bIsFind7 = false;
	bool bIsFind8 = false;
	bool bIsFind9 = false;
	bool bIsFind10 = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[4] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 6, "ㄱ");
				bIsFind1 = IsChosungIFunction(pOriginalString, 6, "ㄴ");
				bIsFind2 = IsChosungIFunction(pOriginalString, 6, "ㄷ");
				bIsFind3 = IsChosungIFunction(pOriginalString, 6, "ㅁ");
				bIsFind4 = IsChosungIFunction(pOriginalString, 6, "ㅅ");
				bIsFind5 = IsChosungIFunction(pOriginalString, 6, "ㅇ");
				bIsFind6 = IsJungsungVFunction(pOriginalString, 6, "오");
				bIsFind7 = IsJungsungVFunction(pOriginalString, 6, "아");
				bIsFind8 = IsJungsungVFunction(pOriginalString, 6, "이");
				bIsFind9 = IsJungsungVFunction(pOriginalString, 6, "어");
				bIsFind10 = IsJongsungCFunction(pOriginalString, 4, "ㅆ");
				if (bIsFind10 == false)
					bIsFind10 = IsJongsungCFunction(pOriginalString, 2, "ㅆ");
			}
			else
			{
				bIsFind = false;
				bIsFind1 = false;
				bIsFind2 = false;
				bIsFind3 = false;
				bIsFind4 = false;
				bIsFind5 = false;
				bIsFind6 = false;
				bIsFind7 = false;
				bIsFind8 = false;
				bIsFind9 = false;
				bIsFind10 = false;
			}
		}
		else
		{
			bIsFind = false;
			bIsFind1 = false;
			bIsFind2 = false;
			bIsFind3 = false;
			bIsFind4 = false;
			bIsFind5 = false;
			bIsFind6 = false;
			bIsFind7 = false;
			bIsFind8 = false;
			bIsFind9 = false;
			bIsFind10 = false;
		}
	}

	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "내리");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "오") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "내");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "려");
			SaveEndBuffer("려");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFind10 == true && bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "내리");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

													   // Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKH 2004-01-12
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
	if (bIsFind == true && bIsFind6 == true && bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "내");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "려");
		SaveEndBuffer("려");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
	if (bIsFind2 == true && bIsFind7 == true && bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "내");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "려");
		SaveEndBuffer("려");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
	if (bIsFind1 == true && bIsFind8 == true && bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "내");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "려");
		SaveEndBuffer("려");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
	if (bIsFind3 == true && bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "내");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "려");
		SaveEndBuffer("려");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
	if (bIsFind5 == true && bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "내리");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

													   // Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKH 2004-01-12
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
	if (bIsFind4 == true && bIsFind9 == true && bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "내리");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

													   // Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKH 2004-01-12
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
	if (ThisNodeNull(END_VALUE) == true && NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "한") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "할") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "함") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "해") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "하나") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "해서") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "해주") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "내");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "려");
			SaveEndBuffer("려");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "내리");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "내");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "려");
			SaveEndBuffer("려");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "내리");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

													   // Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKH 2004-01-12
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0478(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "장");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25 

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "장");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25 

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "절차") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "장");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0479(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "출신") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "대학교") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "학생") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "대학원") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "진학") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "의") == 0)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "달리") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "다르") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "법");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					CreateNewEndStr(pNode, "과");
					SaveEndBuffer("과");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[8] = '1';
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "와") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "과") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "랑") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이랑") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "하고") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "법");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					CreateNewEndStr(pNode, "과");
					SaveEndBuffer("과");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[8] = '1';
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "나") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "법");
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					CreateNewEndStr(pNode, "과");
					SaveEndBuffer("과");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[8] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(END_VALUE) && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "법");
				pNode->pHToken->subStem->strFeature[4] = '1';
				pNode->pHToken->subStem->strFeature[3] = '1';

				CreateNewEndStr(pNode, "과");
				SaveEndBuffer("과");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[8] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "법");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "과");
		SaveEndBuffer("과");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[8] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0480(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "그릇") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "냄비") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "주전자") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[14] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "양");
			pNode->pHToken->subStem->strFeature[4] = '1';
			pNode->pHToken->subStem->strFeature[3] = '1';

			CreateNewEndStr(pNode, "은");
			SaveEndBuffer("은");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "김") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "이") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "박") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "최") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "정") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "모") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "양");
			pNode->pHToken->subStem->strFeature[4] = '1';
			pNode->pHToken->subStem->strFeature[3] = '1';

			CreateNewEndStr(pNode, "은");
			SaveEndBuffer("은");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "양");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "은");
		SaveEndBuffer("은");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0481(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "가") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "오") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "받") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "주") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "잇");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "더니") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "고") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10, 26);//2,10,26
	}
	if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10, 26);//2,10,26
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "잇");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = SaveStemFeature(pNode, 2, 10, 26);//2,10,26
	}
}

void CNAAmbiguity::Amb_Function_0482(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "일");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "만");
			SaveEndBuffer("만");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "일");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "만");
			SaveEndBuffer("만");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "일");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "만");
				SaveEndBuffer("만");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "일");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "만");
				SaveEndBuffer("만");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
			}
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[25] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if ((IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true) ||
				(IsExistTable059(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true) ||
				(IsExistTable064(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true))
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "일");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "만");
		SaveEndBuffer("만");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0483(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "기");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "기");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "기");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "다니") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "가") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "오") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "오르") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "기");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "변속") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "기");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "기");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

													   // Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKH 2004-01-12
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0484(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "신변") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "능하") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "잡");
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "잡");
		bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

		CreateNewEndStr(pNode, "기");
		SaveEndBuffer("기");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0485(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "법");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "법");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "라는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "다는") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "법");
			pNode->pHToken->subStem->strFeature[4] = '1';
			pNode->pHToken->subStem->strFeature[3] = '1';

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "법");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "법");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "도");
		SaveEndBuffer("도");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0486(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable057(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true ||
			IsExistTable072(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true ||
			IsExistTable074(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "두");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 6, 13);//2,6,13
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "두");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

													   // Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKH 2004-01-12
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0487(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[25] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[39] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "전");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "상실") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "전");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0488(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable063(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "자");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "시");
			SaveEndBuffer("시");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[45] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(STEM_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0489(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "까");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "까");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "까");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0490(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "아") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "원하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "원하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 5);
					strcpy(pNode->pHToken->subStem->strResult, "원하");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 5);
					strcpy(pNode->pHToken->subStem->strResult, "원하");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "원하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "원하");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0491(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[25] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[39] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "전");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "과");
				SaveEndBuffer("과");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[8] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "다르") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "달리") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "같이") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "같") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "비교하") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "마찬가지") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "전");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "과");
				SaveEndBuffer("과");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[8] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "기록") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "출신") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "누락") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "전");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "과");
			SaveEndBuffer("과");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0492(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25 
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "아니") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "안") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[39] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true || NextNodeNull(STEM_VALUE) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[27] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "지");
				SaveEndBuffer("지");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "말") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "말라") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "마") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

				CreateNewEndStr(pNode, "지");
				SaveEndBuffer("지");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (NextNodeNull(STEM_VALUE) == true && ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "가");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "지");
			SaveEndBuffer("지");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "만") == 0 &&
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "까지") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "가");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

			CreateNewEndStr(pNode, "지");
			SaveEndBuffer("지");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0493(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
		{
			if (ThisNodeNull(END_VALUE) == true && NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
					pNode->pNext->pHToken->subStem->strFeature[12] == '1')
				{
					bIsFirstFind = true;
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
				}
			}
			if (ThisNodeNull(END_VALUE) == true && IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					bIsFirstFind = true;
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
				}
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "타자") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "선수") == 0)
				{
					bIsFirstFind = true;
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			if (ThisNodeNull(END_VALUE) == true && NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
					pNode->pNext->pHToken->subStem->strFeature[12] == '1')
				{
					bIsFirstFind = true;
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
				}
			}
			if (ThisNodeNull(END_VALUE) == true && IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					bIsFirstFind = true;
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
				}
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "타자") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "선수") == 0)
				{
					bIsFirstFind = true;
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
		{
			bIsFirstFind = true;
			pNode->pHToken->subStem->strFeature[7] = '1';
			pNode->pHToken->subStem->strFeature[3] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true
			&& NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			{
				bIsFirstFind = true;
				pNode->pHToken->subStem->strFeature[4] = '1';
				pNode->pHToken->subStem->strFeature[3] = '1';
			}
		}
		if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken == NULL)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "주") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "보") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (PrevNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0494(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "프랑스") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "강") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "파리") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "세느");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "세");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "는");
		SaveEndBuffer("는");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0495(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' &&
			pNode->pNext->pHToken->subStem->strFeature[27] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "켜");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "지");
			SaveEndBuffer("지");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "말") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "말라") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "마") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "켜");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "지");
			SaveEndBuffer("지");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0496(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				bIsFirstFind = true;
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25				
				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[14] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
				pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "다만") == 0)
			{
				bIsFirstFind = true;
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[14] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);
					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					nLen = strlen(m_pOneChar);
					CreateNewEndStr(pNode, m_pOneChar);
					SaveEndBuffer(m_pOneChar);
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
					pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);
					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					nLen = strlen(m_pOneChar);
					CreateNewEndStr(pNode, m_pOneChar);
					SaveEndBuffer(m_pOneChar);
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (PrevNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "다") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "다만") == 0)
				{
					bIsFirstFind = true;
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);
					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					nLen = strlen(m_pOneChar);
					CreateNewEndStr(pNode, m_pOneChar);
					SaveEndBuffer(m_pOneChar);
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0497(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "무너지") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "축");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
		{
			if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "축");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
			}
			if (bIsFirstFind == false)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "축");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "축");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
			}
			if (bIsFirstFind == false)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "축");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[26] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "축");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "축");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "축");
				pNode->pHToken->subStem->strFeature[4] = '1';
				pNode->pHToken->subStem->strFeature[3] = '1';

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "축");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "축");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "축");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "축");
			pNode->pHToken->subStem->strFeature[4] = '1';
			pNode->pHToken->subStem->strFeature[3] = '1';

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0498(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken == NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10, 26);//2,10,26
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' &&
			pNode->pNext->pHToken->subStem->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "그리");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "고");
			SaveEndBuffer("고");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
		}
	}
	if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken == NULL)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "그리");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "고");
			SaveEndBuffer("고");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "싶어하") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "그리");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "고");
			SaveEndBuffer("고");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "그림") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "만화") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "다시") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "곡선") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "그리");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "고");
			SaveEndBuffer("고");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10, 26);//2,10,26
}

void CNAAmbiguity::Amb_Function_0499(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "뭐") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "것");
			pNode->pHToken->subStem->strFeature[4] = '1';
			pNode->pHToken->subStem->strFeature[3] = '1';

			CreateNewEndStr(pNode, "이지");
			SaveEndBuffer("이지");
			pNode->pHToken->subEnding->strFeature[26] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "것");
				pNode->pHToken->subStem->strFeature[4] = '1';
				pNode->pHToken->subStem->strFeature[3] = '1';

				CreateNewEndStr(pNode, "이지");
				SaveEndBuffer("이지");
				pNode->pHToken->subEnding->strFeature[26] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "만") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "마는") == 0)
		{
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
				{
					bIsFirstFind = true;
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "것");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4

					CreateNewEndStr(pNode, "이지");
					SaveEndBuffer("이지");
					pNode->pHToken->subEnding->strFeature[26] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "것");
			pNode->pHToken->subStem->strFeature[4] = '1';
			pNode->pHToken->subStem->strFeature[3] = '1';

			CreateNewEndStr(pNode, "이지");
			SaveEndBuffer("이지");
			pNode->pHToken->subEnding->strFeature[26] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0500(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "서요") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "사");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "면");
			SaveEndBuffer("면");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "복권") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "조치") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "초가") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "이전") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "이후") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "소식") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "각각") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "대상") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "절반") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "논란") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "특별") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "일반직") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "국제") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "양심주의") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "대륙") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "만") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "사");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "면");
				SaveEndBuffer("면");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "사");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "면");
				SaveEndBuffer("면");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "사");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "면");
			SaveEndBuffer("면");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "사");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "면");
		SaveEndBuffer("면");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0501(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "되") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable071(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "파");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 39);//2,7,8,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "시작하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "쉽") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "때문") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "파");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 39);//2,7,8,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0502(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "아") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable071(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				{
					bIsFirstFind = true;
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "파");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "팔");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
		{
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable071(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				{
					bIsFirstFind = true;
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "파");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄴ");
					SaveEndBuffer("ㄴ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "팔");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable071(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "파");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "파");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "위") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "팔");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0503(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "풀");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "되") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "적") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "풀");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "풀");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "풀");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "풀");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "적") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "풀");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "이");
		SaveEndBuffer("이");
		pNode->pHToken->subEnding->strFeature[26] = '1';
	}
}


void CNAAmbiguity::Amb_Function_0504(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	bool bIsFind1 = false;
	bool bIsFind2 = false;
	bool bIsFind3 = false;
	bool bIsFind4 = false;
	bool bIsFind5 = false;
	bool bIsFind6 = false;
	bool bIsFind7 = false;
	bool bIsFind8 = false;
	bool bIsFind9 = false;
	bool bIsFind10 = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[4] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 6, "ㄱ");
				bIsFind1 = IsChosungIFunction(pOriginalString, 6, "ㄴ");
				bIsFind2 = IsChosungIFunction(pOriginalString, 6, "ㄷ");
				bIsFind3 = IsChosungIFunction(pOriginalString, 6, "ㅁ");
				bIsFind4 = IsChosungIFunction(pOriginalString, 6, "ㅅ");
				bIsFind5 = IsChosungIFunction(pOriginalString, 6, "ㅇ");
				bIsFind6 = IsJungsungVFunction(pOriginalString, 6, "오");
				bIsFind7 = IsJungsungVFunction(pOriginalString, 6, "아");
				bIsFind8 = IsJungsungVFunction(pOriginalString, 6, "이");
				bIsFind9 = IsJungsungVFunction(pOriginalString, 6, "어");
				bIsFind10 = IsJongsungCFunction(pOriginalString, 4, "ㅆ");
			}
			else
			{
				bIsFind = false;
				bIsFind1 = false;
				bIsFind2 = false;
				bIsFind3 = false;
				bIsFind4 = false;
				bIsFind5 = false;
				bIsFind6 = false;
				bIsFind7 = false;
				bIsFind8 = false;
				bIsFind9 = false;
				bIsFind10 = false;
			}
		}
		else
		{
			bIsFind = false;
			bIsFind1 = false;
			bIsFind2 = false;
			bIsFind3 = false;
			bIsFind4 = false;
			bIsFind5 = false;
			bIsFind6 = false;
			bIsFind7 = false;
			bIsFind8 = false;
			bIsFind9 = false;
			bIsFind10 = false;
		}
	}

	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "알리");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "오") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "알");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "려");
			SaveEndBuffer("려");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFind10 == true && bIsFirstFind == false)
	{
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "알리");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFind == true && bIsFind6 == true && bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "알");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "려");
		SaveEndBuffer("려");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
	if (bIsFind2 == true && bIsFind7 == true && bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "알");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "려");
		SaveEndBuffer("려");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
	if (bIsFind1 == true && bIsFind8 == true && bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "알");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "려");
		SaveEndBuffer("려");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
	if (bIsFind3 == true && bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "알");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "려");
		SaveEndBuffer("려");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
	if (bIsFind5 == true && bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "알리");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

													   // Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKh 2004-01-12
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
	if (bIsFind4 == true && bIsFind9 == true && bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "알리");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

													   // Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKH 2004-01-12
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "드리") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "주") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "알리");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "알");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "려");
			SaveEndBuffer("려");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "알리");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

													   // Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKH 2004-01-12
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0505(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "반죽") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "너무") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "되");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

			CreateNewEndStr(pNode, "게");
			SaveEndBuffer("게");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "되");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "게");
			SaveEndBuffer("게");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "안") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "못") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "되");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "게");
			SaveEndBuffer("게");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "되") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "마련") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "되");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "게");
			SaveEndBuffer("게");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[9] == '1' ||
			pNode->pNext->pHToken->subStem->strFeature[10] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "되");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "게");
			SaveEndBuffer("게");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "되");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "게");
			SaveEndBuffer("게");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
}

void CNAAmbiguity::Amb_Function_0506(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "장");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "만");
				SaveEndBuffer("만");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "장");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "만");
				SaveEndBuffer("만");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeNull(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken == NULL)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true  && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "되") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "장");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "만");
			SaveEndBuffer("만");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0507(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "빠르") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "떨어지") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "내") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "내려가") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "늦추") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "안") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "참") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "속");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0508(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "편");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "편");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "편");
			pNode->pHToken->subStem->strFeature[4] = '1';
			pNode->pHToken->subStem->strFeature[3] = '1';

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable053(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "편");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true  && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "차선") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "편");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "편");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "편");
		pNode->pHToken->subStem->strFeature[4] = '1';
		pNode->pHToken->subStem->strFeature[3] = '1';

		CreateNewEndStr(pNode, "도");
		SaveEndBuffer("도");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0509(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "요");
				SaveEndBuffer("요");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "가");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "요");
				SaveEndBuffer("요");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "가");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 30, 35);//2,7,30,35

		CreateNewEndStr(pNode, "요");
		SaveEndBuffer("요");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0510(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "지");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "시");
			SaveEndBuffer("시");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[45] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0511(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "주");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "자");
			SaveEndBuffer("자");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken == NULL)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "주");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "자");
				SaveEndBuffer("자");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "주");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "자");
				SaveEndBuffer("자");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
		{
			if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken == NULL)
				{
					bIsFirstFind = true;
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "주");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "자");
					SaveEndBuffer("자");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
				{
					bIsFirstFind = true;
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "주");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "자");
					SaveEndBuffer("자");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					bIsFirstFind = true;
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "주");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "자");
					SaveEndBuffer("자");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					bIsFirstFind = true;
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "주");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "자");
					SaveEndBuffer("자");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
				{
					bIsFirstFind = true;
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "주");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "자");
					SaveEndBuffer("자");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0512(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "안");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true  && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "안");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "안");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "안");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "안");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "안");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "이");
		SaveEndBuffer("이");
		pNode->pHToken->subEnding->strFeature[26] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0513(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "빼") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "빠지") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "밀") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodeFeature(STEM_VALUE) == true || NextNodeNull(STEM_VALUE) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[7] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[8] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0514(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	CreateStemEndStr(pNode, CREATE_STEM, 5);
	strcpy(pNode->pHToken->subStem->strResult, "차도");
	bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

	CreateNewEndStr(pNode, "를");
	SaveEndBuffer("를");
	pNode->pHToken->subEnding->strFeature[2] = '1';
	pNode->pHToken->subEnding->strFeature[1] = '1';
}

void CNAAmbiguity::Amb_Function_0515(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10, 58);//2,10,58
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 22, 58);//2,4,5,22,58
}

void CNAAmbiguity::Amb_Function_0516(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (PrevNodeNull(STEM_VALUE) == true && NextNodeNull(STEM_VALUE) == false && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "무엇");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 22);//2,4,5,22

		CreateNewEndStr(pNode, "가");
		SaveEndBuffer("가");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "무엇");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5, 22);//2,4,5,22

		CreateNewEndStr(pNode, "이ㄴ가");
		SaveEndBuffer("이ㄴ가");
		pNode->pHToken->subEnding->strFeature[26] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0517(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if ((PrevNodeFeature(STEM_VALUE) == true || PrevNodestrResult(STEM_VALUE) == true) && PrevNodeNull(END_VALUE) == true)
		{
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
				{
					if (PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "중");
						bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

						CreateNewEndStr(pNode, "이");
						SaveEndBuffer("이");
						pNode->pHToken->subEnding->strFeature[2] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[4] = '1';
						pNode->pHToken->subEnding->strFeature[25] = '1';
					}
				}
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "것") == 0)
				{
					if (PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
					{
						CreateStemEndStr(pNode, CREATE_STEM, 3);
						strcpy(pNode->pHToken->subStem->strResult, "중");
						bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

						CreateNewEndStr(pNode, "이");
						SaveEndBuffer("이");
						pNode->pHToken->subEnding->strFeature[2] = '1';
						pNode->pHToken->subEnding->strFeature[1] = '1';
						pNode->pHToken->subEnding->strFeature[4] = '1';
						pNode->pHToken->subEnding->strFeature[25] = '1';
					}
				}
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[7] == '1' &&
				(strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "던") == 0))
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "중");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "중");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '1';
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "중");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "중");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
		}
	}
	if ((PrevNodeFeature(STEM_VALUE) == true || PrevNodestrResult(STEM_VALUE) == true) && PrevNodeNull(END_VALUE) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
			{
				if (PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
				{
					bIsFirstFind = true;
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "중");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

					CreateNewEndStr(pNode, "이");
					SaveEndBuffer("이");
					pNode->pHToken->subEnding->strFeature[26] = '1';
				}
			}
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "것") == 0)
			{
				if (PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
				{
					bIsFirstFind = true;
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "중");
					bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

					CreateNewEndStr(pNode, "이");
					SaveEndBuffer("이");
					pNode->pHToken->subEnding->strFeature[26] = '1';
				}
			}
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[7] == '1' &&
			(strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "던") == 0))
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "중");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "중");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "중");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "중");
		bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4

		CreateNewEndStr(pNode, "이");
		SaveEndBuffer("이");
		pNode->pHToken->subEnding->strFeature[26] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0518(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "없") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "없이") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
		if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken == NULL)
				bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[14] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0519(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "하는") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "하고") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "백") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0520(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "떼") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "붙이") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "만지") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0521(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "세상") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "세상일") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "입") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0522(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "보") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "주무르") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "본") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0523(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "잡") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0524(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "방뇨") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "강도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0525(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "변이") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0526(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "렌즈") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "거울") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0527(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "설화") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "신화") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0528(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "등") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0529(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0530(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "안") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "뒤") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "내") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "앞") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "주변") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "규모") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "가까이") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0531(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "기사") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0532(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "니") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0533(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "마르") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "신호") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "소리") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "울") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "들리") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0534(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
				pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0535(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
				pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "같") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "보자기") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "피륙") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "헝겊") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "치마") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "옷감") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "조각") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "조각") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "겉치마") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "잉어") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "옷") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "방석") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "조끼") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "이불") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0536(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
				pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pPrev->pHToken->subStem->strFeature[58] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0537(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "없") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "좋") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0538(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
				pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "정부") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "해체") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "대통령") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0539(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
				pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "권력") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "빈곤") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "군주") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "다수") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "왕정") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "우위") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0540(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "긴장하") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "활기") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "실색하") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0541(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25, 58);//3,4,25,58
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25, 58);//3,4,25,58
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 3, 7);//3,7
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 31);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 31);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에게") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 31);//2,7,8
			}
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 31);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 31);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 31);//2,7,8
}

void CNAAmbiguity::Amb_Function_0542(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

				CreateNewEndStr(pNode, "기");
				SaveEndBuffer("기");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

				CreateNewEndStr(pNode, "기");
				SaveEndBuffer("기");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 28);//2,7,8,28
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 28);//2,7,8,28
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 28);//2,7,8,28
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 28);//2,7,8,28
			}
			if (bIsFirstFind == false)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

				CreateNewEndStr(pNode, "기");
				SaveEndBuffer("기");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 28);//2,7,8,28
}

void CNAAmbiguity::Amb_Function_0543(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(STEM_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "감돌");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "감돌");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "감");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "감");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "감");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					{
						bIsFirstFind = true;
						CreateStemEndStr(pNode, CREATE_STEM, 5);
						strcpy(pNode->pHToken->subStem->strResult, "감돌");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
					}
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					{
						bIsFirstFind = true;
						CreateStemEndStr(pNode, CREATE_STEM, 5);
						strcpy(pNode->pHToken->subStem->strResult, "감돌");
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
					}
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
				{
					bIsFirstFind = true;
					CreateStemEndStr(pNode, CREATE_STEM, 5);
					strcpy(pNode->pHToken->subStem->strResult, "감돌");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "감돌");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
}

void CNAAmbiguity::Amb_Function_0544(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "제") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "이");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "제기") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "신청") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "없이") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "이");
			pNode->pHToken->subStem->strFeature[4] = '1';
			pNode->pHToken->subStem->strFeature[3] = '1';

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "이");
			pNode->pHToken->subStem->strFeature[4] = '1';
			pNode->pHToken->subStem->strFeature[3] = '1';

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "이");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "입") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "혀") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "이");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "구석구석") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "이");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "이");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

		CreateNewEndStr(pNode, "의");
		SaveEndBuffer("의");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[7] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0545(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "다툼") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "맞추") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken == NULL)
				bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0546(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "간");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "간");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[14] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "지방") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "땅") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "바닥") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "파출소") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "이만") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "간");
				pNode->pHToken->subStem->strFeature[4] = '1';
				pNode->pHToken->subStem->strFeature[3] = '1';

				CreateNewEndStr(pNode, "도");
				SaveEndBuffer("도");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "간");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
}

void CNAAmbiguity::Amb_Function_0547(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "의") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "쓰") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "년") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 13, 58);//3,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0548(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "받") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "할") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "해주") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
		{
			if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
					pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);
					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

					CreateNewEndStr(pNode, "로");
					SaveEndBuffer("로");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
			{
				if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);
					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

					CreateNewEndStr(pNode, "로");
					SaveEndBuffer("로");
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "로");
			SaveEndBuffer("로");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "부터") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "부터의") == 0)
		{
			bIsFirstFind = true;
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "로");
			SaveEndBuffer("로");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "로");
				SaveEndBuffer("로");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0549(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[14] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "음대");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "로");
			SaveEndBuffer("로");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "대학교") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "음대");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "로");
			SaveEndBuffer("로");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "음");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "대로");
		SaveEndBuffer("대로");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0550(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "이것");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

		CreateNewEndStr(pNode, "은");
		SaveEndBuffer("은");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[5] = '1';
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "이것");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

		CreateNewEndStr(pNode, "이ㄴ");
		SaveEndBuffer("이ㄴ");
		pNode->pHToken->subEnding->strFeature[26] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0551(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "절구") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "약절구") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "공");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "공");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "이");
		SaveEndBuffer("이");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0552(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "이규보") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "파하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "아") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "파하");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0553(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "지경") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "몰");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "아");
			SaveEndBuffer("아");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "몰");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "아");
			SaveEndBuffer("아");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "몰");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "아");
			SaveEndBuffer("아");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "니") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "몰");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "아");
		SaveEndBuffer("아");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0554(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "논") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "밭") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "배추") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "땅") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "이") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "갈");
				bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

				CreateNewEndStr(pNode, "기");
				SaveEndBuffer("기");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "갈");
				bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

				CreateNewEndStr(pNode, "기");
				SaveEndBuffer("기");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "논") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "밭") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "배추") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "땅") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "이") == 0)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "갈");
					bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

					CreateNewEndStr(pNode, "기");
					SaveEndBuffer("기");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "갈");
					bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

					CreateNewEndStr(pNode, "기");
					SaveEndBuffer("기");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0555(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	bool bIsFind1 = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㅅ");
				bIsFind1 = IsJungsungVFunction(pOriginalString, 4, "어");
			}
			else
			{
				bIsFind = false;
				bIsFind1 = false;
			}
		}
		else
		{
			bIsFind = false;
			bIsFind1 = false;
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 56, 58);//2,4,56,58
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 56, 58);//2,4,56,58
	}
	if (bIsFind == true && bIsFind1 == true && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "한하");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

															   // Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKH 2004-01-12
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에게") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "들에") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "한하");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

																   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 56, 58);//2,4,56,58
}

void CNAAmbiguity::Amb_Function_0556(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "보");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				pNode->pHToken->subStem->strFeature[37] = '1';

				CreateNewEndStr(pNode, "라");
				SaveEndBuffer("라");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "등") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "보");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 37);//2,7,8,37

			CreateNewEndStr(pNode, "라");
			SaveEndBuffer("라");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "보");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 37);//2,7,8,37

		CreateNewEndStr(pNode, "라");
		SaveEndBuffer("라");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0557(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "걸리") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "되") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "지키") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[58] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);//2,4,58
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[25] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4,58
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4,58
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "정");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "정");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "도");
			SaveEndBuffer("도");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "이") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "그") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "저") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "어느") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "서울") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4,58
	}
	if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4,58
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "정");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "도");
		SaveEndBuffer("도");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0558(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "밥") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "똥") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "푸");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "주변") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "기는") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "기도") == 0)
			{
				bIsFirstFind = true;
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "거나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0559(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "불") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "전깃불") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "등잔불") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "담배불") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "담배") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "팍") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "비비") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "끄");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "기는") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "기도") == 0)
			{
				bIsFirstFind = true;
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "거나") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0560(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "없") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "없이") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "다르") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "달리") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "같이") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "같") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "비교하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "마찬가지") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "성") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "성행위") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "범죄") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "인간") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "정") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "관계없") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "이름") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "동물") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "성");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "과");
			SaveEndBuffer("과");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0561(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4);//3,4
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "끄");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

													   // Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKH 2004-01-12
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0562(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "날");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "로");
		SaveEndBuffer("로");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "날");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "로");
			SaveEndBuffer("로");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "날");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "로");
			SaveEndBuffer("로");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
}

void CNAAmbiguity::Amb_Function_0563(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "호위") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "호");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "가");
			SaveEndBuffer("가");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "호");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "가");
			SaveEndBuffer("가");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "호");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "가");
		SaveEndBuffer("가");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[4] = '1';
		pNode->pHToken->subEnding->strFeature[25] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0564(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0565(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "거치");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "거치");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "두루") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "안") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "못") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "다") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "거치");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "거칠");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0566(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "면") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "게") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "거치");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "거칠");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

			CreateNewEndStr(pNode, "ㄹ");
			SaveEndBuffer("ㄹ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "두루") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "안") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "못") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "다") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "거치");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄹ");
			SaveEndBuffer("ㄹ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9
}

void CNAAmbiguity::Amb_Function_0567(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(END_VALUE) == true && PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if ((strcmp(pNode->pPrev->pHToken->subEnding->strResult, "ㄹ") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0) &&
				pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "양");
				pNode->pHToken->subStem->strFeature[4] = '1';
				pNode->pHToken->subStem->strFeature[3] = '1';

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '1';
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[14] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "양");
				pNode->pHToken->subStem->strFeature[4] = '1';
				pNode->pHToken->subStem->strFeature[3] = '1';

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "양");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "양");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "양");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "양");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "이");
		SaveEndBuffer("이");
		pNode->pHToken->subEnding->strFeature[26] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0568(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "무슨") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "수");
				pNode->pHToken->subStem->strFeature[4] = '1';
				pNode->pHToken->subStem->strFeature[3] = '1';

				CreateNewEndStr(pNode, "로");
				SaveEndBuffer("로");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "교통") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "부인") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "측량") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "수");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "로");
			SaveEndBuffer("로");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "비어") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "아리랑") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "직선") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "만") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "수");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "로");
			SaveEndBuffer("로");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0569(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "이면") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "으로") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "대로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "위하") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "물론") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이면") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어서") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아서") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "도록") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "보다") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "기보다") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이기보다") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "게") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "되");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "도록");
			SaveEndBuffer("도록");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "되");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "도록");
			SaveEndBuffer("도록");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "되");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "도록");
		SaveEndBuffer("도록");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0570(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	if (bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
		GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);

		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		AddTwoStr(m_pChoJungChar, m_pJongChar);
		nLen = strlen(m_pAddTwoString);
		CreateNewEndStr(pNode, m_pAddTwoString);
		SaveEndBuffer(m_pAddTwoString);
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0571(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '1')
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "이ㄹ");
				SaveEndBuffer("이ㄹ");
				pNode->pHToken->subEnding->strFeature[26] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
				GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "이ㄹ");
				SaveEndBuffer("이ㄹ");
				pNode->pHToken->subEnding->strFeature[26] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		GetChojungJongsungChar(m_pOneChar, CHAR_JONGSUNG);
		GetChojungJongsungChar(m_pOneChar, CHAR_CHOJUNGSUNG);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);

		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "이ㄹ");
		SaveEndBuffer("이ㄹ");
		pNode->pHToken->subEnding->strFeature[26] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0572(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "니") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);

			AddTwoStr(m_pStartCountChar, "하");
			nLen = strlen(m_pAddTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pAddTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
		{
			bIsFirstFind = true;
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);

			AddTwoStr(m_pStartCountChar, "하");
			nLen = strlen(m_pAddTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pAddTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "또는") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "및") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);

			AddTwoStr(m_pStartCountChar, "하");
			nLen = strlen(m_pAddTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pAddTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0573(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "니") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
				{
					bIsFirstFind = true;
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);

					AddTwoStr(m_pStartCountChar, "하");
					nLen = strlen(m_pAddTwoString);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pAddTwoString);
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

																   // Edited by KKH 2004-01-12
					if ((pNode->pHToken->subEnding->strFeature != NULL &&
						pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
						pNode->pHToken->subEnding->strFeature == NULL)
					{
						CreateNewEndStr(pNode, "어");
						SaveEndBuffer("어");
					}
					// Edited by KKH 2004-01-12
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
			{
				bIsFirstFind = true;
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				AddTwoStr(m_pStartCountChar, "하");
				nLen = strlen(m_pAddTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pAddTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
		{
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
				{
					bIsFirstFind = true;
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);

					AddTwoStr(m_pStartCountChar, "하");
					nLen = strlen(m_pAddTwoString);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pAddTwoString);
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

																   // Edited by KKH 2004-01-12
					if ((pNode->pHToken->subEnding->strFeature != NULL &&
						pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
						pNode->pHToken->subEnding->strFeature == NULL)
					{
						CreateNewEndStr(pNode, "어");
						SaveEndBuffer("어");
					}
					// Edited by KKH 2004-01-12
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
			{
				bIsFirstFind = true;
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				AddTwoStr(m_pStartCountChar, "하");
				nLen = strlen(m_pAddTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pAddTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "또는") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "및") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
			{
				bIsFirstFind = true;
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);

				AddTwoStr(m_pStartCountChar, "하");
				nLen = strlen(m_pAddTwoString);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pAddTwoString);
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			InitBuffer();
			pOriginalString = pNode->pHToken->subStem->strResult;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);

			AddTwoStr(m_pStartCountChar, "하");
			nLen = strlen(m_pAddTwoString);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pAddTwoString);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0574(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "보") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "내리");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30

			CreateNewEndStr(pNode, "어서");
			SaveEndBuffer("어서");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 30);//2,7,8,30
	}
}

void CNAAmbiguity::Amb_Function_0575(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "넘");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "어서");
			SaveEndBuffer("어서");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "가") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "넘");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "어서");
			SaveEndBuffer("어서");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (NextNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subEnding->strFeature[42] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				{
					bIsFirstFind = true;
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "넘");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "어서");
					SaveEndBuffer("어서");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "부터") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "부터의") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "조차") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "까지") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "넘");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "어서");
			SaveEndBuffer("어서");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0576(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "낀") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "끼") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "성");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "에");
			SaveEndBuffer("에");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "성");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "에");
			SaveEndBuffer("에");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "만") == 0)
		{
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "낀") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "끼") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "두껍") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "하얗") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "성");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "에");
			SaveEndBuffer("에");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "성");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "에");
		SaveEndBuffer("에");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0577(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "담양") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "제품") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "죽");
		bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

		CreateNewEndStr(pNode, "기");
		SaveEndBuffer("기");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0578(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 7);
				strcpy(pNode->pHToken->subStem->strResult, "철모르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 7);
				strcpy(pNode->pHToken->subStem->strResult, "철모르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "철모");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "를");
			SaveEndBuffer("를");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 7);
			strcpy(pNode->pHToken->subStem->strResult, "철모르");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄹ");
			SaveEndBuffer("ㄹ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "철모");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "를");
		SaveEndBuffer("를");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[6] = '1';
		pNode->pHToken->subEnding->strFeature[25] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0579(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "자라");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "자라");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "자");
			pNode->pHToken->subStem->strFeature[4] = '1';
			pNode->pHToken->subStem->strFeature[3] = '1';

			CreateNewEndStr(pNode, "란");
			SaveEndBuffer("란");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "자");
			pNode->pHToken->subStem->strFeature[4] = '1';
			pNode->pHToken->subStem->strFeature[3] = '1';

			CreateNewEndStr(pNode, "란");
			SaveEndBuffer("란");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "다") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "자라");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "말") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "자");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "란");
			SaveEndBuffer("란");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "자라");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0580(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	bIsFirstFind = true;
	CreateStemEndStr(pNode, CREATE_STEM, 5);
	strcpy(pNode->pHToken->subStem->strResult, "그것");
	bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

	CreateNewEndStr(pNode, "이");
	SaveEndBuffer("이");
	pNode->pHToken->subEnding->strFeature[1] = '1';
	pNode->pHToken->subEnding->strFeature[2] = '1';
	pNode->pHToken->subEnding->strFeature[4] = '1';
	pNode->pHToken->subEnding->strFeature[25] = '1';
}

void CNAAmbiguity::Amb_Function_0581(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	bIsFirstFind = true;
	CreateStemEndStr(pNode, CREATE_STEM, 5);
	strcpy(pNode->pHToken->subStem->strResult, "그것");
	bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

	CreateNewEndStr(pNode, "은");
	SaveEndBuffer("은");
	pNode->pHToken->subEnding->strFeature[1] = '1';
	pNode->pHToken->subEnding->strFeature[2] = '1';
	pNode->pHToken->subEnding->strFeature[5] = '1';
}

void CNAAmbiguity::Amb_Function_0582(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "좀") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 7);
				strcpy(pNode->pHToken->subStem->strResult, "모자라");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[1] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 7);
				strcpy(pNode->pHToken->subStem->strResult, "모자라");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 7);
				strcpy(pNode->pHToken->subStem->strResult, "모자라");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "듯하") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 7);
				strcpy(pNode->pHToken->subStem->strResult, "모자라");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "모자");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "란");
			SaveEndBuffer("란");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 7);
		strcpy(pNode->pHToken->subStem->strResult, "모자라");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0583(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "사");
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "위하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "힘들") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "어렵") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "전") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "시작하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "십상") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "사");
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0584(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "부시");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "부시");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "부시");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "눈") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "부시");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[45] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "피질") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "기능") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "대통령") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "부시");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "부시");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "부시");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0585(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "고이");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "고이");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[14] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "주민등록증") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 16, 17, 18);//2,4,16,17,18
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "고이");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "고이");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄴ");
		SaveEndBuffer("ㄴ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0586(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subStem->strFeature[7] = '1';
			pNode->pHToken->subStem->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0587(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "것");
			pNode->pHToken->subStem->strFeature[4] = '1';
			pNode->pHToken->subStem->strFeature[3] = '1';

			CreateNewEndStr(pNode, "이란");
			SaveEndBuffer("이란");
			pNode->pHToken->subEnding->strFeature[26] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "아") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "것");
			pNode->pHToken->subStem->strFeature[4] = '1';
			pNode->pHToken->subStem->strFeature[3] = '1';

			CreateNewEndStr(pNode, "이란");
			SaveEndBuffer("이란");
			pNode->pHToken->subEnding->strFeature[26] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
}

void CNAAmbiguity::Amb_Function_0588(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "종");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "종");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "되") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "따르") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "울리") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "종");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[10] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "종");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "종");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "종");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "종");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "하인") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "손님") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "사환") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "종");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "이");
		SaveEndBuffer("이");
		pNode->pHToken->subEnding->strFeature[26] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0589(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[25] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "전");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "전");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "전");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "효과") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "행동") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "전");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[25] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "전");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "전");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "전");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "전");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "이");
		SaveEndBuffer("이");
		pNode->pHToken->subEnding->strFeature[26] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0590(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "경");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "경");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "이");
				SaveEndBuffer("이");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "대하") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "경");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "경");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "경");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "이");
			SaveEndBuffer("이");
			pNode->pHToken->subEnding->strFeature[26] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "경");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "이");
		SaveEndBuffer("이");
		pNode->pHToken->subEnding->strFeature[26] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0591(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "경");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "경");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "경");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (NextNodeFeature(END_VALUE) == true  && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subEnding->strFeature[42] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "경");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[14] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "경");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0592(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "부");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "가");
			SaveEndBuffer("가");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "부");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "가");
			SaveEndBuffer("가");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "가치") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "가치세") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "서비스") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "가치율") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "통신") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "효과") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "해서") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "할") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "한") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "해주") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "해") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "부");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "가");
			SaveEndBuffer("가");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0593(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "불");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "불");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[14] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "및") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "학원") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "교사") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[14] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "및") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "불");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "불");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

													   // Edited by KKH 2004-01-12
		if ((pNode->pHToken->subEnding->strFeature != NULL &&
			pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
			pNode->pHToken->subEnding->strFeature == NULL)
		{
			CreateNewEndStr(pNode, "어");
			SaveEndBuffer("어");
		}
		// Edited by KKH 2004-01-12
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0594(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "빅토르") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "위");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "고");
			SaveEndBuffer("고");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "위");
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

			CreateNewEndStr(pNode, "고");
			SaveEndBuffer("고");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "위");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "고");
		SaveEndBuffer("고");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0595(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "먹") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "되") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "아니") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "들") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable053(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subStem->strFeature[3] = '1';
			pNode->pHToken->subStem->strFeature[4] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "펴");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "다") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "펴");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "펴");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "펴");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "펴");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "지금까지") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "널리") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "날개") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "길") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "얇") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "방법론") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "펴");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "주장") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "반론") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "펴");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
			{
				bIsFirstFind = true;
				pNode->pHToken->subStem->strFeature[3] = '1';
				pNode->pHToken->subStem->strFeature[4] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			pNode->pHToken->subStem->strFeature[3] = '1';
			pNode->pHToken->subStem->strFeature[4] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subStem->strFeature[3] = '1';
			pNode->pHToken->subStem->strFeature[4] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		pNode->pHToken->subStem->strFeature[3] = '1';
		pNode->pHToken->subStem->strFeature[4] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0596(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[6] == '1' ||
			pNode->pNext->pHToken->subStem->strFeature[12] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[48] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "서");
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 20, 39);//2,8,30,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "홀로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "스스로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "한발") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "밟") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "제대로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "앉") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "멈추") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "줄") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "결심") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "바로") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "서");
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 20, 39);//2,8,30,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "위하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "때문") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "해") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "할") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "한") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "해서") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "전") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "시작하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "어렵") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "서");
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 20, 39);//2,8,30,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "어") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "아") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "서");
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 20, 39);//2,8,30,39

			CreateNewEndStr(pNode, "기");
			SaveEndBuffer("기");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0597(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "결정") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "의결") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "관계") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "내용") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "각");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "의");
		SaveEndBuffer("의");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[7] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0598(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "남") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "잦아들") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "스러지") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "스러져가") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "느끼") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "없") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "살") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && NextNodeFeature(STEM_VALUE) == true &&
		bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[12] == '1' ||
			pNode->pNext->pHToken->subStem->strFeature[40] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 58);
	}
	if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "불");
		bIsFirstFind = SaveStemFeature(pNode, 2, 8, 20, 39);//2,8,30,39

		CreateNewEndStr(pNode, "기");
		SaveEndBuffer("기");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0599(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "일");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "과");
				SaveEndBuffer("과");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[8] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "일");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
				CreateNewEndStr(pNode, "과");
				SaveEndBuffer("과");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[8] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "일");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6

				CreateNewEndStr(pNode, "과");
				SaveEndBuffer("과");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[8] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "일");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6

				CreateNewEndStr(pNode, "과");
				SaveEndBuffer("과");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[8] = '1';
			}
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "하루") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "공식") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "후") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "내지") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "일");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "과");
			SaveEndBuffer("과");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[5] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "하루") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "공식") == 0 ||
					strcmp(pNode->pPrev->pHToken->subStem->strResult, "아침") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "빠듯하") == 0 ||
					strcmp(pNode->pNext->pHToken->subStem->strResult, "바쁘") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "일");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "과");
				SaveEndBuffer("과");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[8] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0600(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	int nLen = 0;
	char* pOriginalString = NULL;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "자손") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "차별") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "생존") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "국채") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "흑자") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "적자") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "서자") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "흑자") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			InitBuffer();
			pOriginalString = pNode->pHToken->strSource;
			nTotalLen = strlen(pOriginalString);
			GetOneChar(pOriginalString, nTotalLen, nTotalLen);
			MoveLeftWordCount(pOriginalString, nTotalLen);
			GetStartCountChar(pOriginalString, nTotalLen);
			nLen = strlen(m_pStartCountChar);
			CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
			strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			nLen = strlen(m_pOneChar);
			CreateNewEndStr(pNode, m_pOneChar);
			SaveEndBuffer(m_pOneChar);
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "요") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					bIsFirstFind = true;
					InitBuffer();
					pOriginalString = pNode->pHToken->strSource;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);
					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					nLen = strlen(m_pOneChar);
					CreateNewEndStr(pNode, m_pOneChar);
					SaveEndBuffer(m_pOneChar);
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					bIsFirstFind = true;
					InitBuffer();
					pOriginalString = pNode->pHToken->strSource;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);
					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					nLen = strlen(m_pOneChar);
					CreateNewEndStr(pNode, m_pOneChar);
					SaveEndBuffer(m_pOneChar);
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0601(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "말") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "만") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "마") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "나");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "고야");
				SaveEndBuffer("고야");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14);//2,4,14
}

void CNAAmbiguity::Amb_Function_0602(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라던") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라는") == 0)
		{
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "고") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "고야") == 0)
				{
					bIsFirstFind = true;
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "말");
					pNode->pHToken->subStem->strFeature[7] = '1';
					pNode->pHToken->subStem->strFeature[3] = '1';

					CreateNewEndStr(pNode, "리");
					SaveEndBuffer("리");
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[3] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0603(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "도");
				bIsFirstFind = SaveStemFeature(pNode, 4, 5, 25);//4,5,25

				CreateNewEndStr(pNode, "가");
				SaveEndBuffer("가");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "도");
				bIsFirstFind = SaveStemFeature(pNode, 4, 5, 25);//4,5,25

				CreateNewEndStr(pNode, "가");
				SaveEndBuffer("가");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[4] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "사상") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "사상가") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "학파") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "도");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "가");
			SaveEndBuffer("가");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0604(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "에서") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "를") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "가") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "서") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "트");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

														   // Edited by KKH 2004-01-12
			if ((pNode->pHToken->subEnding->strFeature != NULL &&
				pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
				pNode->pHToken->subEnding->strFeature == NULL)
			{
				CreateNewEndStr(pNode, "어");
				SaveEndBuffer("어");
			}
			// Edited by KKH 2004-01-12
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "주") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "오") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "오기") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "놓") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "트");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "싹") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "도") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "길") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "먼동") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "동") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "트");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "넓") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "닦") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "트");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

															   // Edited by KKH 2004-01-12
				if ((pNode->pHToken->subEnding->strFeature != NULL &&
					pNode->pHToken->subEnding->strFeature[E_Pst] == '0') ||
					pNode->pHToken->subEnding->strFeature == NULL)
				{
					CreateNewEndStr(pNode, "어");
					SaveEndBuffer("어");
				}
				// Edited by KKH 2004-01-12
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "넓") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "닦") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 3, 4, S_T144);//3,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0605(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	if (ThisNodestrResult(END_VALUE) == true)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "이라") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "라") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0606(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
			}
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
			}
			if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "기본") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "째") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
			}
			if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subEnding->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[7] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
}

void CNAAmbiguity::Amb_Function_0607(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "아니") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "안") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (NextNodeFeature(STEM_VALUE) == true || NextNodestrResult(STEM_VALUE) == true || NextNodeNull(STEM_VALUE) == true)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if ((pNode->pNext->pHToken->subStem->strFeature[7] == '1' ||
				pNode->pNext->pHToken->subStem->strFeature[39] == '1') &&
				pNode->pNext->pHToken->subStem->strFeature[27] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "오");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

				CreateNewEndStr(pNode, "지");
				SaveEndBuffer("지");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "말") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "말라") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "마") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "오");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

				CreateNewEndStr(pNode, "지");
				SaveEndBuffer("지");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

			CreateNewEndStr(pNode, "지");
			SaveEndBuffer("지");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true  && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "야") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "나마") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "니") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "도") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "며") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "오");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35

		CreateNewEndStr(pNode, "지");
		SaveEndBuffer("지");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0608(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	int nTotalLen = 0;
	char* pOriginalString = NULL;
	int nLen = 0;

	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				bIsFirstFind = true;
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				//MoveLeftWordCount(pOriginalString,nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25				
				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				//MoveLeftWordCount(pOriginalString,nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25				
				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult != NULL)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strResult == NULL)
		{
			if (PrevNodeNull(END_VALUE) == true  && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken == NULL)
				{
					InitBuffer();
					pOriginalString = pNode->pHToken->subStem->strResult;
					nTotalLen = strlen(pOriginalString);
					GetOneChar(pOriginalString, nTotalLen, nTotalLen);
					MoveLeftWordCount(pOriginalString, nTotalLen);
					//MoveLeftWordCount(pOriginalString,nTotalLen);
					GetStartCountChar(pOriginalString, nTotalLen);
					nLen = strlen(m_pStartCountChar);
					CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
					strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

					nLen = strlen(m_pOneChar);
					CreateNewEndStr(pNode, m_pOneChar);
					SaveEndBuffer(m_pOneChar);
					pNode->pHToken->subEnding->strFeature[2] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (NextNodeFeature(STEM_VALUE) == true  && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
			}
			if (bIsFirstFind == false)
			{
				InitBuffer();
				pOriginalString = pNode->pHToken->subStem->strResult;
				nTotalLen = strlen(pOriginalString);
				GetOneChar(pOriginalString, nTotalLen, nTotalLen);
				MoveLeftWordCount(pOriginalString, nTotalLen);
				//MoveLeftWordCount(pOriginalString,nTotalLen);
				GetStartCountChar(pOriginalString, nTotalLen);
				nLen = strlen(m_pStartCountChar);
				CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
				strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				nLen = strlen(m_pOneChar);
				CreateNewEndStr(pNode, m_pOneChar);
				SaveEndBuffer(m_pOneChar);
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
	}
	if (bIsFirstFind == false)
	{
		InitBuffer();
		pOriginalString = pNode->pHToken->strSource;
		nTotalLen = strlen(pOriginalString);
		GetOneChar(pOriginalString, nTotalLen, nTotalLen);
		MoveLeftWordCount(pOriginalString, nTotalLen);
		//MoveLeftWordCount(pOriginalString,nTotalLen);
		GetStartCountChar(pOriginalString, nTotalLen);
		nLen = strlen(m_pStartCountChar);
		CreateStemEndStr(pNode, CREATE_STEM, nLen + 1);
		strcpy(pNode->pHToken->subStem->strResult, m_pStartCountChar);
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		nLen = strlen(m_pOneChar);
		CreateNewEndStr(pNode, m_pOneChar);
		SaveEndBuffer(m_pOneChar);
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0609(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeNull(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		if (ThisNodestrResult(END_VALUE) == true)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(STEM_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 39);//2,7,39
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
			{
				if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
				{
					if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
						pNode->pNext->pHToken->subStem->strFeature[3] == '1')
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
				}
				if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
				{
					if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
						IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
						bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
				}
			}
			if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
					strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
			}
			if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[10] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
}

void CNAAmbiguity::Amb_Function_0610(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "기");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "를");
				SaveEndBuffer("를");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[6] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "기");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "를");
				SaveEndBuffer("를");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[6] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "기르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
				IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "기르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "기르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "기");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "를");
			SaveEndBuffer("를");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "기르");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "ㄹ");
			SaveEndBuffer("ㄹ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "기");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "를");
		SaveEndBuffer("를");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[6] = '1';
		pNode->pHToken->subEnding->strFeature[25] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0611(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "밤나무") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "너");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

		CreateNewEndStr(pNode, "도");
		SaveEndBuffer("도");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0612(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㄴ");
			}
			else
			{
				bIsFind = false;
			}
		}
		else
		{
			bIsFind = false;
		}
	}

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	if (bIsFind == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(STEM_VALUE) && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "물") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "밥") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "풀");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0613(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
				pNode->pNext->pHToken->subStem->strFeature[3] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "치르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "치르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "치");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "를");
				SaveEndBuffer("를");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[6] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "치");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "를");
				SaveEndBuffer("를");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[6] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "떨") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "벌벌") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "치");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

				CreateNewEndStr(pNode, "를");
				SaveEndBuffer("를");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[6] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "치르");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "치");
			pNode->pHToken->subStem->strFeature[4] = '1';
			pNode->pHToken->subStem->strFeature[3] = '1';

			CreateNewEndStr(pNode, "를");
			SaveEndBuffer("를");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "치르");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

		CreateNewEndStr(pNode, "ㄹ");
		SaveEndBuffer("ㄹ");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0614(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	bool bIsFind1 = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㅅ");
				bIsFind1 = IsJungsungVFunction(pOriginalString, 4, "ㅓ");
			}
			else
			{
				bIsFind = false;
				bIsFind1 = false;
			}
		}
		else
		{
			bIsFind = false;
			bIsFind1 = false;
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "제");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "로");
				SaveEndBuffer("로");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "제");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25

				CreateNewEndStr(pNode, "로");
				SaveEndBuffer("로");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
			}
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "제");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "로");
		SaveEndBuffer("로");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
	if (bIsFind == false && bIsFind1 == false && bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "제");
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

		CreateNewEndStr(pNode, "로");
		SaveEndBuffer("로");
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0615(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[6] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "드리");
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

			CreateNewEndStr(pNode, "ㅁ");
			SaveEndBuffer("ㅁ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에게") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "께") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "드리");
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

			CreateNewEndStr(pNode, "ㅁ");
			SaveEndBuffer("ㅁ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "아메리칸") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "코리안") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "으로써") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "드리");
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

			CreateNewEndStr(pNode, "ㅁ");
			SaveEndBuffer("ㅁ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[14] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[40] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "드리");
			bIsFirstFind = SaveStemFeature(pNode, 2, 8, 39);//2,8,39

			CreateNewEndStr(pNode, "ㅁ");
			SaveEndBuffer("ㅁ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0616(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, PREV_STR) == true)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodeFeature(STEM_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
		}
		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[39] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "니") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 10);//2,10
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "을") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
			}
			if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (strcmp(pNode->pNext->pHToken->subStem->strResult, "정도") == 0)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35);//2,7,35
}

void CNAAmbiguity::Amb_Function_0617(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 11);//2,11
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 5);
		strcpy(pNode->pHToken->subStem->strResult, "아니");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 27, 35);//2,7,27,35

		CreateNewEndStr(pNode, "야");
		SaveEndBuffer("야");
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0618(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subStem->strFeature[12] == '1' ||
				pNode->pPrev->pHToken->subStem->strFeature[6] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "자");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25 

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
		{
			if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "자");
				bIsFirstFind = SaveStemFeature(pNode, 3, 4, 25);//3,4,25 

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "자");
				pNode->pHToken->subStem->strFeature[4] = '1';
				pNode->pHToken->subStem->strFeature[3] = '1';

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "오늘") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "내일") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "이") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "그") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "저") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "자");
				pNode->pHToken->subStem->strFeature[4] = '1';
				pNode->pHToken->subStem->strFeature[3] = '1';

				CreateNewEndStr(pNode, "의");
				SaveEndBuffer("의");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[7] = '1';
			}
		}
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "반") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "자");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4

			CreateNewEndStr(pNode, "의");
			SaveEndBuffer("의");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[7] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0619(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable067(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "듣");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

			CreateNewEndStr(pNode, "어서");
			SaveEndBuffer("어서");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "있") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "들");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

			CreateNewEndStr(pNode, "어서");
			SaveEndBuffer("어서");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "최근") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "요즘") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "근래") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "이달") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "달") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "올해") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "들");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

			CreateNewEndStr(pNode, "어서");
			SaveEndBuffer("어서");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄴ") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "ㄹ") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (NextNodeFeature(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subEnding->strFeature[42] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
				{
					bIsFirstFind = true;
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "들");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

					CreateNewEndStr(pNode, "어서");
					SaveEndBuffer("어서");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "부터") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "부터의") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "조차") == 0 ||
			strcmp(pNode->pHToken->subEnding->strResult, "까지") == 0)
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "들");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, S_T144);//2,7,8

			CreateNewEndStr(pNode, "어서");
			SaveEndBuffer("어서");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
}

void CNAAmbiguity::Amb_Function_0620(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
				pNode->pHToken->subEnding->strFeature[3] == '0')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "도") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true || IsExistTable(STEM_VALUE, NEXT_STR) == true)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pNext->pHToken->subStem->strFeature[3] == '1')
				{
					bIsFirstFind = true;
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "꾸");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
			if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
			{
				if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
					IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
				{
					bIsFirstFind = true;
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "꾸");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

					CreateNewEndStr(pNode, "ㄹ");
					SaveEndBuffer("ㄹ");
					pNode->pHToken->subEnding->strFeature[3] = '1';
					pNode->pHToken->subEnding->strFeature[1] = '1';
					pNode->pHToken->subEnding->strFeature[42] = '1';
				}
			}
		}
		if (ThisNodestrResult(STEM_VALUE) == true && PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subStem->strResult, "꿀") == 0 &&
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "꿈") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "꾸");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "을") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "를") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "기는") == 0 ||
				strcmp(pNode->pPrev->pHToken->subEnding->strResult, "기도") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "꾸");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8

				CreateNewEndStr(pNode, "ㄹ");
				SaveEndBuffer("ㄹ");
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (ThisNodeFeature(END_VALUE) == true || ThisNodestrResult(END_VALUE) == true)
	{
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[3] == '1')
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "꾸");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
		}
		if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pHToken->subEnding->strResult, "고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "다") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "며") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "라") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "란") == 0 ||
				strcmp(pNode->pHToken->subEnding->strResult, "거나") == 0)
			{
				bIsFirstFind = true;
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "꾸");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
			}
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			bIsFirstFind = true;
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "꾸");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
		}
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[13] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (PrevNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subEnding->strFeature[7] == '1' ||
			pNode->pPrev->pHToken->subEnding->strFeature[42] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "꾸");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2,7,8
	}
}

void CNAAmbiguity::Amb_Function_0621(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (NextNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subEnding->strResult, "지") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 5);
			strcpy(pNode->pHToken->subStem->strResult, "파랗");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

			CreateNewEndStr(pNode, "ㄴ");
			SaveEndBuffer("ㄴ");
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pNext->pHToken->subStem->strResult, "만장") == 0 ||
				strcmp(pNode->pNext->pHToken->subStem->strResult, "만장하") == 0)
			{
				CreateStemEndStr(pNode, CREATE_STEM, 5);
				strcpy(pNode->pHToken->subStem->strResult, "파랗");
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 9);//2,7,9

				CreateNewEndStr(pNode, "ㄴ");
				SaveEndBuffer("ㄴ");
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
}

void CNAAmbiguity::Amb_Function_0622(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == false && bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "오");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35, 30);//2, 7, 35, 30

		CreateNewEndStr(pNode, "는");
		SaveEndBuffer("는");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
	if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "더하") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "빼") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "곱하") == 0 ||
			strcmp(pNode->pPrev->pHToken->subStem->strResult, "나누") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
	}
	if (NextNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pNext->pHToken->subStem->strResult, "더하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "빼") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "곱하") == 0 ||
			strcmp(pNode->pNext->pHToken->subStem->strResult, "나누") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
	}
	if (PrevNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pPrev->pHToken->subEnding->strResult, "에") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "로") == 0 ||
			strcmp(pNode->pPrev->pHToken->subEnding->strResult, "으로") == 0)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35, 30);//2,7,35,30

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[58] == '1' ||
			pNode->pNext->pHToken->subStem->strFeature[12] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 13);//2,13
	}
	if (PrevNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pPrev->pHToken->subStem->strFeature[6] == '1' ||
			pNode->pPrev->pHToken->subStem->strFeature[12] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, PREV_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable058(pNode->pPrev->pHToken->subStem->strResult, GET_STEM) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 6);//2,4,6

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[4] == '1')
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35, 30);//2, 7, 35, 30

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (IsExistTable(STEM_VALUE, NEXT_STR) == true && bIsFirstFind == false)
	{
		if (IsExistTable057(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true ||
			IsExistTable072(pNode->pNext->pHToken->subStem->strResult, GET_STEM) == true)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "오");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35, 30);//2, 7, 35, 30

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "오");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 35, 30);//2, 7, 35, 30

		CreateNewEndStr(pNode, "는");
		SaveEndBuffer("는");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
	}
}

void CNAAmbiguity::Amb_Function_0623(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[14] == '1')
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14, 16, 17, 18); //2,4,14,16,17,18
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 64, S_T104); //2,7,8,64,S_T104

			CreateNewEndStr(pNode, "ㄹ");
			SaveEndBuffer("ㄹ");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14, 16, 17, 18); //2,4,14,16,17,18
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "은") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14, 16, 17, 18); //2,4,14,16,17,18
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 64, S_T104); //2,7,8,64,S_T104
	}
}

void CNAAmbiguity::Amb_Function_0624(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㄴ");
			}
			else
			{
				bIsFind = false;
			}
		}
		else
		{
			bIsFind = false;
		}
	}
	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "남") == 0)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4); //2,4
		}
		if (PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 11); //2,4
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4); //2,4
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pNext->pHToken->subStem->strFeature[4] == '0' &&
					pNode->pNext->pHToken->subStem->strFeature[1] == '0')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4); //2,4
				if (bIsFirstFind == false)
				{
					CreateStemEndStr(pNode, CREATE_STEM, 3);
					strcpy(pNode->pHToken->subStem->strResult, "열");
					bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 64);//2, 7, 8, 64
				}
			}
			if (bIsFirstFind == false)
				bIsFirstFind = SaveStemFeature(pNode, 2, 4); //2,4
		}
		if (bIsFind == true && bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "열");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 64);//2, 7, 8, 64
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4); //2,4
	}
}

void CNAAmbiguity::Amb_Function_0625(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsFind = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	pOriginalString = pNode->pHToken->strSource;
	nTotalLen = strlen(pOriginalString);
	if (pOriginalString[0] & 0x80)
	{
		if (nTotalLen >= 3)
		{
			if (pOriginalString[3] & 0x80)
			{
				bIsFind = IsChosungIFunction(pOriginalString, 4, "ㄴ");
			}
			else
			{
				bIsFind = false;
			}
		}
		else
		{
			bIsFind = false;
		}
	}
	if (bIsFind == true && bIsFirstFind == false)
	{
		if (PrevNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (strcmp(pNode->pPrev->pHToken->subStem->strResult, "불") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "전등") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "형광등") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "컴퓨터") == 0 ||
				strcmp(pNode->pPrev->pHToken->subStem->strResult, "전원") == 0)
			{
				bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2, 7, 8
			}
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "끌");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 64);//2, 7, 8, 64
		}
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2, 7, 8
}

void CNAAmbiguity::Amb_Function_0626(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
	{
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
			{
				CreateStemEndStr(pNode, CREATE_STEM, 3);
				strcpy(pNode->pHToken->subStem->strResult, "여");
				bIsFirstFind = SaveStemFeature(pNode, 2, 4, 5);//2,4,5

				CreateNewEndStr(pNode, "는");
				SaveEndBuffer("는");
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[5] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			CreateStemEndStr(pNode, CREATE_STEM, 3);
			strcpy(pNode->pHToken->subStem->strResult, "열");
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 64);//2, 7, 8, 64

			CreateNewEndStr(pNode, "는");
			SaveEndBuffer("는");
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		CreateStemEndStr(pNode, CREATE_STEM, 3);
		strcpy(pNode->pHToken->subStem->strResult, "열");
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8, 64);//2, 7, 8, 64

		CreateNewEndStr(pNode, "는");
		SaveEndBuffer("는");
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}

//살리
void CNAAmbiguity::Amb_Function_0627(H_NODE *pNode)
{
	bool bIsFirstFind = false;

	if (ThisNodeNull(END_VALUE) == true && bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14, 16, 17, 18);//2,4,14,16,17,18
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1' &&
			pNode->pHToken->subEnding->strFeature[3] == '0')
			bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14, 16, 17, 18);//2,4,14,16,17,18
	}
	if (ThisNodestrResult(END_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subEnding->strResult, "는") == 0)
		{
			if (PrevNodeFeature(STEM_VALUE) == true && PrevNodeNull(END_VALUE) == true && bIsFirstFind == false)
			{
				if (pNode->pPrev->pHToken->subStem->strFeature[4] == '1' &&
					pNode->pPrev->pHToken->subStem->strFeature[14] == '1' &&
					pNode->pPrev->pHToken->subStem->strFeature[18] == '1')
					bIsFirstFind = SaveStemFeature(pNode, 2, 4, 14, 16, 17, 18);//2,4,14,16,17,18
			}
		}
		if (bIsFirstFind == false)
			bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2, 7, 8
	}
	if (bIsFirstFind == false)
		bIsFirstFind = SaveStemFeature(pNode, 2, 7, 8);//2, 7, 8
}

//고,,못했어요...
void CNAAmbiguity::Amb_Function_0001(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsCon = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	if (pNode->pHToken->subStem != NULL && pNode->pHToken->subStem->strResult != NULL) 
	{
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		bIsCon = INT_CON(pOriginalString, nTotalLen);

		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[7] == '1')
			{
				bIsFirstFind = true;
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[28] = '1';
				pNode->pHToken->subEnding->strFeature[29] = '1';
			}
		}
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[26] == '1')
			{
				bIsFirstFind = true;
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[28] = '1';
				pNode->pHToken->subEnding->strFeature[29] = '1';
			}
		}
		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[4] == '1')
			{
				bIsFirstFind = true;
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[28] = '1';
			}
		}
		if (bIsCon == true && bIsFirstFind == false)
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[28] = '1';
		}
	}
}

//다, 못했어요....
void CNAAmbiguity::Amb_Function_0002(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsCon = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	if (pNode->pHToken->subStem != NULL && pNode->pHToken->subStem->strResult != NULL)
	{
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		bIsCon = INT_CON(pOriginalString, nTotalLen);

		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[7] == '1')
			{
				bIsFirstFind = true;
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[41] = '1';
			}
		}
		if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subEnding->strFeature[26] == '1')
			{
				bIsFirstFind = true;
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[41] = '1';
			}
		}
		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[2] == '1')
			{
				bIsFirstFind = true;
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[26] = '1';
				//2017-11-02 주
				//CreateNewEndStr(pNode, "이다");// Added by KKH 2004-01-13 
				//SaveEndBuffer("이다"); //Added by KKH 2004-01-13
				pNode->pHToken->subEnding->strFeature[41] = '1';
			}
		}
		if (bIsCon == true && bIsFirstFind == false)
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[41] = '1';
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[41] = '1';
		}
	}
}


//을
void CNAAmbiguity::Amb_Function_0003(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken == NULL)
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[4] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[6] = '1';
		pNode->pHToken->subEnding->strFeature[25] = '0';
	}
}


//은
void CNAAmbiguity::Amb_Function_0004(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken == NULL)
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (NextNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subEnding->strFeature[5] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[5] = '1';
		pNode->pHToken->subEnding->strFeature[25] = '0';
	}
}


//요
void CNAAmbiguity::Amb_Function_0005(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[2] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}



//여
void CNAAmbiguity::Amb_Function_0006(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[2] == '1' &&
			(pNode->pHToken->subStem->strFeature[6] == '1' ||
				pNode->pHToken->subStem->strFeature[12] == '1'))
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[24] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[2] == '1' ||
			pNode->pHToken->subStem->strFeature[17] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken == NULL)
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}


//야
void CNAAmbiguity::Amb_Function_0007(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[4] == '1' ||
			pNode->pHToken->subStem->strFeature[17] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}


//아
void CNAAmbiguity::Amb_Function_0008(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[4] == '1' ||
			pNode->pHToken->subStem->strFeature[17] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}


//서, 서만, 서도, 서는
void CNAAmbiguity::Amb_Function_0009(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[28] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[51] == '1' ||
			pNode->pHToken->subStem->strFeature[4] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[9] = '1';
			pNode->pHToken->subEnding->strFeature[10] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[28] = '1';
	}
}



//며
void CNAAmbiguity::Amb_Function_0010(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
			pNode->pHToken->subEnding->strFeature[28] = '1';
			pNode->pHToken->subEnding->strFeature[29] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
			pNode->pHToken->subEnding->strFeature[28] = '1';
			pNode->pHToken->subEnding->strFeature[29] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[4] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[8] = '1';
		pNode->pHToken->subEnding->strFeature[28] = '1';
		pNode->pHToken->subEnding->strFeature[29] = '1';
	}
}

//란
void CNAAmbiguity::Amb_Function_0011(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && PrevNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[4] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[4] == '1' &&
			pNode->pNext->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[4] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[4] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[4] = '1';
		pNode->pHToken->subEnding->strFeature[5] = '1';
	}
}


//라고, 라도, 라고도
void CNAAmbiguity::Amb_Function_0012(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[3] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodestrResult(END_VALUE) == true && ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1' &&
			strcmp(pNode->pHToken->subEnding->strResult, "라고") == 0)
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[38] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[4] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
			pNode->pHToken->subEnding->strFeature[38] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

//라
void CNAAmbiguity::Amb_Function_0013(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true && NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[7] == '1' &&
			pNode->pNext->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[38] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1'&&
			pNode->pNext->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[38] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[4] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken == NULL)
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

//ㄹ
void CNAAmbiguity::Amb_Function_0014(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken == NULL)
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[4] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[6] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
		pNode->pHToken->subEnding->strFeature[25] = '0';
	}
}


//도,,,,, 다 못했어요....
void CNAAmbiguity::Amb_Function_0015(H_NODE *pNode)
{

	bool bIsFirstFind = false;
	bool bIsCon = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	if (pNode->pHToken->subStem != NULL && pNode->pHToken->subStem->strResult != NULL)
	{
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		bIsCon = INT_CON(pOriginalString, nTotalLen);

		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[4] == '1')
			{
				bIsFirstFind = true;
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[5] = '1';
			}
		}
		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[7] == '1')
			{
				bIsFirstFind = true;
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (bIsCon == true && bIsFirstFind == false)
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
		if (NextNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subStem->strFeature[7] == '1')
			{
				bIsFirstFind = true;
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
			}
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
		}
	}
}


//나마
void CNAAmbiguity::Amb_Function_0016(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[4] == '1' ||
			pNode->pHToken->subStem->strFeature[10] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
	}
}


//니
void CNAAmbiguity::Amb_Function_0017(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true && NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[20] = '1';
			pNode->pHToken->subEnding->strFeature[41] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[20] = '1';
			pNode->pHToken->subEnding->strFeature[41] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[4] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
			pNode->pHToken->subEnding->strFeature[20] = '1';
			pNode->pHToken->subEnding->strFeature[41] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[4] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[26] = '1';
			pNode->pHToken->subEnding->strFeature[28] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[28] = '1';
	}
}


//는,,,, 못했어요.
void CNAAmbiguity::Amb_Function_0018(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	bool bIsCon = false;
	char* pOriginalString = NULL;
	int nTotalLen = 0;
	if (pNode->pHToken->subStem != NULL && pNode->pHToken->subStem->strResult != NULL)
	{
		pOriginalString = pNode->pHToken->subStem->strResult;
		nTotalLen = strlen(pOriginalString);
		bIsCon = INT_CON(pOriginalString, nTotalLen);

		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[39] == '1')
			{
				bIsFirstFind = true;
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[5] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '0';
			}
		}
		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[7] == '1')
			{
				bIsFirstFind = true;
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '0';
			}
		}
		if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken == NULL)
			{
				bIsFirstFind = true;
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[5] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '0';
			}
		}
		if (NextNodeFeature(END_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pNext->pHToken->subEnding->strFeature[5] == '1')
			{
				bIsFirstFind = true;
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[3] = '1';
				pNode->pHToken->subEnding->strFeature[42] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '0';
			}
		}
		if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
		{
			if (pNode->pHToken->subStem->strFeature[4] == '1')
			{
				bIsFirstFind = true;
				pNode->pHToken->subEnding->strFeature[1] = '1';
				pNode->pHToken->subEnding->strFeature[2] = '1';
				pNode->pHToken->subEnding->strFeature[5] = '1';
				pNode->pHToken->subEnding->strFeature[25] = '0';
			}
		}
		if (bIsCon == true && bIsFirstFind == false)
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
		if (bIsFirstFind == false)
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
}


//나
void CNAAmbiguity::Amb_Function_0019(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
			pNode->pHToken->subEnding->strFeature[37] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[4] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[8] = '1';
			pNode->pHToken->subEnding->strFeature[37] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[2] = '1';
		pNode->pHToken->subEnding->strFeature[8] = '1';
		pNode->pHToken->subEnding->strFeature[37] = '1';
	}
}

//ㄴ
void CNAAmbiguity::Amb_Function_0020(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[39] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
			pNode->pHToken->subEnding->strFeature[42] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[2] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (NextNodeNull(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pNext->pHToken == NULL)
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[4] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
			pNode->pHToken->subEnding->strFeature[5] = '1';
			pNode->pHToken->subEnding->strFeature[25] = '0';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[42] = '1';
		pNode->pHToken->subEnding->strFeature[25] = '0';
	}
}


//든, 든지, 거나, 에요, ㄴ가, 대, 대요, 든간에
void CNAAmbiguity::Amb_Function_0021(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[7] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeFeature(END_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subEnding->strFeature[26] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[3] = '1';
		}
	}
	if (ThisNodeFeature(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (pNode->pHToken->subStem->strFeature[4] == '1')
		{
			bIsFirstFind = true;
			pNode->pHToken->subEnding->strFeature[1] = '1';
			pNode->pHToken->subEnding->strFeature[2] = '1';
		}
	}
	if (bIsFirstFind == false)
	{
		bIsFirstFind = true;
		pNode->pHToken->subEnding->strFeature[1] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
	}
}

//인가
void CNAAmbiguity::Amb_Function_0022(H_NODE *pNode)
{
	bool bIsFirstFind = false;
	if (ThisNodestrResult(STEM_VALUE) == true && bIsFirstFind == false)
	{
		if (strcmp(pNode->pHToken->subStem->strResult, "설립") == 0 ||
			strcmp(pNode->pHToken->subStem->strResult, "영업") == 0)
			bIsFirstFind = SaveStemFeature(pNode, 2, 4);//2,4
	}
	if (bIsFirstFind == false)
	{
		pNode->pHToken->subEnding->strFeature[26] = '1';
		pNode->pHToken->subEnding->strFeature[3] = '1';
		pNode->pHToken->subEnding->strFeature[1] = '1';
	}
}